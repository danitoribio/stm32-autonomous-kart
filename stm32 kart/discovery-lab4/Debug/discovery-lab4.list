
discovery-lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fcc  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  0800510c  0800510c  0001510c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800522c  0800522c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800522c  0800522c  0001522c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005234  08005234  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005234  08005234  00015234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005238  08005238  00015238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800523c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  2000000c  08005248  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  08005248  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c5ee  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fa0  00000000  00000000  0002c623  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  0002e5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf0  00000000  00000000  0002f270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000168f4  00000000  00000000  0002fe60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ce83  00000000  00000000  00046754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fc26  00000000  00000000  000535d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e31fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000369c  00000000  00000000  000e3250  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000000c 	.word	0x2000000c
 800015c:	00000000 	.word	0x00000000
 8000160:	080050f4 	.word	0x080050f4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000010 	.word	0x20000010
 800017c:	080050f4 	.word	0x080050f4

08000180 <__aeabi_fmul>:
 8000180:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000184:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000188:	bf1e      	ittt	ne
 800018a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800018e:	ea92 0f0c 	teqne	r2, ip
 8000192:	ea93 0f0c 	teqne	r3, ip
 8000196:	d06f      	beq.n	8000278 <__aeabi_fmul+0xf8>
 8000198:	441a      	add	r2, r3
 800019a:	ea80 0c01 	eor.w	ip, r0, r1
 800019e:	0240      	lsls	r0, r0, #9
 80001a0:	bf18      	it	ne
 80001a2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80001a6:	d01e      	beq.n	80001e6 <__aeabi_fmul+0x66>
 80001a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80001ac:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001b0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001b4:	fba0 3101 	umull	r3, r1, r0, r1
 80001b8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80001bc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001c0:	bf3e      	ittt	cc
 80001c2:	0049      	lslcc	r1, r1, #1
 80001c4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001c8:	005b      	lslcc	r3, r3, #1
 80001ca:	ea40 0001 	orr.w	r0, r0, r1
 80001ce:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001d2:	2afd      	cmp	r2, #253	; 0xfd
 80001d4:	d81d      	bhi.n	8000212 <__aeabi_fmul+0x92>
 80001d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001da:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001de:	bf08      	it	eq
 80001e0:	f020 0001 	biceq.w	r0, r0, #1
 80001e4:	4770      	bx	lr
 80001e6:	f090 0f00 	teq	r0, #0
 80001ea:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ee:	bf08      	it	eq
 80001f0:	0249      	lsleq	r1, r1, #9
 80001f2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001f6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001fa:	3a7f      	subs	r2, #127	; 0x7f
 80001fc:	bfc2      	ittt	gt
 80001fe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000202:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000206:	4770      	bxgt	lr
 8000208:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800020c:	f04f 0300 	mov.w	r3, #0
 8000210:	3a01      	subs	r2, #1
 8000212:	dc5d      	bgt.n	80002d0 <__aeabi_fmul+0x150>
 8000214:	f112 0f19 	cmn.w	r2, #25
 8000218:	bfdc      	itt	le
 800021a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800021e:	4770      	bxle	lr
 8000220:	f1c2 0200 	rsb	r2, r2, #0
 8000224:	0041      	lsls	r1, r0, #1
 8000226:	fa21 f102 	lsr.w	r1, r1, r2
 800022a:	f1c2 0220 	rsb	r2, r2, #32
 800022e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000232:	ea5f 0031 	movs.w	r0, r1, rrx
 8000236:	f140 0000 	adc.w	r0, r0, #0
 800023a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800023e:	bf08      	it	eq
 8000240:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000244:	4770      	bx	lr
 8000246:	f092 0f00 	teq	r2, #0
 800024a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800024e:	bf02      	ittt	eq
 8000250:	0040      	lsleq	r0, r0, #1
 8000252:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000256:	3a01      	subeq	r2, #1
 8000258:	d0f9      	beq.n	800024e <__aeabi_fmul+0xce>
 800025a:	ea40 000c 	orr.w	r0, r0, ip
 800025e:	f093 0f00 	teq	r3, #0
 8000262:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000266:	bf02      	ittt	eq
 8000268:	0049      	lsleq	r1, r1, #1
 800026a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800026e:	3b01      	subeq	r3, #1
 8000270:	d0f9      	beq.n	8000266 <__aeabi_fmul+0xe6>
 8000272:	ea41 010c 	orr.w	r1, r1, ip
 8000276:	e78f      	b.n	8000198 <__aeabi_fmul+0x18>
 8000278:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800027c:	ea92 0f0c 	teq	r2, ip
 8000280:	bf18      	it	ne
 8000282:	ea93 0f0c 	teqne	r3, ip
 8000286:	d00a      	beq.n	800029e <__aeabi_fmul+0x11e>
 8000288:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800028c:	bf18      	it	ne
 800028e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000292:	d1d8      	bne.n	8000246 <__aeabi_fmul+0xc6>
 8000294:	ea80 0001 	eor.w	r0, r0, r1
 8000298:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800029c:	4770      	bx	lr
 800029e:	f090 0f00 	teq	r0, #0
 80002a2:	bf17      	itett	ne
 80002a4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80002a8:	4608      	moveq	r0, r1
 80002aa:	f091 0f00 	teqne	r1, #0
 80002ae:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80002b2:	d014      	beq.n	80002de <__aeabi_fmul+0x15e>
 80002b4:	ea92 0f0c 	teq	r2, ip
 80002b8:	d101      	bne.n	80002be <__aeabi_fmul+0x13e>
 80002ba:	0242      	lsls	r2, r0, #9
 80002bc:	d10f      	bne.n	80002de <__aeabi_fmul+0x15e>
 80002be:	ea93 0f0c 	teq	r3, ip
 80002c2:	d103      	bne.n	80002cc <__aeabi_fmul+0x14c>
 80002c4:	024b      	lsls	r3, r1, #9
 80002c6:	bf18      	it	ne
 80002c8:	4608      	movne	r0, r1
 80002ca:	d108      	bne.n	80002de <__aeabi_fmul+0x15e>
 80002cc:	ea80 0001 	eor.w	r0, r0, r1
 80002d0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002d4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002dc:	4770      	bx	lr
 80002de:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002e2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_drsub>:
 80002e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002ec:	e002      	b.n	80002f4 <__adddf3>
 80002ee:	bf00      	nop

080002f0 <__aeabi_dsub>:
 80002f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002f4 <__adddf3>:
 80002f4:	b530      	push	{r4, r5, lr}
 80002f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002fe:	ea94 0f05 	teq	r4, r5
 8000302:	bf08      	it	eq
 8000304:	ea90 0f02 	teqeq	r0, r2
 8000308:	bf1f      	itttt	ne
 800030a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800030e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000312:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000316:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800031a:	f000 80e2 	beq.w	80004e2 <__adddf3+0x1ee>
 800031e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000322:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000326:	bfb8      	it	lt
 8000328:	426d      	neglt	r5, r5
 800032a:	dd0c      	ble.n	8000346 <__adddf3+0x52>
 800032c:	442c      	add	r4, r5
 800032e:	ea80 0202 	eor.w	r2, r0, r2
 8000332:	ea81 0303 	eor.w	r3, r1, r3
 8000336:	ea82 0000 	eor.w	r0, r2, r0
 800033a:	ea83 0101 	eor.w	r1, r3, r1
 800033e:	ea80 0202 	eor.w	r2, r0, r2
 8000342:	ea81 0303 	eor.w	r3, r1, r3
 8000346:	2d36      	cmp	r5, #54	; 0x36
 8000348:	bf88      	it	hi
 800034a:	bd30      	pophi	{r4, r5, pc}
 800034c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000350:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000354:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000358:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800035c:	d002      	beq.n	8000364 <__adddf3+0x70>
 800035e:	4240      	negs	r0, r0
 8000360:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000364:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000368:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800036c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000370:	d002      	beq.n	8000378 <__adddf3+0x84>
 8000372:	4252      	negs	r2, r2
 8000374:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000378:	ea94 0f05 	teq	r4, r5
 800037c:	f000 80a7 	beq.w	80004ce <__adddf3+0x1da>
 8000380:	f1a4 0401 	sub.w	r4, r4, #1
 8000384:	f1d5 0e20 	rsbs	lr, r5, #32
 8000388:	db0d      	blt.n	80003a6 <__adddf3+0xb2>
 800038a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800038e:	fa22 f205 	lsr.w	r2, r2, r5
 8000392:	1880      	adds	r0, r0, r2
 8000394:	f141 0100 	adc.w	r1, r1, #0
 8000398:	fa03 f20e 	lsl.w	r2, r3, lr
 800039c:	1880      	adds	r0, r0, r2
 800039e:	fa43 f305 	asr.w	r3, r3, r5
 80003a2:	4159      	adcs	r1, r3
 80003a4:	e00e      	b.n	80003c4 <__adddf3+0xd0>
 80003a6:	f1a5 0520 	sub.w	r5, r5, #32
 80003aa:	f10e 0e20 	add.w	lr, lr, #32
 80003ae:	2a01      	cmp	r2, #1
 80003b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003b4:	bf28      	it	cs
 80003b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003ba:	fa43 f305 	asr.w	r3, r3, r5
 80003be:	18c0      	adds	r0, r0, r3
 80003c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c8:	d507      	bpl.n	80003da <__adddf3+0xe6>
 80003ca:	f04f 0e00 	mov.w	lr, #0
 80003ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80003d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003de:	d31b      	bcc.n	8000418 <__adddf3+0x124>
 80003e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003e4:	d30c      	bcc.n	8000400 <__adddf3+0x10c>
 80003e6:	0849      	lsrs	r1, r1, #1
 80003e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f0:	f104 0401 	add.w	r4, r4, #1
 80003f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003fc:	f080 809a 	bcs.w	8000534 <__adddf3+0x240>
 8000400:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000404:	bf08      	it	eq
 8000406:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800040a:	f150 0000 	adcs.w	r0, r0, #0
 800040e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000412:	ea41 0105 	orr.w	r1, r1, r5
 8000416:	bd30      	pop	{r4, r5, pc}
 8000418:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800041c:	4140      	adcs	r0, r0
 800041e:	eb41 0101 	adc.w	r1, r1, r1
 8000422:	3c01      	subs	r4, #1
 8000424:	bf28      	it	cs
 8000426:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800042a:	d2e9      	bcs.n	8000400 <__adddf3+0x10c>
 800042c:	f091 0f00 	teq	r1, #0
 8000430:	bf04      	itt	eq
 8000432:	4601      	moveq	r1, r0
 8000434:	2000      	moveq	r0, #0
 8000436:	fab1 f381 	clz	r3, r1
 800043a:	bf08      	it	eq
 800043c:	3320      	addeq	r3, #32
 800043e:	f1a3 030b 	sub.w	r3, r3, #11
 8000442:	f1b3 0220 	subs.w	r2, r3, #32
 8000446:	da0c      	bge.n	8000462 <__adddf3+0x16e>
 8000448:	320c      	adds	r2, #12
 800044a:	dd08      	ble.n	800045e <__adddf3+0x16a>
 800044c:	f102 0c14 	add.w	ip, r2, #20
 8000450:	f1c2 020c 	rsb	r2, r2, #12
 8000454:	fa01 f00c 	lsl.w	r0, r1, ip
 8000458:	fa21 f102 	lsr.w	r1, r1, r2
 800045c:	e00c      	b.n	8000478 <__adddf3+0x184>
 800045e:	f102 0214 	add.w	r2, r2, #20
 8000462:	bfd8      	it	le
 8000464:	f1c2 0c20 	rsble	ip, r2, #32
 8000468:	fa01 f102 	lsl.w	r1, r1, r2
 800046c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000470:	bfdc      	itt	le
 8000472:	ea41 010c 	orrle.w	r1, r1, ip
 8000476:	4090      	lslle	r0, r2
 8000478:	1ae4      	subs	r4, r4, r3
 800047a:	bfa2      	ittt	ge
 800047c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000480:	4329      	orrge	r1, r5
 8000482:	bd30      	popge	{r4, r5, pc}
 8000484:	ea6f 0404 	mvn.w	r4, r4
 8000488:	3c1f      	subs	r4, #31
 800048a:	da1c      	bge.n	80004c6 <__adddf3+0x1d2>
 800048c:	340c      	adds	r4, #12
 800048e:	dc0e      	bgt.n	80004ae <__adddf3+0x1ba>
 8000490:	f104 0414 	add.w	r4, r4, #20
 8000494:	f1c4 0220 	rsb	r2, r4, #32
 8000498:	fa20 f004 	lsr.w	r0, r0, r4
 800049c:	fa01 f302 	lsl.w	r3, r1, r2
 80004a0:	ea40 0003 	orr.w	r0, r0, r3
 80004a4:	fa21 f304 	lsr.w	r3, r1, r4
 80004a8:	ea45 0103 	orr.w	r1, r5, r3
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f1c4 040c 	rsb	r4, r4, #12
 80004b2:	f1c4 0220 	rsb	r2, r4, #32
 80004b6:	fa20 f002 	lsr.w	r0, r0, r2
 80004ba:	fa01 f304 	lsl.w	r3, r1, r4
 80004be:	ea40 0003 	orr.w	r0, r0, r3
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	fa21 f004 	lsr.w	r0, r1, r4
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	f094 0f00 	teq	r4, #0
 80004d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004d6:	bf06      	itte	eq
 80004d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004dc:	3401      	addeq	r4, #1
 80004de:	3d01      	subne	r5, #1
 80004e0:	e74e      	b.n	8000380 <__adddf3+0x8c>
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf18      	it	ne
 80004e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ec:	d029      	beq.n	8000542 <__adddf3+0x24e>
 80004ee:	ea94 0f05 	teq	r4, r5
 80004f2:	bf08      	it	eq
 80004f4:	ea90 0f02 	teqeq	r0, r2
 80004f8:	d005      	beq.n	8000506 <__adddf3+0x212>
 80004fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80004fe:	bf04      	itt	eq
 8000500:	4619      	moveq	r1, r3
 8000502:	4610      	moveq	r0, r2
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	ea91 0f03 	teq	r1, r3
 800050a:	bf1e      	ittt	ne
 800050c:	2100      	movne	r1, #0
 800050e:	2000      	movne	r0, #0
 8000510:	bd30      	popne	{r4, r5, pc}
 8000512:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000516:	d105      	bne.n	8000524 <__adddf3+0x230>
 8000518:	0040      	lsls	r0, r0, #1
 800051a:	4149      	adcs	r1, r1
 800051c:	bf28      	it	cs
 800051e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000522:	bd30      	pop	{r4, r5, pc}
 8000524:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000528:	bf3c      	itt	cc
 800052a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800052e:	bd30      	popcc	{r4, r5, pc}
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000538:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800053c:	f04f 0000 	mov.w	r0, #0
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000546:	bf1a      	itte	ne
 8000548:	4619      	movne	r1, r3
 800054a:	4610      	movne	r0, r2
 800054c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000550:	bf1c      	itt	ne
 8000552:	460b      	movne	r3, r1
 8000554:	4602      	movne	r2, r0
 8000556:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800055a:	bf06      	itte	eq
 800055c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000560:	ea91 0f03 	teqeq	r1, r3
 8000564:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	bf00      	nop

0800056c <__aeabi_ui2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f04f 0500 	mov.w	r5, #0
 8000584:	f04f 0100 	mov.w	r1, #0
 8000588:	e750      	b.n	800042c <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_i2d>:
 800058c:	f090 0f00 	teq	r0, #0
 8000590:	bf04      	itt	eq
 8000592:	2100      	moveq	r1, #0
 8000594:	4770      	bxeq	lr
 8000596:	b530      	push	{r4, r5, lr}
 8000598:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005a4:	bf48      	it	mi
 80005a6:	4240      	negmi	r0, r0
 80005a8:	f04f 0100 	mov.w	r1, #0
 80005ac:	e73e      	b.n	800042c <__adddf3+0x138>
 80005ae:	bf00      	nop

080005b0 <__aeabi_f2d>:
 80005b0:	0042      	lsls	r2, r0, #1
 80005b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005be:	bf1f      	itttt	ne
 80005c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005cc:	4770      	bxne	lr
 80005ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005d2:	bf08      	it	eq
 80005d4:	4770      	bxeq	lr
 80005d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005da:	bf04      	itt	eq
 80005dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e0:	4770      	bxeq	lr
 80005e2:	b530      	push	{r4, r5, lr}
 80005e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f0:	e71c      	b.n	800042c <__adddf3+0x138>
 80005f2:	bf00      	nop

080005f4 <__aeabi_ul2d>:
 80005f4:	ea50 0201 	orrs.w	r2, r0, r1
 80005f8:	bf08      	it	eq
 80005fa:	4770      	bxeq	lr
 80005fc:	b530      	push	{r4, r5, lr}
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	e00a      	b.n	800061a <__aeabi_l2d+0x16>

08000604 <__aeabi_l2d>:
 8000604:	ea50 0201 	orrs.w	r2, r0, r1
 8000608:	bf08      	it	eq
 800060a:	4770      	bxeq	lr
 800060c:	b530      	push	{r4, r5, lr}
 800060e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000612:	d502      	bpl.n	800061a <__aeabi_l2d+0x16>
 8000614:	4240      	negs	r0, r0
 8000616:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800061a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800061e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000622:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000626:	f43f aed8 	beq.w	80003da <__adddf3+0xe6>
 800062a:	f04f 0203 	mov.w	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000642:	f1c2 0320 	rsb	r3, r2, #32
 8000646:	fa00 fc03 	lsl.w	ip, r0, r3
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000652:	ea40 000e 	orr.w	r0, r0, lr
 8000656:	fa21 f102 	lsr.w	r1, r1, r2
 800065a:	4414      	add	r4, r2
 800065c:	e6bd      	b.n	80003da <__adddf3+0xe6>
 800065e:	bf00      	nop

08000660 <__aeabi_dmul>:
 8000660:	b570      	push	{r4, r5, r6, lr}
 8000662:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000666:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800066a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800066e:	bf1d      	ittte	ne
 8000670:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000674:	ea94 0f0c 	teqne	r4, ip
 8000678:	ea95 0f0c 	teqne	r5, ip
 800067c:	f000 f8de 	bleq	800083c <__aeabi_dmul+0x1dc>
 8000680:	442c      	add	r4, r5
 8000682:	ea81 0603 	eor.w	r6, r1, r3
 8000686:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800068a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800068e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000692:	bf18      	it	ne
 8000694:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000698:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800069c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a0:	d038      	beq.n	8000714 <__aeabi_dmul+0xb4>
 80006a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006b6:	f04f 0600 	mov.w	r6, #0
 80006ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006be:	f09c 0f00 	teq	ip, #0
 80006c2:	bf18      	it	ne
 80006c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006d4:	d204      	bcs.n	80006e0 <__aeabi_dmul+0x80>
 80006d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006da:	416d      	adcs	r5, r5
 80006dc:	eb46 0606 	adc.w	r6, r6, r6
 80006e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f8:	bf88      	it	hi
 80006fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006fe:	d81e      	bhi.n	800073e <__aeabi_dmul+0xde>
 8000700:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000704:	bf08      	it	eq
 8000706:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800070a:	f150 0000 	adcs.w	r0, r0, #0
 800070e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000718:	ea46 0101 	orr.w	r1, r6, r1
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000728:	bfc2      	ittt	gt
 800072a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800072e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000732:	bd70      	popgt	{r4, r5, r6, pc}
 8000734:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000738:	f04f 0e00 	mov.w	lr, #0
 800073c:	3c01      	subs	r4, #1
 800073e:	f300 80ab 	bgt.w	8000898 <__aeabi_dmul+0x238>
 8000742:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000746:	bfde      	ittt	le
 8000748:	2000      	movle	r0, #0
 800074a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800074e:	bd70      	pople	{r4, r5, r6, pc}
 8000750:	f1c4 0400 	rsb	r4, r4, #0
 8000754:	3c20      	subs	r4, #32
 8000756:	da35      	bge.n	80007c4 <__aeabi_dmul+0x164>
 8000758:	340c      	adds	r4, #12
 800075a:	dc1b      	bgt.n	8000794 <__aeabi_dmul+0x134>
 800075c:	f104 0414 	add.w	r4, r4, #20
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f305 	lsl.w	r3, r0, r5
 8000768:	fa20 f004 	lsr.w	r0, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000778:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800077c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000780:	fa21 f604 	lsr.w	r6, r1, r4
 8000784:	eb42 0106 	adc.w	r1, r2, r6
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 040c 	rsb	r4, r4, #12
 8000798:	f1c4 0520 	rsb	r5, r4, #32
 800079c:	fa00 f304 	lsl.w	r3, r0, r4
 80007a0:	fa20 f005 	lsr.w	r0, r0, r5
 80007a4:	fa01 f204 	lsl.w	r2, r1, r4
 80007a8:	ea40 0002 	orr.w	r0, r0, r2
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007b4:	f141 0100 	adc.w	r1, r1, #0
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f1c4 0520 	rsb	r5, r4, #32
 80007c8:	fa00 f205 	lsl.w	r2, r0, r5
 80007cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d0:	fa20 f304 	lsr.w	r3, r0, r4
 80007d4:	fa01 f205 	lsl.w	r2, r1, r5
 80007d8:	ea43 0302 	orr.w	r3, r3, r2
 80007dc:	fa21 f004 	lsr.w	r0, r1, r4
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	fa21 f204 	lsr.w	r2, r1, r4
 80007e8:	ea20 0002 	bic.w	r0, r0, r2
 80007ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007f4:	bf08      	it	eq
 80007f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007fa:	bd70      	pop	{r4, r5, r6, pc}
 80007fc:	f094 0f00 	teq	r4, #0
 8000800:	d10f      	bne.n	8000822 <__aeabi_dmul+0x1c2>
 8000802:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000806:	0040      	lsls	r0, r0, #1
 8000808:	eb41 0101 	adc.w	r1, r1, r1
 800080c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3c01      	subeq	r4, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1a6>
 8000816:	ea41 0106 	orr.w	r1, r1, r6
 800081a:	f095 0f00 	teq	r5, #0
 800081e:	bf18      	it	ne
 8000820:	4770      	bxne	lr
 8000822:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000826:	0052      	lsls	r2, r2, #1
 8000828:	eb43 0303 	adc.w	r3, r3, r3
 800082c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000830:	bf08      	it	eq
 8000832:	3d01      	subeq	r5, #1
 8000834:	d0f7      	beq.n	8000826 <__aeabi_dmul+0x1c6>
 8000836:	ea43 0306 	orr.w	r3, r3, r6
 800083a:	4770      	bx	lr
 800083c:	ea94 0f0c 	teq	r4, ip
 8000840:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000844:	bf18      	it	ne
 8000846:	ea95 0f0c 	teqne	r5, ip
 800084a:	d00c      	beq.n	8000866 <__aeabi_dmul+0x206>
 800084c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000850:	bf18      	it	ne
 8000852:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000856:	d1d1      	bne.n	80007fc <__aeabi_dmul+0x19c>
 8000858:	ea81 0103 	eor.w	r1, r1, r3
 800085c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000860:	f04f 0000 	mov.w	r0, #0
 8000864:	bd70      	pop	{r4, r5, r6, pc}
 8000866:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800086a:	bf06      	itte	eq
 800086c:	4610      	moveq	r0, r2
 800086e:	4619      	moveq	r1, r3
 8000870:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000874:	d019      	beq.n	80008aa <__aeabi_dmul+0x24a>
 8000876:	ea94 0f0c 	teq	r4, ip
 800087a:	d102      	bne.n	8000882 <__aeabi_dmul+0x222>
 800087c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000880:	d113      	bne.n	80008aa <__aeabi_dmul+0x24a>
 8000882:	ea95 0f0c 	teq	r5, ip
 8000886:	d105      	bne.n	8000894 <__aeabi_dmul+0x234>
 8000888:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800088c:	bf1c      	itt	ne
 800088e:	4610      	movne	r0, r2
 8000890:	4619      	movne	r1, r3
 8000892:	d10a      	bne.n	80008aa <__aeabi_dmul+0x24a>
 8000894:	ea81 0103 	eor.w	r1, r1, r3
 8000898:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800089c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008a4:	f04f 0000 	mov.w	r0, #0
 80008a8:	bd70      	pop	{r4, r5, r6, pc}
 80008aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008b2:	bd70      	pop	{r4, r5, r6, pc}

080008b4 <__aeabi_ddiv>:
 80008b4:	b570      	push	{r4, r5, r6, lr}
 80008b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008c2:	bf1d      	ittte	ne
 80008c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c8:	ea94 0f0c 	teqne	r4, ip
 80008cc:	ea95 0f0c 	teqne	r5, ip
 80008d0:	f000 f8a7 	bleq	8000a22 <__aeabi_ddiv+0x16e>
 80008d4:	eba4 0405 	sub.w	r4, r4, r5
 80008d8:	ea81 0e03 	eor.w	lr, r1, r3
 80008dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008e4:	f000 8088 	beq.w	80009f8 <__aeabi_ddiv+0x144>
 80008e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000900:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000904:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000908:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800090c:	429d      	cmp	r5, r3
 800090e:	bf08      	it	eq
 8000910:	4296      	cmpeq	r6, r2
 8000912:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000916:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800091a:	d202      	bcs.n	8000922 <__aeabi_ddiv+0x6e>
 800091c:	085b      	lsrs	r3, r3, #1
 800091e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000922:	1ab6      	subs	r6, r6, r2
 8000924:	eb65 0503 	sbc.w	r5, r5, r3
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000932:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 000c 	orrcs.w	r0, r0, ip
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000978:	085b      	lsrs	r3, r3, #1
 800097a:	ea4f 0232 	mov.w	r2, r2, rrx
 800097e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000982:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000986:	bf22      	ittt	cs
 8000988:	1ab6      	subcs	r6, r6, r2
 800098a:	4675      	movcs	r5, lr
 800098c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000990:	ea55 0e06 	orrs.w	lr, r5, r6
 8000994:	d018      	beq.n	80009c8 <__aeabi_ddiv+0x114>
 8000996:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800099a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800099e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009b2:	d1c0      	bne.n	8000936 <__aeabi_ddiv+0x82>
 80009b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b8:	d10b      	bne.n	80009d2 <__aeabi_ddiv+0x11e>
 80009ba:	ea41 0100 	orr.w	r1, r1, r0
 80009be:	f04f 0000 	mov.w	r0, #0
 80009c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009c6:	e7b6      	b.n	8000936 <__aeabi_ddiv+0x82>
 80009c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009cc:	bf04      	itt	eq
 80009ce:	4301      	orreq	r1, r0
 80009d0:	2000      	moveq	r0, #0
 80009d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009d6:	bf88      	it	hi
 80009d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009dc:	f63f aeaf 	bhi.w	800073e <__aeabi_dmul+0xde>
 80009e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009e4:	bf04      	itt	eq
 80009e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ee:	f150 0000 	adcs.w	r0, r0, #0
 80009f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	pop	{r4, r5, r6, pc}
 80009f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a00:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a04:	bfc2      	ittt	gt
 8000a06:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a0a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a0e:	bd70      	popgt	{r4, r5, r6, pc}
 8000a10:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a14:	f04f 0e00 	mov.w	lr, #0
 8000a18:	3c01      	subs	r4, #1
 8000a1a:	e690      	b.n	800073e <__aeabi_dmul+0xde>
 8000a1c:	ea45 0e06 	orr.w	lr, r5, r6
 8000a20:	e68d      	b.n	800073e <__aeabi_dmul+0xde>
 8000a22:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a26:	ea94 0f0c 	teq	r4, ip
 8000a2a:	bf08      	it	eq
 8000a2c:	ea95 0f0c 	teqeq	r5, ip
 8000a30:	f43f af3b 	beq.w	80008aa <__aeabi_dmul+0x24a>
 8000a34:	ea94 0f0c 	teq	r4, ip
 8000a38:	d10a      	bne.n	8000a50 <__aeabi_ddiv+0x19c>
 8000a3a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a3e:	f47f af34 	bne.w	80008aa <__aeabi_dmul+0x24a>
 8000a42:	ea95 0f0c 	teq	r5, ip
 8000a46:	f47f af25 	bne.w	8000894 <__aeabi_dmul+0x234>
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	e72c      	b.n	80008aa <__aeabi_dmul+0x24a>
 8000a50:	ea95 0f0c 	teq	r5, ip
 8000a54:	d106      	bne.n	8000a64 <__aeabi_ddiv+0x1b0>
 8000a56:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a5a:	f43f aefd 	beq.w	8000858 <__aeabi_dmul+0x1f8>
 8000a5e:	4610      	mov	r0, r2
 8000a60:	4619      	mov	r1, r3
 8000a62:	e722      	b.n	80008aa <__aeabi_dmul+0x24a>
 8000a64:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a68:	bf18      	it	ne
 8000a6a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a6e:	f47f aec5 	bne.w	80007fc <__aeabi_dmul+0x19c>
 8000a72:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a76:	f47f af0d 	bne.w	8000894 <__aeabi_dmul+0x234>
 8000a7a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a7e:	f47f aeeb 	bne.w	8000858 <__aeabi_dmul+0x1f8>
 8000a82:	e712      	b.n	80008aa <__aeabi_dmul+0x24a>

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2f>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000adc:	bf24      	itt	cs
 8000ade:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ae6:	d90d      	bls.n	8000b04 <__aeabi_d2f+0x30>
 8000ae8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000afc:	bf08      	it	eq
 8000afe:	f020 0001 	biceq.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b08:	d121      	bne.n	8000b4e <__aeabi_d2f+0x7a>
 8000b0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b0e:	bfbc      	itt	lt
 8000b10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	4770      	bxlt	lr
 8000b16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b1e:	f1c2 0218 	rsb	r2, r2, #24
 8000b22:	f1c2 0c20 	rsb	ip, r2, #32
 8000b26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b2e:	bf18      	it	ne
 8000b30:	f040 0001 	orrne.w	r0, r0, #1
 8000b34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b40:	ea40 000c 	orr.w	r0, r0, ip
 8000b44:	fa23 f302 	lsr.w	r3, r3, r2
 8000b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b4c:	e7cc      	b.n	8000ae8 <__aeabi_d2f+0x14>
 8000b4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b52:	d107      	bne.n	8000b64 <__aeabi_d2f+0x90>
 8000b54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b58:	bf1e      	ittt	ne
 8000b5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b62:	4770      	bxne	lr
 8000b64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_frsub>:
 8000b74:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b78:	e002      	b.n	8000b80 <__addsf3>
 8000b7a:	bf00      	nop

08000b7c <__aeabi_fsub>:
 8000b7c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b80 <__addsf3>:
 8000b80:	0042      	lsls	r2, r0, #1
 8000b82:	bf1f      	itttt	ne
 8000b84:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b88:	ea92 0f03 	teqne	r2, r3
 8000b8c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b90:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b94:	d06a      	beq.n	8000c6c <__addsf3+0xec>
 8000b96:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b9a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b9e:	bfc1      	itttt	gt
 8000ba0:	18d2      	addgt	r2, r2, r3
 8000ba2:	4041      	eorgt	r1, r0
 8000ba4:	4048      	eorgt	r0, r1
 8000ba6:	4041      	eorgt	r1, r0
 8000ba8:	bfb8      	it	lt
 8000baa:	425b      	neglt	r3, r3
 8000bac:	2b19      	cmp	r3, #25
 8000bae:	bf88      	it	hi
 8000bb0:	4770      	bxhi	lr
 8000bb2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bb6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bbe:	bf18      	it	ne
 8000bc0:	4240      	negne	r0, r0
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bca:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bce:	bf18      	it	ne
 8000bd0:	4249      	negne	r1, r1
 8000bd2:	ea92 0f03 	teq	r2, r3
 8000bd6:	d03f      	beq.n	8000c58 <__addsf3+0xd8>
 8000bd8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bdc:	fa41 fc03 	asr.w	ip, r1, r3
 8000be0:	eb10 000c 	adds.w	r0, r0, ip
 8000be4:	f1c3 0320 	rsb	r3, r3, #32
 8000be8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bec:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf0:	d502      	bpl.n	8000bf8 <__addsf3+0x78>
 8000bf2:	4249      	negs	r1, r1
 8000bf4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bf8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bfc:	d313      	bcc.n	8000c26 <__addsf3+0xa6>
 8000bfe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c02:	d306      	bcc.n	8000c12 <__addsf3+0x92>
 8000c04:	0840      	lsrs	r0, r0, #1
 8000c06:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c0a:	f102 0201 	add.w	r2, r2, #1
 8000c0e:	2afe      	cmp	r2, #254	; 0xfe
 8000c10:	d251      	bcs.n	8000cb6 <__addsf3+0x136>
 8000c12:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c1a:	bf08      	it	eq
 8000c1c:	f020 0001 	biceq.w	r0, r0, #1
 8000c20:	ea40 0003 	orr.w	r0, r0, r3
 8000c24:	4770      	bx	lr
 8000c26:	0049      	lsls	r1, r1, #1
 8000c28:	eb40 0000 	adc.w	r0, r0, r0
 8000c2c:	3a01      	subs	r2, #1
 8000c2e:	bf28      	it	cs
 8000c30:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c34:	d2ed      	bcs.n	8000c12 <__addsf3+0x92>
 8000c36:	fab0 fc80 	clz	ip, r0
 8000c3a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c3e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c42:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c46:	bfaa      	itet	ge
 8000c48:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c4c:	4252      	neglt	r2, r2
 8000c4e:	4318      	orrge	r0, r3
 8000c50:	bfbc      	itt	lt
 8000c52:	40d0      	lsrlt	r0, r2
 8000c54:	4318      	orrlt	r0, r3
 8000c56:	4770      	bx	lr
 8000c58:	f092 0f00 	teq	r2, #0
 8000c5c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c60:	bf06      	itte	eq
 8000c62:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c66:	3201      	addeq	r2, #1
 8000c68:	3b01      	subne	r3, #1
 8000c6a:	e7b5      	b.n	8000bd8 <__addsf3+0x58>
 8000c6c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c74:	bf18      	it	ne
 8000c76:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c7a:	d021      	beq.n	8000cc0 <__addsf3+0x140>
 8000c7c:	ea92 0f03 	teq	r2, r3
 8000c80:	d004      	beq.n	8000c8c <__addsf3+0x10c>
 8000c82:	f092 0f00 	teq	r2, #0
 8000c86:	bf08      	it	eq
 8000c88:	4608      	moveq	r0, r1
 8000c8a:	4770      	bx	lr
 8000c8c:	ea90 0f01 	teq	r0, r1
 8000c90:	bf1c      	itt	ne
 8000c92:	2000      	movne	r0, #0
 8000c94:	4770      	bxne	lr
 8000c96:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c9a:	d104      	bne.n	8000ca6 <__addsf3+0x126>
 8000c9c:	0040      	lsls	r0, r0, #1
 8000c9e:	bf28      	it	cs
 8000ca0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ca4:	4770      	bx	lr
 8000ca6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000caa:	bf3c      	itt	cc
 8000cac:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb0:	4770      	bxcc	lr
 8000cb2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cb6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cbe:	4770      	bx	lr
 8000cc0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cc4:	bf16      	itet	ne
 8000cc6:	4608      	movne	r0, r1
 8000cc8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ccc:	4601      	movne	r1, r0
 8000cce:	0242      	lsls	r2, r0, #9
 8000cd0:	bf06      	itte	eq
 8000cd2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cd6:	ea90 0f01 	teqeq	r0, r1
 8000cda:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cde:	4770      	bx	lr

08000ce0 <__aeabi_ui2f>:
 8000ce0:	f04f 0300 	mov.w	r3, #0
 8000ce4:	e004      	b.n	8000cf0 <__aeabi_i2f+0x8>
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_i2f>:
 8000ce8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cec:	bf48      	it	mi
 8000cee:	4240      	negmi	r0, r0
 8000cf0:	ea5f 0c00 	movs.w	ip, r0
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cfc:	4601      	mov	r1, r0
 8000cfe:	f04f 0000 	mov.w	r0, #0
 8000d02:	e01c      	b.n	8000d3e <__aeabi_l2f+0x2a>

08000d04 <__aeabi_ul2f>:
 8000d04:	ea50 0201 	orrs.w	r2, r0, r1
 8000d08:	bf08      	it	eq
 8000d0a:	4770      	bxeq	lr
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e00a      	b.n	8000d28 <__aeabi_l2f+0x14>
 8000d12:	bf00      	nop

08000d14 <__aeabi_l2f>:
 8000d14:	ea50 0201 	orrs.w	r2, r0, r1
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d20:	d502      	bpl.n	8000d28 <__aeabi_l2f+0x14>
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	ea5f 0c01 	movs.w	ip, r1
 8000d2c:	bf02      	ittt	eq
 8000d2e:	4684      	moveq	ip, r0
 8000d30:	4601      	moveq	r1, r0
 8000d32:	2000      	moveq	r0, #0
 8000d34:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d38:	bf08      	it	eq
 8000d3a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d3e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d42:	fabc f28c 	clz	r2, ip
 8000d46:	3a08      	subs	r2, #8
 8000d48:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d4c:	db10      	blt.n	8000d70 <__aeabi_l2f+0x5c>
 8000d4e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d52:	4463      	add	r3, ip
 8000d54:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d58:	f1c2 0220 	rsb	r2, r2, #32
 8000d5c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d60:	fa20 f202 	lsr.w	r2, r0, r2
 8000d64:	eb43 0002 	adc.w	r0, r3, r2
 8000d68:	bf08      	it	eq
 8000d6a:	f020 0001 	biceq.w	r0, r0, #1
 8000d6e:	4770      	bx	lr
 8000d70:	f102 0220 	add.w	r2, r2, #32
 8000d74:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d78:	f1c2 0220 	rsb	r2, r2, #32
 8000d7c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d80:	fa21 f202 	lsr.w	r2, r1, r2
 8000d84:	eb43 0002 	adc.w	r0, r3, r2
 8000d88:	bf08      	it	eq
 8000d8a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d8e:	4770      	bx	lr

08000d90 <__aeabi_f2iz>:
 8000d90:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d94:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d98:	d30f      	bcc.n	8000dba <__aeabi_f2iz+0x2a>
 8000d9a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d9e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000da2:	d90d      	bls.n	8000dc0 <__aeabi_f2iz+0x30>
 8000da4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000da8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000dac:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000db0:	fa23 f002 	lsr.w	r0, r3, r2
 8000db4:	bf18      	it	ne
 8000db6:	4240      	negne	r0, r0
 8000db8:	4770      	bx	lr
 8000dba:	f04f 0000 	mov.w	r0, #0
 8000dbe:	4770      	bx	lr
 8000dc0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000dc4:	d101      	bne.n	8000dca <__aeabi_f2iz+0x3a>
 8000dc6:	0242      	lsls	r2, r0, #9
 8000dc8:	d105      	bne.n	8000dd6 <__aeabi_f2iz+0x46>
 8000dca:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000dce:	bf08      	it	eq
 8000dd0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000dd4:	4770      	bx	lr
 8000dd6:	f04f 0000 	mov.w	r0, #0
 8000dda:	4770      	bx	lr

08000ddc <__aeabi_uldivmod>:
 8000ddc:	b953      	cbnz	r3, 8000df4 <__aeabi_uldivmod+0x18>
 8000dde:	b94a      	cbnz	r2, 8000df4 <__aeabi_uldivmod+0x18>
 8000de0:	2900      	cmp	r1, #0
 8000de2:	bf08      	it	eq
 8000de4:	2800      	cmpeq	r0, #0
 8000de6:	bf1c      	itt	ne
 8000de8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dec:	f04f 30ff 	movne.w	r0, #4294967295
 8000df0:	f000 b976 	b.w	80010e0 <__aeabi_idiv0>
 8000df4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000df8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dfc:	f000 f806 	bl	8000e0c <__udivmoddi4>
 8000e00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e08:	b004      	add	sp, #16
 8000e0a:	4770      	bx	lr

08000e0c <__udivmoddi4>:
 8000e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e10:	9e08      	ldr	r6, [sp, #32]
 8000e12:	460d      	mov	r5, r1
 8000e14:	4604      	mov	r4, r0
 8000e16:	4688      	mov	r8, r1
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d14d      	bne.n	8000eb8 <__udivmoddi4+0xac>
 8000e1c:	428a      	cmp	r2, r1
 8000e1e:	4694      	mov	ip, r2
 8000e20:	d968      	bls.n	8000ef4 <__udivmoddi4+0xe8>
 8000e22:	fab2 f282 	clz	r2, r2
 8000e26:	b152      	cbz	r2, 8000e3e <__udivmoddi4+0x32>
 8000e28:	fa01 f302 	lsl.w	r3, r1, r2
 8000e2c:	f1c2 0120 	rsb	r1, r2, #32
 8000e30:	fa20 f101 	lsr.w	r1, r0, r1
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	ea41 0803 	orr.w	r8, r1, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000e42:	fbb8 f7f1 	udiv	r7, r8, r1
 8000e46:	fa1f fe8c 	uxth.w	lr, ip
 8000e4a:	fb01 8817 	mls	r8, r1, r7, r8
 8000e4e:	fb07 f00e 	mul.w	r0, r7, lr
 8000e52:	0c23      	lsrs	r3, r4, #16
 8000e54:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	d90a      	bls.n	8000e72 <__udivmoddi4+0x66>
 8000e5c:	eb1c 0303 	adds.w	r3, ip, r3
 8000e60:	f107 35ff 	add.w	r5, r7, #4294967295
 8000e64:	f080 811e 	bcs.w	80010a4 <__udivmoddi4+0x298>
 8000e68:	4298      	cmp	r0, r3
 8000e6a:	f240 811b 	bls.w	80010a4 <__udivmoddi4+0x298>
 8000e6e:	3f02      	subs	r7, #2
 8000e70:	4463      	add	r3, ip
 8000e72:	1a1b      	subs	r3, r3, r0
 8000e74:	fbb3 f0f1 	udiv	r0, r3, r1
 8000e78:	fb01 3310 	mls	r3, r1, r0, r3
 8000e7c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e80:	b2a4      	uxth	r4, r4
 8000e82:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e86:	45a6      	cmp	lr, r4
 8000e88:	d90a      	bls.n	8000ea0 <__udivmoddi4+0x94>
 8000e8a:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e92:	f080 8109 	bcs.w	80010a8 <__udivmoddi4+0x29c>
 8000e96:	45a6      	cmp	lr, r4
 8000e98:	f240 8106 	bls.w	80010a8 <__udivmoddi4+0x29c>
 8000e9c:	4464      	add	r4, ip
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	eba4 040e 	sub.w	r4, r4, lr
 8000ea6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000eaa:	b11e      	cbz	r6, 8000eb4 <__udivmoddi4+0xa8>
 8000eac:	2300      	movs	r3, #0
 8000eae:	40d4      	lsrs	r4, r2
 8000eb0:	e9c6 4300 	strd	r4, r3, [r6]
 8000eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb8:	428b      	cmp	r3, r1
 8000eba:	d908      	bls.n	8000ece <__udivmoddi4+0xc2>
 8000ebc:	2e00      	cmp	r6, #0
 8000ebe:	f000 80ee 	beq.w	800109e <__udivmoddi4+0x292>
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e9c6 0500 	strd	r0, r5, [r6]
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ece:	fab3 f183 	clz	r1, r3
 8000ed2:	2900      	cmp	r1, #0
 8000ed4:	d14a      	bne.n	8000f6c <__udivmoddi4+0x160>
 8000ed6:	42ab      	cmp	r3, r5
 8000ed8:	d302      	bcc.n	8000ee0 <__udivmoddi4+0xd4>
 8000eda:	4282      	cmp	r2, r0
 8000edc:	f200 80fc 	bhi.w	80010d8 <__udivmoddi4+0x2cc>
 8000ee0:	1a84      	subs	r4, r0, r2
 8000ee2:	eb65 0303 	sbc.w	r3, r5, r3
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	4698      	mov	r8, r3
 8000eea:	2e00      	cmp	r6, #0
 8000eec:	d0e2      	beq.n	8000eb4 <__udivmoddi4+0xa8>
 8000eee:	e9c6 4800 	strd	r4, r8, [r6]
 8000ef2:	e7df      	b.n	8000eb4 <__udivmoddi4+0xa8>
 8000ef4:	b902      	cbnz	r2, 8000ef8 <__udivmoddi4+0xec>
 8000ef6:	deff      	udf	#255	; 0xff
 8000ef8:	fab2 f282 	clz	r2, r2
 8000efc:	2a00      	cmp	r2, #0
 8000efe:	f040 8091 	bne.w	8001024 <__udivmoddi4+0x218>
 8000f02:	eba1 000c 	sub.w	r0, r1, ip
 8000f06:	2101      	movs	r1, #1
 8000f08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f0c:	fa1f fe8c 	uxth.w	lr, ip
 8000f10:	fbb0 f3f7 	udiv	r3, r0, r7
 8000f14:	fb07 0013 	mls	r0, r7, r3, r0
 8000f18:	0c25      	lsrs	r5, r4, #16
 8000f1a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000f1e:	fb0e f003 	mul.w	r0, lr, r3
 8000f22:	42a8      	cmp	r0, r5
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x12c>
 8000f26:	eb1c 0505 	adds.w	r5, ip, r5
 8000f2a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f2e:	d202      	bcs.n	8000f36 <__udivmoddi4+0x12a>
 8000f30:	42a8      	cmp	r0, r5
 8000f32:	f200 80ce 	bhi.w	80010d2 <__udivmoddi4+0x2c6>
 8000f36:	4643      	mov	r3, r8
 8000f38:	1a2d      	subs	r5, r5, r0
 8000f3a:	fbb5 f0f7 	udiv	r0, r5, r7
 8000f3e:	fb07 5510 	mls	r5, r7, r0, r5
 8000f42:	fb0e fe00 	mul.w	lr, lr, r0
 8000f46:	b2a4      	uxth	r4, r4
 8000f48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f4c:	45a6      	cmp	lr, r4
 8000f4e:	d908      	bls.n	8000f62 <__udivmoddi4+0x156>
 8000f50:	eb1c 0404 	adds.w	r4, ip, r4
 8000f54:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f58:	d202      	bcs.n	8000f60 <__udivmoddi4+0x154>
 8000f5a:	45a6      	cmp	lr, r4
 8000f5c:	f200 80b6 	bhi.w	80010cc <__udivmoddi4+0x2c0>
 8000f60:	4628      	mov	r0, r5
 8000f62:	eba4 040e 	sub.w	r4, r4, lr
 8000f66:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f6a:	e79e      	b.n	8000eaa <__udivmoddi4+0x9e>
 8000f6c:	f1c1 0720 	rsb	r7, r1, #32
 8000f70:	408b      	lsls	r3, r1
 8000f72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f7a:	fa25 fa07 	lsr.w	sl, r5, r7
 8000f7e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f82:	fbba f8f9 	udiv	r8, sl, r9
 8000f86:	fa20 f307 	lsr.w	r3, r0, r7
 8000f8a:	fb09 aa18 	mls	sl, r9, r8, sl
 8000f8e:	408d      	lsls	r5, r1
 8000f90:	fa1f fe8c 	uxth.w	lr, ip
 8000f94:	431d      	orrs	r5, r3
 8000f96:	fa00 f301 	lsl.w	r3, r0, r1
 8000f9a:	fb08 f00e 	mul.w	r0, r8, lr
 8000f9e:	0c2c      	lsrs	r4, r5, #16
 8000fa0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000fa4:	42a0      	cmp	r0, r4
 8000fa6:	fa02 f201 	lsl.w	r2, r2, r1
 8000faa:	d90b      	bls.n	8000fc4 <__udivmoddi4+0x1b8>
 8000fac:	eb1c 0404 	adds.w	r4, ip, r4
 8000fb0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fb4:	f080 8088 	bcs.w	80010c8 <__udivmoddi4+0x2bc>
 8000fb8:	42a0      	cmp	r0, r4
 8000fba:	f240 8085 	bls.w	80010c8 <__udivmoddi4+0x2bc>
 8000fbe:	f1a8 0802 	sub.w	r8, r8, #2
 8000fc2:	4464      	add	r4, ip
 8000fc4:	1a24      	subs	r4, r4, r0
 8000fc6:	fbb4 f0f9 	udiv	r0, r4, r9
 8000fca:	fb09 4410 	mls	r4, r9, r0, r4
 8000fce:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fd2:	b2ad      	uxth	r5, r5
 8000fd4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000fd8:	45a6      	cmp	lr, r4
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x1e2>
 8000fdc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fe0:	f100 35ff 	add.w	r5, r0, #4294967295
 8000fe4:	d26c      	bcs.n	80010c0 <__udivmoddi4+0x2b4>
 8000fe6:	45a6      	cmp	lr, r4
 8000fe8:	d96a      	bls.n	80010c0 <__udivmoddi4+0x2b4>
 8000fea:	3802      	subs	r0, #2
 8000fec:	4464      	add	r4, ip
 8000fee:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ff2:	fba0 9502 	umull	r9, r5, r0, r2
 8000ff6:	eba4 040e 	sub.w	r4, r4, lr
 8000ffa:	42ac      	cmp	r4, r5
 8000ffc:	46c8      	mov	r8, r9
 8000ffe:	46ae      	mov	lr, r5
 8001000:	d356      	bcc.n	80010b0 <__udivmoddi4+0x2a4>
 8001002:	d053      	beq.n	80010ac <__udivmoddi4+0x2a0>
 8001004:	2e00      	cmp	r6, #0
 8001006:	d069      	beq.n	80010dc <__udivmoddi4+0x2d0>
 8001008:	ebb3 0208 	subs.w	r2, r3, r8
 800100c:	eb64 040e 	sbc.w	r4, r4, lr
 8001010:	fa22 f301 	lsr.w	r3, r2, r1
 8001014:	fa04 f707 	lsl.w	r7, r4, r7
 8001018:	431f      	orrs	r7, r3
 800101a:	40cc      	lsrs	r4, r1
 800101c:	e9c6 7400 	strd	r7, r4, [r6]
 8001020:	2100      	movs	r1, #0
 8001022:	e747      	b.n	8000eb4 <__udivmoddi4+0xa8>
 8001024:	fa0c fc02 	lsl.w	ip, ip, r2
 8001028:	f1c2 0120 	rsb	r1, r2, #32
 800102c:	fa25 f301 	lsr.w	r3, r5, r1
 8001030:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001034:	fa20 f101 	lsr.w	r1, r0, r1
 8001038:	4095      	lsls	r5, r2
 800103a:	430d      	orrs	r5, r1
 800103c:	fbb3 f1f7 	udiv	r1, r3, r7
 8001040:	fb07 3311 	mls	r3, r7, r1, r3
 8001044:	fa1f fe8c 	uxth.w	lr, ip
 8001048:	0c28      	lsrs	r0, r5, #16
 800104a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800104e:	fb01 f30e 	mul.w	r3, r1, lr
 8001052:	4283      	cmp	r3, r0
 8001054:	fa04 f402 	lsl.w	r4, r4, r2
 8001058:	d908      	bls.n	800106c <__udivmoddi4+0x260>
 800105a:	eb1c 0000 	adds.w	r0, ip, r0
 800105e:	f101 38ff 	add.w	r8, r1, #4294967295
 8001062:	d22f      	bcs.n	80010c4 <__udivmoddi4+0x2b8>
 8001064:	4283      	cmp	r3, r0
 8001066:	d92d      	bls.n	80010c4 <__udivmoddi4+0x2b8>
 8001068:	3902      	subs	r1, #2
 800106a:	4460      	add	r0, ip
 800106c:	1ac0      	subs	r0, r0, r3
 800106e:	fbb0 f3f7 	udiv	r3, r0, r7
 8001072:	fb07 0013 	mls	r0, r7, r3, r0
 8001076:	b2ad      	uxth	r5, r5
 8001078:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800107c:	fb03 f00e 	mul.w	r0, r3, lr
 8001080:	42a8      	cmp	r0, r5
 8001082:	d908      	bls.n	8001096 <__udivmoddi4+0x28a>
 8001084:	eb1c 0505 	adds.w	r5, ip, r5
 8001088:	f103 38ff 	add.w	r8, r3, #4294967295
 800108c:	d216      	bcs.n	80010bc <__udivmoddi4+0x2b0>
 800108e:	42a8      	cmp	r0, r5
 8001090:	d914      	bls.n	80010bc <__udivmoddi4+0x2b0>
 8001092:	3b02      	subs	r3, #2
 8001094:	4465      	add	r5, ip
 8001096:	1a28      	subs	r0, r5, r0
 8001098:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800109c:	e738      	b.n	8000f10 <__udivmoddi4+0x104>
 800109e:	4631      	mov	r1, r6
 80010a0:	4630      	mov	r0, r6
 80010a2:	e707      	b.n	8000eb4 <__udivmoddi4+0xa8>
 80010a4:	462f      	mov	r7, r5
 80010a6:	e6e4      	b.n	8000e72 <__udivmoddi4+0x66>
 80010a8:	4618      	mov	r0, r3
 80010aa:	e6f9      	b.n	8000ea0 <__udivmoddi4+0x94>
 80010ac:	454b      	cmp	r3, r9
 80010ae:	d2a9      	bcs.n	8001004 <__udivmoddi4+0x1f8>
 80010b0:	ebb9 0802 	subs.w	r8, r9, r2
 80010b4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80010b8:	3801      	subs	r0, #1
 80010ba:	e7a3      	b.n	8001004 <__udivmoddi4+0x1f8>
 80010bc:	4643      	mov	r3, r8
 80010be:	e7ea      	b.n	8001096 <__udivmoddi4+0x28a>
 80010c0:	4628      	mov	r0, r5
 80010c2:	e794      	b.n	8000fee <__udivmoddi4+0x1e2>
 80010c4:	4641      	mov	r1, r8
 80010c6:	e7d1      	b.n	800106c <__udivmoddi4+0x260>
 80010c8:	46d0      	mov	r8, sl
 80010ca:	e77b      	b.n	8000fc4 <__udivmoddi4+0x1b8>
 80010cc:	4464      	add	r4, ip
 80010ce:	3802      	subs	r0, #2
 80010d0:	e747      	b.n	8000f62 <__udivmoddi4+0x156>
 80010d2:	3b02      	subs	r3, #2
 80010d4:	4465      	add	r5, ip
 80010d6:	e72f      	b.n	8000f38 <__udivmoddi4+0x12c>
 80010d8:	4608      	mov	r0, r1
 80010da:	e706      	b.n	8000eea <__udivmoddi4+0xde>
 80010dc:	4631      	mov	r1, r6
 80010de:	e6e9      	b.n	8000eb4 <__udivmoddi4+0xa8>

080010e0 <__aeabi_idiv0>:
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop

080010e4 <TIM3_IRQHandler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void TIM3_IRQHandler(void) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  if ((TIM3->SR & (1 << 1)) != 0) {
 80010e8:	4b33      	ldr	r3, [pc, #204]	; (80011b8 <TIM3_IRQHandler+0xd4>)
 80010ea:	691b      	ldr	r3, [r3, #16]
 80010ec:	f003 0302 	and.w	r3, r3, #2
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d017      	beq.n	8001124 <TIM3_IRQHandler+0x40>
    if (g_robot.delay == DELAY_START) {
 80010f4:	4b31      	ldr	r3, [pc, #196]	; (80011bc <TIM3_IRQHandler+0xd8>)
 80010f6:	78db      	ldrb	r3, [r3, #3]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d103      	bne.n	8001104 <TIM3_IRQHandler+0x20>
      g_robot.delay = DELAY_WAITING;
 80010fc:	4b2f      	ldr	r3, [pc, #188]	; (80011bc <TIM3_IRQHandler+0xd8>)
 80010fe:	2201      	movs	r2, #1
 8001100:	70da      	strb	r2, [r3, #3]
 8001102:	e006      	b.n	8001112 <TIM3_IRQHandler+0x2e>
    } else if (g_robot.delay == DELAY_WAITING) {
 8001104:	4b2d      	ldr	r3, [pc, #180]	; (80011bc <TIM3_IRQHandler+0xd8>)
 8001106:	78db      	ldrb	r3, [r3, #3]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d102      	bne.n	8001112 <TIM3_IRQHandler+0x2e>
      g_robot.delay = DELAY_OFF;
 800110c:	4b2b      	ldr	r3, [pc, #172]	; (80011bc <TIM3_IRQHandler+0xd8>)
 800110e:	2202      	movs	r2, #2
 8001110:	70da      	strb	r2, [r3, #3]
    }

    updateMaxSpeed();
 8001112:	f001 f985 	bl	8002420 <updateMaxSpeed>

    TIM3->SR &= ~(1 << 1);
 8001116:	4b28      	ldr	r3, [pc, #160]	; (80011b8 <TIM3_IRQHandler+0xd4>)
 8001118:	691b      	ldr	r3, [r3, #16]
 800111a:	4a27      	ldr	r2, [pc, #156]	; (80011b8 <TIM3_IRQHandler+0xd4>)
 800111c:	f023 0302 	bic.w	r3, r3, #2
 8001120:	6113      	str	r3, [r2, #16]
    }

    TIM3->SR &= ~(1 << 3);

  }
}
 8001122:	e046      	b.n	80011b2 <TIM3_IRQHandler+0xce>
  } else if ((TIM3->SR & (1 << 2)) != 0) {
 8001124:	4b24      	ldr	r3, [pc, #144]	; (80011b8 <TIM3_IRQHandler+0xd4>)
 8001126:	691b      	ldr	r3, [r3, #16]
 8001128:	f003 0304 	and.w	r3, r3, #4
 800112c:	2b00      	cmp	r3, #0
 800112e:	d029      	beq.n	8001184 <TIM3_IRQHandler+0xa0>
    if (g_robot.ultrasound->status == ULTRASOUND_STOPPED) {
 8001130:	4b22      	ldr	r3, [pc, #136]	; (80011bc <TIM3_IRQHandler+0xd8>)
 8001132:	695b      	ldr	r3, [r3, #20]
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10b      	bne.n	8001152 <TIM3_IRQHandler+0x6e>
      g_robot.ultrasound->status = ULTRASOUND_TRIGGER_START;
 800113a:	4b20      	ldr	r3, [pc, #128]	; (80011bc <TIM3_IRQHandler+0xd8>)
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	2201      	movs	r2, #1
 8001140:	701a      	strb	r2, [r3, #0]
      TIM2->EGR |= (1 << 2); // UG = 1 -> Send channel 2 update event to enable trigger
 8001142:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001146:	695b      	ldr	r3, [r3, #20]
 8001148:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800114c:	f043 0304 	orr.w	r3, r3, #4
 8001150:	6153      	str	r3, [r2, #20]
    TIM3->CCR2 = TIM3->CNT + TIMER_3_CH_2_CNT;
 8001152:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <TIM3_IRQHandler+0xd4>)
 8001154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001156:	4a18      	ldr	r2, [pc, #96]	; (80011b8 <TIM3_IRQHandler+0xd4>)
 8001158:	3332      	adds	r3, #50	; 0x32
 800115a:	6393      	str	r3, [r2, #56]	; 0x38
    if (TIM3->CCR2 > TIM3->ARR) {
 800115c:	4b16      	ldr	r3, [pc, #88]	; (80011b8 <TIM3_IRQHandler+0xd4>)
 800115e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001160:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <TIM3_IRQHandler+0xd4>)
 8001162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001164:	429a      	cmp	r2, r3
 8001166:	d906      	bls.n	8001176 <TIM3_IRQHandler+0x92>
      TIM3->CCR2 = TIM3->CCR2 - TIM3->ARR; // Handle counter overflows
 8001168:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <TIM3_IRQHandler+0xd4>)
 800116a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <TIM3_IRQHandler+0xd4>)
 800116e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001170:	4911      	ldr	r1, [pc, #68]	; (80011b8 <TIM3_IRQHandler+0xd4>)
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	638b      	str	r3, [r1, #56]	; 0x38
    TIM3->SR &= ~(1 << 2);
 8001176:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <TIM3_IRQHandler+0xd4>)
 8001178:	691b      	ldr	r3, [r3, #16]
 800117a:	4a0f      	ldr	r2, [pc, #60]	; (80011b8 <TIM3_IRQHandler+0xd4>)
 800117c:	f023 0304 	bic.w	r3, r3, #4
 8001180:	6113      	str	r3, [r2, #16]
}
 8001182:	e016      	b.n	80011b2 <TIM3_IRQHandler+0xce>
  } else if ((TIM3->SR & (1 << 3)) != 0) {
 8001184:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <TIM3_IRQHandler+0xd4>)
 8001186:	691b      	ldr	r3, [r3, #16]
 8001188:	f003 0308 	and.w	r3, r3, #8
 800118c:	2b00      	cmp	r3, #0
 800118e:	d010      	beq.n	80011b2 <TIM3_IRQHandler+0xce>
    if (g_robot.buzzer->status == BUZZER_BEEPING) {
 8001190:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <TIM3_IRQHandler+0xd8>)
 8001192:	691b      	ldr	r3, [r3, #16]
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2b02      	cmp	r3, #2
 8001198:	d105      	bne.n	80011a6 <TIM3_IRQHandler+0xc2>
      toggleGPIOPin(g_robot.buzzer->gpio_pin);
 800119a:	4b08      	ldr	r3, [pc, #32]	; (80011bc <TIM3_IRQHandler+0xd8>)
 800119c:	691b      	ldr	r3, [r3, #16]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f001 f8eb 	bl	800237c <toggleGPIOPin>
    TIM3->SR &= ~(1 << 3);
 80011a6:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <TIM3_IRQHandler+0xd4>)
 80011a8:	691b      	ldr	r3, [r3, #16]
 80011aa:	4a03      	ldr	r2, [pc, #12]	; (80011b8 <TIM3_IRQHandler+0xd4>)
 80011ac:	f023 0308 	bic.w	r3, r3, #8
 80011b0:	6113      	str	r3, [r2, #16]
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40000400 	.word	0x40000400
 80011bc:	20000180 	.word	0x20000180

080011c0 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
  if ((TIM2->SR & (1 << 1)) != 0) { // Channel 1
 80011c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011ca:	691b      	ldr	r3, [r3, #16]
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d05a      	beq.n	800128a <TIM2_IRQHandler+0xca>
    // ------------- Echo Timer -----------------------
    if (g_robot.ultrasound->status == ULTRASOUND_TRIGGER_SENT) {
 80011d4:	4b4c      	ldr	r3, [pc, #304]	; (8001308 <TIM2_IRQHandler+0x148>)
 80011d6:	695b      	ldr	r3, [r3, #20]
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b03      	cmp	r3, #3
 80011dc:	d10b      	bne.n	80011f6 <TIM2_IRQHandler+0x36>
      g_robot.ultrasound->time_init = TIM2->CCR1;
 80011de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011e4:	4b48      	ldr	r3, [pc, #288]	; (8001308 <TIM2_IRQHandler+0x148>)
 80011e6:	695b      	ldr	r3, [r3, #20]
 80011e8:	b292      	uxth	r2, r2
 80011ea:	819a      	strh	r2, [r3, #12]
      g_robot.ultrasound->status = ULTRASOUND_MEASURING;
 80011ec:	4b46      	ldr	r3, [pc, #280]	; (8001308 <TIM2_IRQHandler+0x148>)
 80011ee:	695b      	ldr	r3, [r3, #20]
 80011f0:	2204      	movs	r2, #4
 80011f2:	701a      	strb	r2, [r3, #0]
 80011f4:	e040      	b.n	8001278 <TIM2_IRQHandler+0xb8>

    } else if(g_robot.ultrasound->status == ULTRASOUND_MEASURING) {
 80011f6:	4b44      	ldr	r3, [pc, #272]	; (8001308 <TIM2_IRQHandler+0x148>)
 80011f8:	695b      	ldr	r3, [r3, #20]
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b04      	cmp	r3, #4
 80011fe:	d13b      	bne.n	8001278 <TIM2_IRQHandler+0xb8>
      int delay = TIM2->CCR1 - g_robot.ultrasound->time_init;
 8001200:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001206:	4a40      	ldr	r2, [pc, #256]	; (8001308 <TIM2_IRQHandler+0x148>)
 8001208:	6952      	ldr	r2, [r2, #20]
 800120a:	8992      	ldrh	r2, [r2, #12]
 800120c:	1a9b      	subs	r3, r3, r2
 800120e:	607b      	str	r3, [r7, #4]
      if (delay < 0) {
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	da04      	bge.n	8001220 <TIM2_IRQHandler+0x60>
        delay += 0xFFFF; // Handle counter overflows
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800121c:	33ff      	adds	r3, #255	; 0xff
 800121e:	607b      	str	r3, [r7, #4]
      }
      int distance = ((delay) * SPEED_SOUND_CM_MS) / 2;
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff f9b3 	bl	800058c <__aeabi_i2d>
 8001226:	a336      	add	r3, pc, #216	; (adr r3, 8001300 <TIM2_IRQHandler+0x140>)
 8001228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122c:	f7ff fa18 	bl	8000660 <__aeabi_dmul>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	4610      	mov	r0, r2
 8001236:	4619      	mov	r1, r3
 8001238:	f04f 0200 	mov.w	r2, #0
 800123c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001240:	f7ff fb38 	bl	80008b4 <__aeabi_ddiv>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	4610      	mov	r0, r2
 800124a:	4619      	mov	r1, r3
 800124c:	f7ff fc1a 	bl	8000a84 <__aeabi_d2iz>
 8001250:	4603      	mov	r3, r0
 8001252:	603b      	str	r3, [r7, #0]
      if (g_robot.ultrasound->distance != distance) {
 8001254:	4b2c      	ldr	r3, [pc, #176]	; (8001308 <TIM2_IRQHandler+0x148>)
 8001256:	695b      	ldr	r3, [r3, #20]
 8001258:	691b      	ldr	r3, [r3, #16]
 800125a:	683a      	ldr	r2, [r7, #0]
 800125c:	429a      	cmp	r2, r3
 800125e:	d007      	beq.n	8001270 <TIM2_IRQHandler+0xb0>
        g_robot.ultrasound->distance = distance;
 8001260:	4b29      	ldr	r3, [pc, #164]	; (8001308 <TIM2_IRQHandler+0x148>)
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	683a      	ldr	r2, [r7, #0]
 8001266:	611a      	str	r2, [r3, #16]
        updateBuzzer();
 8001268:	f001 f8b8 	bl	80023dc <updateBuzzer>
        sendDistanceData();
 800126c:	f001 f9d4 	bl	8002618 <sendDistanceData>
      }

      g_robot.ultrasound->status = ULTRASOUND_STOPPED;
 8001270:	4b25      	ldr	r3, [pc, #148]	; (8001308 <TIM2_IRQHandler+0x148>)
 8001272:	695b      	ldr	r3, [r3, #20]
 8001274:	2200      	movs	r2, #0
 8001276:	701a      	strb	r2, [r3, #0]
    }

    TIM2->SR &= ~(1 << 1);
 8001278:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800127c:	691b      	ldr	r3, [r3, #16]
 800127e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001282:	f023 0302 	bic.w	r3, r3, #2
 8001286:	6113      	str	r3, [r2, #16]
      g_robot.ultrasound->status = ULTRASOUND_TRIGGER_SENT;
    }

    TIM2->SR = ~(1 << 2); // Clear flags
  }
}
 8001288:	e033      	b.n	80012f2 <TIM2_IRQHandler+0x132>
  } else if ((TIM2->SR & (1 << 2)) != 0) { // Channel 2
 800128a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800128e:	691b      	ldr	r3, [r3, #16]
 8001290:	f003 0304 	and.w	r3, r3, #4
 8001294:	2b00      	cmp	r3, #0
 8001296:	d02c      	beq.n	80012f2 <TIM2_IRQHandler+0x132>
    if (g_robot.ultrasound->status == ULTRASOUND_TRIGGER_START) {
 8001298:	4b1b      	ldr	r3, [pc, #108]	; (8001308 <TIM2_IRQHandler+0x148>)
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d112      	bne.n	80012c8 <TIM2_IRQHandler+0x108>
      updateStatusGPIOPin(g_robot.ultrasound->trigger, GPIO_PIN_UP);
 80012a2:	4b19      	ldr	r3, [pc, #100]	; (8001308 <TIM2_IRQHandler+0x148>)
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2100      	movs	r1, #0
 80012aa:	4618      	mov	r0, r3
 80012ac:	f000 fec6 	bl	800203c <updateStatusGPIOPin>
      TIM2->CCR2 = TIM2->CNT + TIMER_2_CH_2_CNT;
 80012b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012ba:	330a      	adds	r3, #10
 80012bc:	6393      	str	r3, [r2, #56]	; 0x38
      g_robot.ultrasound->status = ULTRASOUND_TRIGGER_ON;
 80012be:	4b12      	ldr	r3, [pc, #72]	; (8001308 <TIM2_IRQHandler+0x148>)
 80012c0:	695b      	ldr	r3, [r3, #20]
 80012c2:	2202      	movs	r2, #2
 80012c4:	701a      	strb	r2, [r3, #0]
 80012c6:	e00f      	b.n	80012e8 <TIM2_IRQHandler+0x128>
    } else if (g_robot.ultrasound->status == ULTRASOUND_TRIGGER_ON) {
 80012c8:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <TIM2_IRQHandler+0x148>)
 80012ca:	695b      	ldr	r3, [r3, #20]
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d10a      	bne.n	80012e8 <TIM2_IRQHandler+0x128>
      updateStatusGPIOPin(g_robot.ultrasound->trigger, GPIO_PIN_DOWN);
 80012d2:	4b0d      	ldr	r3, [pc, #52]	; (8001308 <TIM2_IRQHandler+0x148>)
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	2101      	movs	r1, #1
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 feae 	bl	800203c <updateStatusGPIOPin>
      g_robot.ultrasound->status = ULTRASOUND_TRIGGER_SENT;
 80012e0:	4b09      	ldr	r3, [pc, #36]	; (8001308 <TIM2_IRQHandler+0x148>)
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	2203      	movs	r2, #3
 80012e6:	701a      	strb	r2, [r3, #0]
    TIM2->SR = ~(1 << 2); // Clear flags
 80012e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012ec:	f06f 0204 	mvn.w	r2, #4
 80012f0:	611a      	str	r2, [r3, #16]
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	f3af 8000 	nop.w
 8001300:	b020c49c 	.word	0xb020c49c
 8001304:	3fa16872 	.word	0x3fa16872
 8001308:	20000180 	.word	0x20000180

0800130c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001310:	f001 fb47 	bl	80029a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001314:	f000 f872 	bl	80013fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001318:	f000 fa30 	bl	800177c <MX_GPIO_Init>
  MX_ADC_Init();
 800131c:	f000 f8bc 	bl	8001498 <MX_ADC_Init>
  MX_TS_Init();
 8001320:	f000 f9fc 	bl	800171c <MX_TS_Init>
  MX_TIM3_Init();
 8001324:	f000 f95e 	bl	80015e4 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001328:	f000 f910 	bl	800154c <MX_TIM2_Init>
  MX_TIM4_Init();
 800132c:	f000 f9a8 	bl	8001680 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001330:	f000 f9fa 	bl	8001728 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  createRobot(&huart1);
 8001334:	482f      	ldr	r0, [pc, #188]	; (80013f4 <main+0xe8>)
 8001336:	f000 ffed 	bl	8002314 <createRobot>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if (g_robot.status_mode == MODE_AUTOMATIC) {
 800133a:	4b2f      	ldr	r3, [pc, #188]	; (80013f8 <main+0xec>)
 800133c:	789b      	ldrb	r3, [r3, #2]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d1fb      	bne.n	800133a <main+0x2e>
      switch(g_robot.status_obstacle) {
 8001342:	4b2d      	ldr	r3, [pc, #180]	; (80013f8 <main+0xec>)
 8001344:	785b      	ldrb	r3, [r3, #1]
 8001346:	2b08      	cmp	r3, #8
 8001348:	d850      	bhi.n	80013ec <main+0xe0>
 800134a:	a201      	add	r2, pc, #4	; (adr r2, 8001350 <main+0x44>)
 800134c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001350:	08001375 	.word	0x08001375
 8001354:	08001387 	.word	0x08001387
 8001358:	0800138f 	.word	0x0800138f
 800135c:	08001397 	.word	0x08001397
 8001360:	080013b1 	.word	0x080013b1
 8001364:	080013b9 	.word	0x080013b9
 8001368:	080013c1 	.word	0x080013c1
 800136c:	080013db 	.word	0x080013db
 8001370:	080013e3 	.word	0x080013e3
      case OBSTACLE_NONE:
        if (g_robot.ultrasound->distance < 10) {
 8001374:	4b20      	ldr	r3, [pc, #128]	; (80013f8 <main+0xec>)
 8001376:	695b      	ldr	r3, [r3, #20]
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	2b09      	cmp	r3, #9
 800137c:	dc35      	bgt.n	80013ea <main+0xde>
          g_robot.status_obstacle = OBSTACLE_IN_FRONT;
 800137e:	4b1e      	ldr	r3, [pc, #120]	; (80013f8 <main+0xec>)
 8001380:	2201      	movs	r2, #1
 8001382:	705a      	strb	r2, [r3, #1]
        }
        break;
 8001384:	e031      	b.n	80013ea <main+0xde>

      case OBSTACLE_IN_FRONT:
        g_robot.status_obstacle = OBSTACLE_RIGHT;
 8001386:	4b1c      	ldr	r3, [pc, #112]	; (80013f8 <main+0xec>)
 8001388:	2202      	movs	r2, #2
 800138a:	705a      	strb	r2, [r3, #1]
        break;
 800138c:	e02e      	b.n	80013ec <main+0xe0>

      case OBSTACLE_RIGHT:
        g_robot.status_obstacle = OBSTACLE_RIGHT_MEASURE;
 800138e:	4b1a      	ldr	r3, [pc, #104]	; (80013f8 <main+0xec>)
 8001390:	2203      	movs	r2, #3
 8001392:	705a      	strb	r2, [r3, #1]
        break;
 8001394:	e02a      	b.n	80013ec <main+0xe0>

      case OBSTACLE_RIGHT_MEASURE:
        if (g_robot.ultrasound->distance > LONG_DISTANCE) {
 8001396:	4b18      	ldr	r3, [pc, #96]	; (80013f8 <main+0xec>)
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	691b      	ldr	r3, [r3, #16]
 800139c:	2b14      	cmp	r3, #20
 800139e:	dd03      	ble.n	80013a8 <main+0x9c>
          g_robot.status_obstacle = OBSTACLE_NONE;
 80013a0:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <main+0xec>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	705a      	strb	r2, [r3, #1]
        } else {
          g_robot.status_obstacle = OBSTACLE_RIGHT_BACK;
        }
        break;
 80013a6:	e021      	b.n	80013ec <main+0xe0>
          g_robot.status_obstacle = OBSTACLE_RIGHT_BACK;
 80013a8:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <main+0xec>)
 80013aa:	2204      	movs	r2, #4
 80013ac:	705a      	strb	r2, [r3, #1]
        break;
 80013ae:	e01d      	b.n	80013ec <main+0xe0>

      case OBSTACLE_RIGHT_BACK:
        g_robot.status_obstacle = OBSTACLE_LEFT;
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <main+0xec>)
 80013b2:	2205      	movs	r2, #5
 80013b4:	705a      	strb	r2, [r3, #1]
        break;
 80013b6:	e019      	b.n	80013ec <main+0xe0>

      case OBSTACLE_LEFT:
        g_robot.status_obstacle = OBSTACLE_LEFT_MEASURE;
 80013b8:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <main+0xec>)
 80013ba:	2206      	movs	r2, #6
 80013bc:	705a      	strb	r2, [r3, #1]
        break;
 80013be:	e015      	b.n	80013ec <main+0xe0>

      case OBSTACLE_LEFT_MEASURE:
        if (g_robot.ultrasound->distance > LONG_DISTANCE) {
 80013c0:	4b0d      	ldr	r3, [pc, #52]	; (80013f8 <main+0xec>)
 80013c2:	695b      	ldr	r3, [r3, #20]
 80013c4:	691b      	ldr	r3, [r3, #16]
 80013c6:	2b14      	cmp	r3, #20
 80013c8:	dd03      	ble.n	80013d2 <main+0xc6>
          g_robot.status_obstacle = OBSTACLE_NONE;
 80013ca:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <main+0xec>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	705a      	strb	r2, [r3, #1]
        } else {
          g_robot.status_obstacle = OBSTACLE_LEFT_BACK;
        }
        break;
 80013d0:	e00c      	b.n	80013ec <main+0xe0>
          g_robot.status_obstacle = OBSTACLE_LEFT_BACK;
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <main+0xec>)
 80013d4:	2207      	movs	r2, #7
 80013d6:	705a      	strb	r2, [r3, #1]
        break;
 80013d8:	e008      	b.n	80013ec <main+0xe0>

      case OBSTACLE_LEFT_BACK:
        g_robot.status_obstacle = OBSTACLE_FINAL;
 80013da:	4b07      	ldr	r3, [pc, #28]	; (80013f8 <main+0xec>)
 80013dc:	2208      	movs	r2, #8
 80013de:	705a      	strb	r2, [r3, #1]
        break;
 80013e0:	e004      	b.n	80013ec <main+0xe0>

      case OBSTACLE_FINAL:
          g_robot.status_obstacle = OBSTACLE_NONE;
 80013e2:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <main+0xec>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	705a      	strb	r2, [r3, #1]
          break;
 80013e8:	e000      	b.n	80013ec <main+0xe0>
        break;
 80013ea:	bf00      	nop
      }

      updateRobot();
 80013ec:	f001 f86c 	bl	80024c8 <updateRobot>
    if (g_robot.status_mode == MODE_AUTOMATIC) {
 80013f0:	e7a3      	b.n	800133a <main+0x2e>
 80013f2:	bf00      	nop
 80013f4:	2000013c 	.word	0x2000013c
 80013f8:	20000180 	.word	0x20000180

080013fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b092      	sub	sp, #72	; 0x48
 8001400:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001402:	f107 0314 	add.w	r3, r7, #20
 8001406:	2234      	movs	r2, #52	; 0x34
 8001408:	2100      	movs	r1, #0
 800140a:	4618      	mov	r0, r3
 800140c:	f003 fe6a 	bl	80050e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001410:	463b      	mov	r3, r7
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
 800141c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800141e:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <SystemClock_Config+0x98>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001426:	4a1b      	ldr	r2, [pc, #108]	; (8001494 <SystemClock_Config+0x98>)
 8001428:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800142c:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800142e:	2302      	movs	r3, #2
 8001430:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001432:	2301      	movs	r3, #1
 8001434:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001436:	2310      	movs	r3, #16
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800143a:	2302      	movs	r3, #2
 800143c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800143e:	2300      	movs	r3, #0
 8001440:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001442:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001446:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001448:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800144c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	4618      	mov	r0, r3
 8001454:	f002 f8ce 	bl	80035f4 <HAL_RCC_OscConfig>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800145e:	f000 faaf 	bl	80019c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001462:	230f      	movs	r3, #15
 8001464:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001466:	2303      	movs	r3, #3
 8001468:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800146a:	2300      	movs	r3, #0
 800146c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001476:	463b      	mov	r3, r7
 8001478:	2101      	movs	r1, #1
 800147a:	4618      	mov	r0, r3
 800147c:	f002 fbea 	bl	8003c54 <HAL_RCC_ClockConfig>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001486:	f000 fa9b 	bl	80019c0 <Error_Handler>
  }
}
 800148a:	bf00      	nop
 800148c:	3748      	adds	r7, #72	; 0x48
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40007000 	.word	0x40007000

08001498 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80014a8:	4b26      	ldr	r3, [pc, #152]	; (8001544 <MX_ADC_Init+0xac>)
 80014aa:	4a27      	ldr	r2, [pc, #156]	; (8001548 <MX_ADC_Init+0xb0>)
 80014ac:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80014ae:	4b25      	ldr	r3, [pc, #148]	; (8001544 <MX_ADC_Init+0xac>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80014b4:	4b23      	ldr	r3, [pc, #140]	; (8001544 <MX_ADC_Init+0xac>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014ba:	4b22      	ldr	r3, [pc, #136]	; (8001544 <MX_ADC_Init+0xac>)
 80014bc:	2200      	movs	r2, #0
 80014be:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014c0:	4b20      	ldr	r3, [pc, #128]	; (8001544 <MX_ADC_Init+0xac>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80014c6:	4b1f      	ldr	r3, [pc, #124]	; (8001544 <MX_ADC_Init+0xac>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80014cc:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <MX_ADC_Init+0xac>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 80014d2:	4b1c      	ldr	r3, [pc, #112]	; (8001544 <MX_ADC_Init+0xac>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80014d8:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <MX_ADC_Init+0xac>)
 80014da:	2200      	movs	r2, #0
 80014dc:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 80014de:	4b19      	ldr	r3, [pc, #100]	; (8001544 <MX_ADC_Init+0xac>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 80014e6:	4b17      	ldr	r3, [pc, #92]	; (8001544 <MX_ADC_Init+0xac>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80014ec:	4b15      	ldr	r3, [pc, #84]	; (8001544 <MX_ADC_Init+0xac>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_CC3;
 80014f4:	4b13      	ldr	r3, [pc, #76]	; (8001544 <MX_ADC_Init+0xac>)
 80014f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014fa:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80014fc:	4b11      	ldr	r3, [pc, #68]	; (8001544 <MX_ADC_Init+0xac>)
 80014fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001502:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001504:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <MX_ADC_Init+0xac>)
 8001506:	2200      	movs	r2, #0
 8001508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800150c:	480d      	ldr	r0, [pc, #52]	; (8001544 <MX_ADC_Init+0xac>)
 800150e:	f001 fab7 	bl	8002a80 <HAL_ADC_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_ADC_Init+0x84>
  {
    Error_Handler();
 8001518:	f000 fa52 	bl	80019c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800151c:	2304      	movs	r3, #4
 800151e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001520:	2301      	movs	r3, #1
 8001522:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8001524:	2300      	movs	r3, #0
 8001526:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	4619      	mov	r1, r3
 800152c:	4805      	ldr	r0, [pc, #20]	; (8001544 <MX_ADC_Init+0xac>)
 800152e:	f001 fbed 	bl	8002d0c <HAL_ADC_ConfigChannel>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8001538:	f000 fa42 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800153c:	bf00      	nop
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20000028 	.word	0x20000028
 8001548:	40012400 	.word	0x40012400

0800154c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001552:	f107 0308 	add.w	r3, r7, #8
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	605a      	str	r2, [r3, #4]
 800155c:	609a      	str	r2, [r3, #8]
 800155e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001560:	463b      	mov	r3, r7
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001568:	4b1d      	ldr	r3, [pc, #116]	; (80015e0 <MX_TIM2_Init+0x94>)
 800156a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800156e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001570:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <MX_TIM2_Init+0x94>)
 8001572:	2200      	movs	r2, #0
 8001574:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001576:	4b1a      	ldr	r3, [pc, #104]	; (80015e0 <MX_TIM2_Init+0x94>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800157c:	4b18      	ldr	r3, [pc, #96]	; (80015e0 <MX_TIM2_Init+0x94>)
 800157e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001582:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001584:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <MX_TIM2_Init+0x94>)
 8001586:	2200      	movs	r2, #0
 8001588:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800158a:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <MX_TIM2_Init+0x94>)
 800158c:	2200      	movs	r2, #0
 800158e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001590:	4813      	ldr	r0, [pc, #76]	; (80015e0 <MX_TIM2_Init+0x94>)
 8001592:	f002 fe25 	bl	80041e0 <HAL_TIM_Base_Init>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800159c:	f000 fa10 	bl	80019c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015a6:	f107 0308 	add.w	r3, r7, #8
 80015aa:	4619      	mov	r1, r3
 80015ac:	480c      	ldr	r0, [pc, #48]	; (80015e0 <MX_TIM2_Init+0x94>)
 80015ae:	f002 fe56 	bl	800425e <HAL_TIM_ConfigClockSource>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015b8:	f000 fa02 	bl	80019c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015bc:	2300      	movs	r3, #0
 80015be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015c4:	463b      	mov	r3, r7
 80015c6:	4619      	mov	r1, r3
 80015c8:	4805      	ldr	r0, [pc, #20]	; (80015e0 <MX_TIM2_Init+0x94>)
 80015ca:	f003 f813 	bl	80045f4 <HAL_TIMEx_MasterConfigSynchronization>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015d4:	f000 f9f4 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015d8:	bf00      	nop
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	2000007c 	.word	0x2000007c

080015e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ea:	f107 0308 	add.w	r3, r7, #8
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f8:	463b      	mov	r3, r7
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001600:	4b1d      	ldr	r3, [pc, #116]	; (8001678 <MX_TIM3_Init+0x94>)
 8001602:	4a1e      	ldr	r2, [pc, #120]	; (800167c <MX_TIM3_Init+0x98>)
 8001604:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001606:	4b1c      	ldr	r3, [pc, #112]	; (8001678 <MX_TIM3_Init+0x94>)
 8001608:	2200      	movs	r2, #0
 800160a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800160c:	4b1a      	ldr	r3, [pc, #104]	; (8001678 <MX_TIM3_Init+0x94>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001612:	4b19      	ldr	r3, [pc, #100]	; (8001678 <MX_TIM3_Init+0x94>)
 8001614:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001618:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800161a:	4b17      	ldr	r3, [pc, #92]	; (8001678 <MX_TIM3_Init+0x94>)
 800161c:	2200      	movs	r2, #0
 800161e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001620:	4b15      	ldr	r3, [pc, #84]	; (8001678 <MX_TIM3_Init+0x94>)
 8001622:	2200      	movs	r2, #0
 8001624:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001626:	4814      	ldr	r0, [pc, #80]	; (8001678 <MX_TIM3_Init+0x94>)
 8001628:	f002 fdda 	bl	80041e0 <HAL_TIM_Base_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001632:	f000 f9c5 	bl	80019c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800163a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800163c:	f107 0308 	add.w	r3, r7, #8
 8001640:	4619      	mov	r1, r3
 8001642:	480d      	ldr	r0, [pc, #52]	; (8001678 <MX_TIM3_Init+0x94>)
 8001644:	f002 fe0b 	bl	800425e <HAL_TIM_ConfigClockSource>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800164e:	f000 f9b7 	bl	80019c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001652:	2300      	movs	r3, #0
 8001654:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001656:	2300      	movs	r3, #0
 8001658:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800165a:	463b      	mov	r3, r7
 800165c:	4619      	mov	r1, r3
 800165e:	4806      	ldr	r0, [pc, #24]	; (8001678 <MX_TIM3_Init+0x94>)
 8001660:	f002 ffc8 	bl	80045f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800166a:	f000 f9a9 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800166e:	bf00      	nop
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	200000bc 	.word	0x200000bc
 800167c:	40000400 	.word	0x40000400

08001680 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001686:	f107 0308 	add.w	r3, r7, #8
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	609a      	str	r2, [r3, #8]
 8001692:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001694:	463b      	mov	r3, r7
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800169c:	4b1d      	ldr	r3, [pc, #116]	; (8001714 <MX_TIM4_Init+0x94>)
 800169e:	4a1e      	ldr	r2, [pc, #120]	; (8001718 <MX_TIM4_Init+0x98>)
 80016a0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80016a2:	4b1c      	ldr	r3, [pc, #112]	; (8001714 <MX_TIM4_Init+0x94>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a8:	4b1a      	ldr	r3, [pc, #104]	; (8001714 <MX_TIM4_Init+0x94>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80016ae:	4b19      	ldr	r3, [pc, #100]	; (8001714 <MX_TIM4_Init+0x94>)
 80016b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016b4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b6:	4b17      	ldr	r3, [pc, #92]	; (8001714 <MX_TIM4_Init+0x94>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016bc:	4b15      	ldr	r3, [pc, #84]	; (8001714 <MX_TIM4_Init+0x94>)
 80016be:	2200      	movs	r2, #0
 80016c0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80016c2:	4814      	ldr	r0, [pc, #80]	; (8001714 <MX_TIM4_Init+0x94>)
 80016c4:	f002 fd8c 	bl	80041e0 <HAL_TIM_Base_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80016ce:	f000 f977 	bl	80019c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80016d8:	f107 0308 	add.w	r3, r7, #8
 80016dc:	4619      	mov	r1, r3
 80016de:	480d      	ldr	r0, [pc, #52]	; (8001714 <MX_TIM4_Init+0x94>)
 80016e0:	f002 fdbd 	bl	800425e <HAL_TIM_ConfigClockSource>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80016ea:	f000 f969 	bl	80019c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ee:	2300      	movs	r3, #0
 80016f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f2:	2300      	movs	r3, #0
 80016f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016f6:	463b      	mov	r3, r7
 80016f8:	4619      	mov	r1, r3
 80016fa:	4806      	ldr	r0, [pc, #24]	; (8001714 <MX_TIM4_Init+0x94>)
 80016fc:	f002 ff7a 	bl	80045f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001706:	f000 f95b 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800170a:	bf00      	nop
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	200000fc 	.word	0x200000fc
 8001718:	40000800 	.word	0x40000800

0800171c <MX_TS_Init>:
  * @brief TS Initialization Function
  * @param None
  * @retval None
  */
static void MX_TS_Init(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE END TS_Init 1 */
  /* USER CODE BEGIN TS_Init 2 */

  /* USER CODE END TS_Init 2 */

}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr

08001728 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800172c:	4b11      	ldr	r3, [pc, #68]	; (8001774 <MX_USART1_UART_Init+0x4c>)
 800172e:	4a12      	ldr	r2, [pc, #72]	; (8001778 <MX_USART1_UART_Init+0x50>)
 8001730:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001732:	4b10      	ldr	r3, [pc, #64]	; (8001774 <MX_USART1_UART_Init+0x4c>)
 8001734:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001738:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800173a:	4b0e      	ldr	r3, [pc, #56]	; (8001774 <MX_USART1_UART_Init+0x4c>)
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001740:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <MX_USART1_UART_Init+0x4c>)
 8001742:	2200      	movs	r2, #0
 8001744:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001746:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <MX_USART1_UART_Init+0x4c>)
 8001748:	2200      	movs	r2, #0
 800174a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800174c:	4b09      	ldr	r3, [pc, #36]	; (8001774 <MX_USART1_UART_Init+0x4c>)
 800174e:	220c      	movs	r2, #12
 8001750:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001752:	4b08      	ldr	r3, [pc, #32]	; (8001774 <MX_USART1_UART_Init+0x4c>)
 8001754:	2200      	movs	r2, #0
 8001756:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <MX_USART1_UART_Init+0x4c>)
 800175a:	2200      	movs	r2, #0
 800175c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800175e:	4805      	ldr	r0, [pc, #20]	; (8001774 <MX_USART1_UART_Init+0x4c>)
 8001760:	f002 ffa6 	bl	80046b0 <HAL_UART_Init>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800176a:	f000 f929 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	2000013c 	.word	0x2000013c
 8001778:	40013800 	.word	0x40013800

0800177c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08a      	sub	sp, #40	; 0x28
 8001780:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001782:	f107 0314 	add.w	r3, r7, #20
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	60da      	str	r2, [r3, #12]
 8001790:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001792:	4b43      	ldr	r3, [pc, #268]	; (80018a0 <MX_GPIO_Init+0x124>)
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	4a42      	ldr	r2, [pc, #264]	; (80018a0 <MX_GPIO_Init+0x124>)
 8001798:	f043 0304 	orr.w	r3, r3, #4
 800179c:	61d3      	str	r3, [r2, #28]
 800179e:	4b40      	ldr	r3, [pc, #256]	; (80018a0 <MX_GPIO_Init+0x124>)
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	f003 0304 	and.w	r3, r3, #4
 80017a6:	613b      	str	r3, [r7, #16]
 80017a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017aa:	4b3d      	ldr	r3, [pc, #244]	; (80018a0 <MX_GPIO_Init+0x124>)
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	4a3c      	ldr	r2, [pc, #240]	; (80018a0 <MX_GPIO_Init+0x124>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	61d3      	str	r3, [r2, #28]
 80017b6:	4b3a      	ldr	r3, [pc, #232]	; (80018a0 <MX_GPIO_Init+0x124>)
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c2:	4b37      	ldr	r3, [pc, #220]	; (80018a0 <MX_GPIO_Init+0x124>)
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	4a36      	ldr	r2, [pc, #216]	; (80018a0 <MX_GPIO_Init+0x124>)
 80017c8:	f043 0302 	orr.w	r3, r3, #2
 80017cc:	61d3      	str	r3, [r2, #28]
 80017ce:	4b34      	ldr	r3, [pc, #208]	; (80018a0 <MX_GPIO_Init+0x124>)
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	60bb      	str	r3, [r7, #8]
 80017d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017da:	4b31      	ldr	r3, [pc, #196]	; (80018a0 <MX_GPIO_Init+0x124>)
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	4a30      	ldr	r2, [pc, #192]	; (80018a0 <MX_GPIO_Init+0x124>)
 80017e0:	f043 0308 	orr.w	r3, r3, #8
 80017e4:	61d3      	str	r3, [r2, #28]
 80017e6:	4b2e      	ldr	r3, [pc, #184]	; (80018a0 <MX_GPIO_Init+0x124>)
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	f003 0308 	and.w	r3, r3, #8
 80017ee:	607b      	str	r3, [r7, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2104      	movs	r1, #4
 80017f6:	482b      	ldr	r0, [pc, #172]	; (80018a4 <MX_GPIO_Init+0x128>)
 80017f8:	f001 fee4 	bl	80035c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SEG14_Pin SEG15_Pin SEG16_Pin SEG17_Pin
                           SEG18_Pin SEG19_Pin SEG20_Pin SEG21_Pin
                           SEG22_Pin SEG23_Pin */
  GPIO_InitStruct.Pin = SEG14_Pin|SEG15_Pin|SEG16_Pin|SEG17_Pin
 80017fc:	f640 73cf 	movw	r3, #4047	; 0xfcf
 8001800:	617b      	str	r3, [r7, #20]
                          |SEG18_Pin|SEG19_Pin|SEG20_Pin|SEG21_Pin
                          |SEG22_Pin|SEG23_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001802:	2302      	movs	r3, #2
 8001804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180a:	2300      	movs	r3, #0
 800180c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800180e:	230b      	movs	r3, #11
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001812:	f107 0314 	add.w	r3, r7, #20
 8001816:	4619      	mov	r1, r3
 8001818:	4823      	ldr	r0, [pc, #140]	; (80018a8 <MX_GPIO_Init+0x12c>)
 800181a:	f001 fd53 	bl	80032c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800181e:	2301      	movs	r3, #1
 8001820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001822:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	4619      	mov	r1, r3
 8001832:	481e      	ldr	r0, [pc, #120]	; (80018ac <MX_GPIO_Init+0x130>)
 8001834:	f001 fd46 	bl	80032c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin COM0_Pin
                           COM1_Pin COM2_Pin SEG12_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|COM0_Pin
 8001838:	f248 730e 	movw	r3, #34574	; 0x870e
 800183c:	617b      	str	r3, [r7, #20]
                          |COM1_Pin|COM2_Pin|SEG12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183e:	2302      	movs	r3, #2
 8001840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001846:	2300      	movs	r3, #0
 8001848:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800184a:	230b      	movs	r3, #11
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184e:	f107 0314 	add.w	r3, r7, #20
 8001852:	4619      	mov	r1, r3
 8001854:	4815      	ldr	r0, [pc, #84]	; (80018ac <MX_GPIO_Init+0x130>)
 8001856:	f001 fd35 	bl	80032c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG6_Pin SEG7_Pin SEG8_Pin SEG9_Pin
                           SEG10_Pin SEG11_Pin SEG3_Pin SEG4_Pin
                           SEG5_Pin SEG13_Pin COM3_Pin */
  GPIO_InitStruct.Pin = SEG6_Pin|SEG7_Pin|SEG8_Pin|SEG9_Pin
 800185a:	f64f 7338 	movw	r3, #65336	; 0xff38
 800185e:	617b      	str	r3, [r7, #20]
                          |SEG10_Pin|SEG11_Pin|SEG3_Pin|SEG4_Pin
                          |SEG5_Pin|SEG13_Pin|COM3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001860:	2302      	movs	r3, #2
 8001862:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001868:	2300      	movs	r3, #0
 800186a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800186c:	230b      	movs	r3, #11
 800186e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	4619      	mov	r1, r3
 8001876:	480e      	ldr	r0, [pc, #56]	; (80018b0 <MX_GPIO_Init+0x134>)
 8001878:	f001 fd24 	bl	80032c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800187c:	2304      	movs	r3, #4
 800187e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001880:	2301      	movs	r3, #1
 8001882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001888:	2300      	movs	r3, #0
 800188a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	4619      	mov	r1, r3
 8001892:	4804      	ldr	r0, [pc, #16]	; (80018a4 <MX_GPIO_Init+0x128>)
 8001894:	f001 fd16 	bl	80032c4 <HAL_GPIO_Init>

}
 8001898:	bf00      	nop
 800189a:	3728      	adds	r7, #40	; 0x28
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40020c00 	.word	0x40020c00
 80018a8:	40020800 	.word	0x40020800
 80018ac:	40020000 	.word	0x40020000
 80018b0:	40020400 	.word	0x40020400

080018b4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1) {
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a3d      	ldr	r2, [pc, #244]	; (80019b8 <HAL_UART_RxCpltCallback+0x104>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d173      	bne.n	80019ae <HAL_UART_RxCpltCallback+0xfa>
    enum StatusRobot status_robot = ROBOT_STOPPED;
 80018c6:	2301      	movs	r3, #1
 80018c8:	73fb      	strb	r3, [r7, #15]
    enum StatusMode status_mode = MODE_DEFAULT;
 80018ca:	2300      	movs	r3, #0
 80018cc:	73bb      	strb	r3, [r7, #14]

    switch(g_robot.bluetooth.data_received[0]) {
 80018ce:	4b3b      	ldr	r3, [pc, #236]	; (80019bc <HAL_UART_RxCpltCallback+0x108>)
 80018d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	3b41      	subs	r3, #65	; 0x41
 80018d6:	2b18      	cmp	r3, #24
 80018d8:	d85c      	bhi.n	8001994 <HAL_UART_RxCpltCallback+0xe0>
 80018da:	a201      	add	r2, pc, #4	; (adr r2, 80018e0 <HAL_UART_RxCpltCallback+0x2c>)
 80018dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e0:	08001945 	.word	0x08001945
 80018e4:	08001963 	.word	0x08001963
 80018e8:	08001995 	.word	0x08001995
 80018ec:	08001995 	.word	0x08001995
 80018f0:	08001995 	.word	0x08001995
 80018f4:	08001959 	.word	0x08001959
 80018f8:	08001995 	.word	0x08001995
 80018fc:	08001995 	.word	0x08001995
 8001900:	08001995 	.word	0x08001995
 8001904:	08001995 	.word	0x08001995
 8001908:	08001995 	.word	0x08001995
 800190c:	08001977 	.word	0x08001977
 8001910:	08001995 	.word	0x08001995
 8001914:	08001995 	.word	0x08001995
 8001918:	08001995 	.word	0x08001995
 800191c:	08001995 	.word	0x08001995
 8001920:	08001995 	.word	0x08001995
 8001924:	0800196d 	.word	0x0800196d
 8001928:	0800194f 	.word	0x0800194f
 800192c:	08001995 	.word	0x08001995
 8001930:	08001995 	.word	0x08001995
 8001934:	08001995 	.word	0x08001995
 8001938:	08001995 	.word	0x08001995
 800193c:	08001981 	.word	0x08001981
 8001940:	0800198b 	.word	0x0800198b
    case 'A':
      status_mode = MODE_AUTOMATIC;
 8001944:	2301      	movs	r3, #1
 8001946:	73bb      	strb	r3, [r7, #14]
      status_robot = ROBOT_DEFAULT;
 8001948:	2300      	movs	r3, #0
 800194a:	73fb      	strb	r3, [r7, #15]
      break;
 800194c:	e022      	b.n	8001994 <HAL_UART_RxCpltCallback+0xe0>
    case 'S':
      status_mode = MODE_MANUAL;
 800194e:	2302      	movs	r3, #2
 8001950:	73bb      	strb	r3, [r7, #14]
      status_robot = ROBOT_STOPPED;
 8001952:	2301      	movs	r3, #1
 8001954:	73fb      	strb	r3, [r7, #15]
      break;
 8001956:	e01d      	b.n	8001994 <HAL_UART_RxCpltCallback+0xe0>
    case 'F':
      status_mode = MODE_MANUAL;
 8001958:	2302      	movs	r3, #2
 800195a:	73bb      	strb	r3, [r7, #14]
      status_robot = ROBOT_FORWARD;
 800195c:	2302      	movs	r3, #2
 800195e:	73fb      	strb	r3, [r7, #15]
      break;
 8001960:	e018      	b.n	8001994 <HAL_UART_RxCpltCallback+0xe0>
    case 'B':
      status_mode = MODE_MANUAL;
 8001962:	2302      	movs	r3, #2
 8001964:	73bb      	strb	r3, [r7, #14]
      status_robot = ROBOT_BACKWARD;
 8001966:	2303      	movs	r3, #3
 8001968:	73fb      	strb	r3, [r7, #15]
      break;
 800196a:	e013      	b.n	8001994 <HAL_UART_RxCpltCallback+0xe0>
    case 'R':
      status_mode = MODE_MANUAL;
 800196c:	2302      	movs	r3, #2
 800196e:	73bb      	strb	r3, [r7, #14]
      status_robot = ROBOT_RIGHT;
 8001970:	2304      	movs	r3, #4
 8001972:	73fb      	strb	r3, [r7, #15]
      break;
 8001974:	e00e      	b.n	8001994 <HAL_UART_RxCpltCallback+0xe0>
    case 'L':
      status_mode = MODE_MANUAL;
 8001976:	2302      	movs	r3, #2
 8001978:	73bb      	strb	r3, [r7, #14]
      status_robot = ROBOT_LEFT;
 800197a:	2305      	movs	r3, #5
 800197c:	73fb      	strb	r3, [r7, #15]
      break;
 800197e:	e009      	b.n	8001994 <HAL_UART_RxCpltCallback+0xe0>
    case 'X':
      status_mode = MODE_MANUAL;
 8001980:	2302      	movs	r3, #2
 8001982:	73bb      	strb	r3, [r7, #14]
      status_robot = ROBOT_BACKWARD_RIGHT;
 8001984:	2306      	movs	r3, #6
 8001986:	73fb      	strb	r3, [r7, #15]
      break;
 8001988:	e004      	b.n	8001994 <HAL_UART_RxCpltCallback+0xe0>
    case 'Y':
      status_mode = MODE_MANUAL;
 800198a:	2302      	movs	r3, #2
 800198c:	73bb      	strb	r3, [r7, #14]
      status_robot = ROBOT_BACKWARD_LEFT;
 800198e:	2307      	movs	r3, #7
 8001990:	73fb      	strb	r3, [r7, #15]
      break;
 8001992:	bf00      	nop
    }

    if (status_mode != MODE_DEFAULT) {
 8001994:	7bbb      	ldrb	r3, [r7, #14]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d007      	beq.n	80019aa <HAL_UART_RxCpltCallback+0xf6>
      updateStatusMode(status_mode);
 800199a:	7bbb      	ldrb	r3, [r7, #14]
 800199c:	4618      	mov	r0, r3
 800199e:	f000 fbef 	bl	8002180 <updateStatusMode>
      updateStatusRobot(status_robot);
 80019a2:	7bfb      	ldrb	r3, [r7, #15]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f000 fc0b 	bl	80021c0 <updateStatusRobot>
    }

    receiveData();
 80019aa:	f000 fe27 	bl	80025fc <receiveData>
  }
}
 80019ae:	bf00      	nop
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40013800 	.word	0x40013800
 80019bc:	20000180 	.word	0x20000180

080019c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019c4:	b672      	cpsid	i
}
 80019c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80019c8:	e7fe      	b.n	80019c8 <Error_Handler+0x8>

080019ca <initGPIOPin>:


/*
 * Initializes the basic structure of a gpio pin with the default speed
 */
static void initGPIOPin(struct GPIOPin *gpio_pin, GPIO_TypeDef *gpio, char pin) {
 80019ca:	b480      	push	{r7}
 80019cc:	b085      	sub	sp, #20
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	60f8      	str	r0, [r7, #12]
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	4613      	mov	r3, r2
 80019d6:	71fb      	strb	r3, [r7, #7]
  gpio_pin->gpio = gpio;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	68ba      	ldr	r2, [r7, #8]
 80019dc:	601a      	str	r2, [r3, #0]
  gpio_pin->pin = pin;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	79fa      	ldrb	r2, [r7, #7]
 80019e2:	711a      	strb	r2, [r3, #4]

  gpio->OTYPER &= ~(1 << pin);
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	79fa      	ldrb	r2, [r7, #7]
 80019ea:	2101      	movs	r1, #1
 80019ec:	fa01 f202 	lsl.w	r2, r1, r2
 80019f0:	43d2      	mvns	r2, r2
 80019f2:	401a      	ands	r2, r3
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	605a      	str	r2, [r3, #4]

  gpio->OSPEEDR &= ~(1 << (pin * 2 + 1));
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	79fa      	ldrb	r2, [r7, #7]
 80019fe:	0052      	lsls	r2, r2, #1
 8001a00:	3201      	adds	r2, #1
 8001a02:	2101      	movs	r1, #1
 8001a04:	fa01 f202 	lsl.w	r2, r1, r2
 8001a08:	43d2      	mvns	r2, r2
 8001a0a:	401a      	ands	r2, r3
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	609a      	str	r2, [r3, #8]
  gpio->OSPEEDR &= ~(1 << (pin * 2));
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	79fa      	ldrb	r2, [r7, #7]
 8001a16:	0052      	lsls	r2, r2, #1
 8001a18:	2101      	movs	r1, #1
 8001a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a1e:	43d2      	mvns	r2, r2
 8001a20:	401a      	ands	r2, r3
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	609a      	str	r2, [r3, #8]
}
 8001a26:	bf00      	nop
 8001a28:	3714      	adds	r7, #20
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr

08001a30 <initOutputGPIOPin>:

static void initOutputGPIOPin(struct GPIOPin *gpio_pin, GPIO_TypeDef *gpio, char pin) {
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	71fb      	strb	r3, [r7, #7]
  initGPIOPin(gpio_pin, gpio, pin);
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	461a      	mov	r2, r3
 8001a42:	68b9      	ldr	r1, [r7, #8]
 8001a44:	68f8      	ldr	r0, [r7, #12]
 8001a46:	f7ff ffc0 	bl	80019ca <initGPIOPin>

  // 01 the register
  gpio->MODER &= ~(1 << (pin * 2 + 1));
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	79fa      	ldrb	r2, [r7, #7]
 8001a50:	0052      	lsls	r2, r2, #1
 8001a52:	3201      	adds	r2, #1
 8001a54:	2101      	movs	r1, #1
 8001a56:	fa01 f202 	lsl.w	r2, r1, r2
 8001a5a:	43d2      	mvns	r2, r2
 8001a5c:	401a      	ands	r2, r3
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	601a      	str	r2, [r3, #0]
  gpio->MODER |= (1 << (pin * 2));
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	79fa      	ldrb	r2, [r7, #7]
 8001a68:	0052      	lsls	r2, r2, #1
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a70:	431a      	orrs	r2, r3
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	601a      	str	r2, [r3, #0]
}
 8001a76:	bf00      	nop
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <initAFGPIOPin>:

static void initAFGPIOPin(struct GPIOPin *gpio_pin, GPIO_TypeDef *gpio, char pin, char af) {
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b086      	sub	sp, #24
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	60f8      	str	r0, [r7, #12]
 8001a86:	60b9      	str	r1, [r7, #8]
 8001a88:	4611      	mov	r1, r2
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	71fb      	strb	r3, [r7, #7]
 8001a90:	4613      	mov	r3, r2
 8001a92:	71bb      	strb	r3, [r7, #6]
  initGPIOPin(gpio_pin, gpio, pin);
 8001a94:	79fb      	ldrb	r3, [r7, #7]
 8001a96:	461a      	mov	r2, r3
 8001a98:	68b9      	ldr	r1, [r7, #8]
 8001a9a:	68f8      	ldr	r0, [r7, #12]
 8001a9c:	f7ff ff95 	bl	80019ca <initGPIOPin>

  // 10 the register
  gpio->MODER |= (1 << (pin * 2 + 1));
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	79fa      	ldrb	r2, [r7, #7]
 8001aa6:	0052      	lsls	r2, r2, #1
 8001aa8:	3201      	adds	r2, #1
 8001aaa:	2101      	movs	r1, #1
 8001aac:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	601a      	str	r2, [r3, #0]
  gpio->MODER &= ~(1 << (pin * 2));
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	79fa      	ldrb	r2, [r7, #7]
 8001abc:	0052      	lsls	r2, r2, #1
 8001abe:	2101      	movs	r1, #1
 8001ac0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ac4:	43d2      	mvns	r2, r2
 8001ac6:	401a      	ands	r2, r3
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	601a      	str	r2, [r3, #0]

  unsigned char afr = pin < 8 ? 0 : 1;
 8001acc:	79fb      	ldrb	r3, [r7, #7]
 8001ace:	2b07      	cmp	r3, #7
 8001ad0:	bf8c      	ite	hi
 8001ad2:	2301      	movhi	r3, #1
 8001ad4:	2300      	movls	r3, #0
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	75fb      	strb	r3, [r7, #23]
  pin = (pin - (8 * afr));
 8001ada:	7dfb      	ldrb	r3, [r7, #23]
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	79fa      	ldrb	r2, [r7, #7]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	71fb      	strb	r3, [r7, #7]
  gpio->AFR[afr] &= ~(0xF << (pin * 4));
 8001ae6:	7dfa      	ldrb	r2, [r7, #23]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	3208      	adds	r2, #8
 8001aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001af0:	79fa      	ldrb	r2, [r7, #7]
 8001af2:	0092      	lsls	r2, r2, #2
 8001af4:	210f      	movs	r1, #15
 8001af6:	fa01 f202 	lsl.w	r2, r1, r2
 8001afa:	43d2      	mvns	r2, r2
 8001afc:	4611      	mov	r1, r2
 8001afe:	7dfa      	ldrb	r2, [r7, #23]
 8001b00:	4019      	ands	r1, r3
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	3208      	adds	r2, #8
 8001b06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  gpio->AFR[afr] |= (af << (pin * 4));
 8001b0a:	7dfa      	ldrb	r2, [r7, #23]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	3208      	adds	r2, #8
 8001b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b14:	79b9      	ldrb	r1, [r7, #6]
 8001b16:	79fa      	ldrb	r2, [r7, #7]
 8001b18:	0092      	lsls	r2, r2, #2
 8001b1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b1e:	4611      	mov	r1, r2
 8001b20:	7dfa      	ldrb	r2, [r7, #23]
 8001b22:	4319      	orrs	r1, r3
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	3208      	adds	r2, #8
 8001b28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001b2c:	bf00      	nop
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <initTimer4>:

static void initTimer4(void) {
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  // ------------- Motor Speed Timer -----------------------
  // Channel 3 for PB8
  // Channel 4 for PB9
  TIM4->CR1 = 0x0080;
 8001b38:	4b18      	ldr	r3, [pc, #96]	; (8001b9c <initTimer4+0x68>)
 8001b3a:	2280      	movs	r2, #128	; 0x80
 8001b3c:	601a      	str	r2, [r3, #0]
  TIM4->CR2 = 0x0000;
 8001b3e:	4b17      	ldr	r3, [pc, #92]	; (8001b9c <initTimer4+0x68>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	605a      	str	r2, [r3, #4]
  TIM4->SMCR = 0x0000;
 8001b44:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <initTimer4+0x68>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]

  TIM4->PSC = TIMER_4_PSC - 1; // T = 2 ms
 8001b4a:	4b14      	ldr	r3, [pc, #80]	; (8001b9c <initTimer4+0x68>)
 8001b4c:	f240 227f 	movw	r2, #639	; 0x27f
 8001b50:	629a      	str	r2, [r3, #40]	; 0x28
  TIM4->CNT = 0;
 8001b52:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <initTimer4+0x68>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	625a      	str	r2, [r3, #36]	; 0x24
  TIM4->ARR = MAX_SPEED - 1; // Tpwm = 1s
 8001b58:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <initTimer4+0x68>)
 8001b5a:	2263      	movs	r2, #99	; 0x63
 8001b5c:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM4->CCR3 = MAX_SPEED;
 8001b5e:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <initTimer4+0x68>)
 8001b60:	2264      	movs	r2, #100	; 0x64
 8001b62:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM4->CCR4 = MAX_SPEED; // DC = 10%
 8001b64:	4b0d      	ldr	r3, [pc, #52]	; (8001b9c <initTimer4+0x68>)
 8001b66:	2264      	movs	r2, #100	; 0x64
 8001b68:	641a      	str	r2, [r3, #64]	; 0x40

  TIM4->CCMR2 &= ~(0xFFFF); // Clear all channel 4 information
 8001b6a:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <initTimer4+0x68>)
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	4a0b      	ldr	r2, [pc, #44]	; (8001b9c <initTimer4+0x68>)
 8001b70:	0c1b      	lsrs	r3, r3, #16
 8001b72:	041b      	lsls	r3, r3, #16
 8001b74:	61d3      	str	r3, [r2, #28]
  TIM4->CCMR2 |= 0x6868; // CCyS = 0 (TOC) OCyM = 110 (PPM starting in 1) OC1PE = 1 (Preload enable for PWM)
 8001b76:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <initTimer4+0x68>)
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	4a08      	ldr	r2, [pc, #32]	; (8001b9c <initTimer4+0x68>)
 8001b7c:	f443 43d0 	orr.w	r3, r3, #26624	; 0x6800
 8001b80:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 8001b84:	61d3      	str	r3, [r2, #28]

  TIM4->CCER |= 0xBB00; // CC4NP:CC4P = 11 (rising and falling edge active) CC4E
 8001b86:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <initTimer4+0x68>)
 8001b88:	6a1b      	ldr	r3, [r3, #32]
 8001b8a:	4a04      	ldr	r2, [pc, #16]	; (8001b9c <initTimer4+0x68>)
 8001b8c:	f443 433b 	orr.w	r3, r3, #47872	; 0xbb00
 8001b90:	6213      	str	r3, [r2, #32]
}
 8001b92:	bf00      	nop
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	40000800 	.word	0x40000800

08001ba0 <initDriveModule>:

static void initDriveModule(void) {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  // Motor right is set to the output of the left driver (due to the placement
  // of the driver)
  initAFGPIOPin(&s_pin_speed_motor_right, GPIOB, 9, 2);
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	2209      	movs	r2, #9
 8001ba8:	492d      	ldr	r1, [pc, #180]	; (8001c60 <initDriveModule+0xc0>)
 8001baa:	482e      	ldr	r0, [pc, #184]	; (8001c64 <initDriveModule+0xc4>)
 8001bac:	f7ff ff67 	bl	8001a7e <initAFGPIOPin>
  initOutputGPIOPin(&s_pin_direction_motor_right, GPIOA, 12);
 8001bb0:	220c      	movs	r2, #12
 8001bb2:	492d      	ldr	r1, [pc, #180]	; (8001c68 <initDriveModule+0xc8>)
 8001bb4:	482d      	ldr	r0, [pc, #180]	; (8001c6c <initDriveModule+0xcc>)
 8001bb6:	f7ff ff3b 	bl	8001a30 <initOutputGPIOPin>
  s_motor_right.pin_speed = s_pin_speed_motor_right;
 8001bba:	4b2d      	ldr	r3, [pc, #180]	; (8001c70 <initDriveModule+0xd0>)
 8001bbc:	4a29      	ldr	r2, [pc, #164]	; (8001c64 <initDriveModule+0xc4>)
 8001bbe:	3304      	adds	r3, #4
 8001bc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bc4:	e883 0003 	stmia.w	r3, {r0, r1}
  s_motor_right.pin_direction = s_pin_direction_motor_right;
 8001bc8:	4b29      	ldr	r3, [pc, #164]	; (8001c70 <initDriveModule+0xd0>)
 8001bca:	4a28      	ldr	r2, [pc, #160]	; (8001c6c <initDriveModule+0xcc>)
 8001bcc:	330c      	adds	r3, #12
 8001bce:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bd2:	e883 0003 	stmia.w	r3, {r0, r1}
  s_motor_right.channel = 4;
 8001bd6:	4b26      	ldr	r3, [pc, #152]	; (8001c70 <initDriveModule+0xd0>)
 8001bd8:	2204      	movs	r2, #4
 8001bda:	751a      	strb	r2, [r3, #20]
  s_motor_right.status = MOTOR_FORWARD;
 8001bdc:	4b24      	ldr	r3, [pc, #144]	; (8001c70 <initDriveModule+0xd0>)
 8001bde:	2201      	movs	r2, #1
 8001be0:	701a      	strb	r2, [r3, #0]
  g_robot.motor_right = &s_motor_right;
 8001be2:	4b24      	ldr	r3, [pc, #144]	; (8001c74 <initDriveModule+0xd4>)
 8001be4:	4a22      	ldr	r2, [pc, #136]	; (8001c70 <initDriveModule+0xd0>)
 8001be6:	609a      	str	r2, [r3, #8]

  // Motor left is set to the output of the right driver (due to the placement
  // of the driver)
  initAFGPIOPin(&s_pin_speed_motor_left, GPIOB, 8, 2);
 8001be8:	2302      	movs	r3, #2
 8001bea:	2208      	movs	r2, #8
 8001bec:	491c      	ldr	r1, [pc, #112]	; (8001c60 <initDriveModule+0xc0>)
 8001bee:	4822      	ldr	r0, [pc, #136]	; (8001c78 <initDriveModule+0xd8>)
 8001bf0:	f7ff ff45 	bl	8001a7e <initAFGPIOPin>
  initOutputGPIOPin(&s_pin_direction_motor_left, GPIOA, 11);
 8001bf4:	220b      	movs	r2, #11
 8001bf6:	491c      	ldr	r1, [pc, #112]	; (8001c68 <initDriveModule+0xc8>)
 8001bf8:	4820      	ldr	r0, [pc, #128]	; (8001c7c <initDriveModule+0xdc>)
 8001bfa:	f7ff ff19 	bl	8001a30 <initOutputGPIOPin>
  s_motor_left.pin_speed = s_pin_speed_motor_left;
 8001bfe:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <initDriveModule+0xe0>)
 8001c00:	4a1d      	ldr	r2, [pc, #116]	; (8001c78 <initDriveModule+0xd8>)
 8001c02:	3304      	adds	r3, #4
 8001c04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c08:	e883 0003 	stmia.w	r3, {r0, r1}
  s_motor_left.pin_direction = s_pin_direction_motor_left;
 8001c0c:	4b1c      	ldr	r3, [pc, #112]	; (8001c80 <initDriveModule+0xe0>)
 8001c0e:	4a1b      	ldr	r2, [pc, #108]	; (8001c7c <initDriveModule+0xdc>)
 8001c10:	330c      	adds	r3, #12
 8001c12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c16:	e883 0003 	stmia.w	r3, {r0, r1}
  s_motor_left.channel = 3;
 8001c1a:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <initDriveModule+0xe0>)
 8001c1c:	2203      	movs	r2, #3
 8001c1e:	751a      	strb	r2, [r3, #20]
  s_motor_right.status = MOTOR_FORWARD;
 8001c20:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <initDriveModule+0xd0>)
 8001c22:	2201      	movs	r2, #1
 8001c24:	701a      	strb	r2, [r3, #0]
  g_robot.motor_left = &s_motor_left;
 8001c26:	4b13      	ldr	r3, [pc, #76]	; (8001c74 <initDriveModule+0xd4>)
 8001c28:	4a15      	ldr	r2, [pc, #84]	; (8001c80 <initDriveModule+0xe0>)
 8001c2a:	60da      	str	r2, [r3, #12]

  g_robot.speed = MAX_SPEED;
 8001c2c:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <initDriveModule+0xd4>)
 8001c2e:	2264      	movs	r2, #100	; 0x64
 8001c30:	711a      	strb	r2, [r3, #4]
  g_robot.status_robot = ROBOT_DEFAULT;
 8001c32:	4b10      	ldr	r3, [pc, #64]	; (8001c74 <initDriveModule+0xd4>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	701a      	strb	r2, [r3, #0]
  g_robot.status_obstacle = OBSTACLE_NONE;
 8001c38:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <initDriveModule+0xd4>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	705a      	strb	r2, [r3, #1]
  g_robot.status_mode = MODE_MANUAL;
 8001c3e:	4b0d      	ldr	r3, [pc, #52]	; (8001c74 <initDriveModule+0xd4>)
 8001c40:	2202      	movs	r2, #2
 8001c42:	709a      	strb	r2, [r3, #2]
  g_robot.delay = DELAY_OFF;
 8001c44:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <initDriveModule+0xd4>)
 8001c46:	2202      	movs	r2, #2
 8001c48:	70da      	strb	r2, [r3, #3]

  updateSpeedRobot(0);
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	f000 fb40 	bl	80022d0 <updateSpeedRobot>
  updateStatusRobot(ROBOT_STOPPED);
 8001c50:	2001      	movs	r0, #1
 8001c52:	f000 fab5 	bl	80021c0 <updateStatusRobot>

  initTimer4();
 8001c56:	f7ff ff6d 	bl	8001b34 <initTimer4>
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40020400 	.word	0x40020400
 8001c64:	200001b0 	.word	0x200001b0
 8001c68:	40020000 	.word	0x40020000
 8001c6c:	200001b8 	.word	0x200001b8
 8001c70:	200001c0 	.word	0x200001c0
 8001c74:	20000180 	.word	0x20000180
 8001c78:	200001d8 	.word	0x200001d8
 8001c7c:	200001e0 	.word	0x200001e0
 8001c80:	200001e8 	.word	0x200001e8

08001c84 <initTimer2>:

static void initTimer2(void) {
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  // ------------- Echo Timer (Channel 1) ---------------
  TIM2->CR1 = 0x0000;
 8001c88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
  TIM2->CR2 = 0x0000;
 8001c90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c94:	2200      	movs	r2, #0
 8001c96:	605a      	str	r2, [r3, #4]
  TIM2->SMCR = 0x0000;
 8001c98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	609a      	str	r2, [r3, #8]

  TIM2->PSC = TIMER_2_PSC - 1;
 8001ca0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ca4:	221f      	movs	r2, #31
 8001ca6:	629a      	str	r2, [r3, #40]	; 0x28
  TIM2->CNT = 0;
 8001ca8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cac:	2200      	movs	r2, #0
 8001cae:	625a      	str	r2, [r3, #36]	; 0x24
  TIM2->ARR = 0xFFFF;
 8001cb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cb8:	62da      	str	r2, [r3, #44]	; 0x2c

  TIM2->DIER |= (1 << 1); // IRQ when CCR1 is reached -> CCyIE = 1
 8001cba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cc4:	f043 0302 	orr.w	r3, r3, #2
 8001cc8:	60d3      	str	r3, [r2, #12]

  TIM2->CCMR1 = 0x0001;  // CCyS = 1 (TIC); OCyM = 000 y OCyPE = 0 (always in TIC)
 8001cca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cce:	2201      	movs	r2, #1
 8001cd0:	619a      	str	r2, [r3, #24]

  TIM2->CCER = 0x0001; // CCyNP:CCyP = 11 (rising and falling edge active)
 8001cd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	621a      	str	r2, [r3, #32]
  TIM2->CCER |= (1 << 1);
 8001cda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ce4:	f043 0302 	orr.w	r3, r3, #2
 8001ce8:	6213      	str	r3, [r2, #32]
  TIM2->CCER |= (1 << 3);
 8001cea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cf4:	f043 0308 	orr.w	r3, r3, #8
 8001cf8:	6213      	str	r3, [r2, #32]

  // ------------- Trigger Timer (Channel 2) -----------
  TIM2->CCR2 = TIMER_2_CH_2_CNT;
 8001cfa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cfe:	220a      	movs	r2, #10
 8001d00:	639a      	str	r2, [r3, #56]	; 0x38

  TIM2->DIER |= (1 << 2); // IRQ when CCR2 is reached
 8001d02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d0c:	f043 0304 	orr.w	r3, r3, #4
 8001d10:	60d3      	str	r3, [r2, #12]

  TIM2->CCMR1 &= ~(0xFF00); // Clear all channel 2 information
 8001d12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d1c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d20:	6193      	str	r3, [r2, #24]
  TIM2->CCMR1 |= 0x3000;    // CC2S = 0 (TOC, PWM) OC2M = 011 (Toggle) OC2PE = 0  (without preload)
 8001d22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d2c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001d30:	6193      	str	r3, [r2, #24]

  TIM2->CCER &= ~(0x00F0);
 8001d32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d40:	6213      	str	r3, [r2, #32]
  TIM2->CCER |= 0x0010; // CC2P = 0   (always)
 8001d42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d4c:	f043 0310 	orr.w	r3, r3, #16
 8001d50:	6213      	str	r3, [r2, #32]

  NVIC->ISER[0] |= (1 << 28);
 8001d52:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <initTimer2+0xe4>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a04      	ldr	r2, [pc, #16]	; (8001d68 <initTimer2+0xe4>)
 8001d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d5c:	6013      	str	r3, [r2, #0]
}
 8001d5e:	bf00      	nop
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bc80      	pop	{r7}
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	e000e100 	.word	0xe000e100

08001d6c <initTimer3>:

static void initTimer3(void) {
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  // ------------- Toggle Buzzer Timer -----------------------
  TIM3->CR1 = 0x0000;
 8001d70:	4b32      	ldr	r3, [pc, #200]	; (8001e3c <initTimer3+0xd0>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
  TIM3->CR2 = 0x0000;
 8001d76:	4b31      	ldr	r3, [pc, #196]	; (8001e3c <initTimer3+0xd0>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	605a      	str	r2, [r3, #4]
  TIM3->SMCR = 0x0000;
 8001d7c:	4b2f      	ldr	r3, [pc, #188]	; (8001e3c <initTimer3+0xd0>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	609a      	str	r2, [r3, #8]

  TIM3->PSC = TIMER_3_PSC - 1;
 8001d82:	4b2e      	ldr	r3, [pc, #184]	; (8001e3c <initTimer3+0xd0>)
 8001d84:	f640 427f 	movw	r2, #3199	; 0xc7f
 8001d88:	629a      	str	r2, [r3, #40]	; 0x28
  TIM3->CNT = 0;
 8001d8a:	4b2c      	ldr	r3, [pc, #176]	; (8001e3c <initTimer3+0xd0>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	625a      	str	r2, [r3, #36]	; 0x24
  TIM3->ARR = TIMER_3_CH_1_CNT;
 8001d90:	4b2a      	ldr	r3, [pc, #168]	; (8001e3c <initTimer3+0xd0>)
 8001d92:	f241 1294 	movw	r2, #4500	; 0x1194
 8001d96:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM3->CCR1 = TIMER_3_CH_1_CNT;
 8001d98:	4b28      	ldr	r3, [pc, #160]	; (8001e3c <initTimer3+0xd0>)
 8001d9a:	f241 1294 	movw	r2, #4500	; 0x1194
 8001d9e:	635a      	str	r2, [r3, #52]	; 0x34
  TIM3->CCR2 = TIMER_3_CH_2_CNT;
 8001da0:	4b26      	ldr	r3, [pc, #152]	; (8001e3c <initTimer3+0xd0>)
 8001da2:	2232      	movs	r2, #50	; 0x32
 8001da4:	639a      	str	r2, [r3, #56]	; 0x38
  TIM3->CCR3 = TIMER_3_CH_3_CNT;
 8001da6:	4b25      	ldr	r3, [pc, #148]	; (8001e3c <initTimer3+0xd0>)
 8001da8:	f640 02ca 	movw	r2, #2250	; 0x8ca
 8001dac:	63da      	str	r2, [r3, #60]	; 0x3c

  TIM3->DIER |= (1 << 1); // IRQ when CCR1 is reached -> CCyIE = 1
 8001dae:	4b23      	ldr	r3, [pc, #140]	; (8001e3c <initTimer3+0xd0>)
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	4a22      	ldr	r2, [pc, #136]	; (8001e3c <initTimer3+0xd0>)
 8001db4:	f043 0302 	orr.w	r3, r3, #2
 8001db8:	60d3      	str	r3, [r2, #12]
  TIM3->DIER |= (1 << 2);
 8001dba:	4b20      	ldr	r3, [pc, #128]	; (8001e3c <initTimer3+0xd0>)
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	4a1f      	ldr	r2, [pc, #124]	; (8001e3c <initTimer3+0xd0>)
 8001dc0:	f043 0304 	orr.w	r3, r3, #4
 8001dc4:	60d3      	str	r3, [r2, #12]
  TIM3->DIER |= (1 << 3);
 8001dc6:	4b1d      	ldr	r3, [pc, #116]	; (8001e3c <initTimer3+0xd0>)
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	4a1c      	ldr	r2, [pc, #112]	; (8001e3c <initTimer3+0xd0>)
 8001dcc:	f043 0308 	orr.w	r3, r3, #8
 8001dd0:	60d3      	str	r3, [r2, #12]

  TIM3->CCMR1 &= ~(0xFFFF);
 8001dd2:	4b1a      	ldr	r3, [pc, #104]	; (8001e3c <initTimer3+0xd0>)
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	4a19      	ldr	r2, [pc, #100]	; (8001e3c <initTimer3+0xd0>)
 8001dd8:	0c1b      	lsrs	r3, r3, #16
 8001dda:	041b      	lsls	r3, r3, #16
 8001ddc:	6193      	str	r3, [r2, #24]
  TIM3->CCMR1 |= 0x3030;    // CC1S = 0 (TOC, PWM) OC1M = 011 (Toggle) OC1PE = 0  (without preload)
 8001dde:	4b17      	ldr	r3, [pc, #92]	; (8001e3c <initTimer3+0xd0>)
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	4a16      	ldr	r2, [pc, #88]	; (8001e3c <initTimer3+0xd0>)
 8001de4:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001de8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001dec:	6193      	str	r3, [r2, #24]

  TIM3->CCMR2 &= ~(0x00FF);
 8001dee:	4b13      	ldr	r3, [pc, #76]	; (8001e3c <initTimer3+0xd0>)
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	4a12      	ldr	r2, [pc, #72]	; (8001e3c <initTimer3+0xd0>)
 8001df4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001df8:	61d3      	str	r3, [r2, #28]
  TIM3->CCMR2 |= 0x0030;
 8001dfa:	4b10      	ldr	r3, [pc, #64]	; (8001e3c <initTimer3+0xd0>)
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	4a0f      	ldr	r2, [pc, #60]	; (8001e3c <initTimer3+0xd0>)
 8001e00:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001e04:	61d3      	str	r3, [r2, #28]

  TIM3->CCER &= ~(0x0FFF);
 8001e06:	4b0d      	ldr	r3, [pc, #52]	; (8001e3c <initTimer3+0xd0>)
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	4a0c      	ldr	r2, [pc, #48]	; (8001e3c <initTimer3+0xd0>)
 8001e0c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001e10:	f023 030f 	bic.w	r3, r3, #15
 8001e14:	6213      	str	r3, [r2, #32]
  TIM3->CCER |= 0x0111; // CC1P = 0 (always) CC1E = 1   (hardware output activated)
 8001e16:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <initTimer3+0xd0>)
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	4a08      	ldr	r2, [pc, #32]	; (8001e3c <initTimer3+0xd0>)
 8001e1c:	f443 7388 	orr.w	r3, r3, #272	; 0x110
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	6213      	str	r3, [r2, #32]

  NVIC->ISER[0] |= (1 << 29);
 8001e26:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <initTimer3+0xd4>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a05      	ldr	r2, [pc, #20]	; (8001e40 <initTimer3+0xd4>)
 8001e2c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e30:	6013      	str	r3, [r2, #0]
}
 8001e32:	bf00      	nop
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bc80      	pop	{r7}
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	40000400 	.word	0x40000400
 8001e40:	e000e100 	.word	0xe000e100

08001e44 <initUltrasonicAndBuzzerModule>:

static void initUltrasonicAndBuzzerModule(void) {
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  initOutputGPIOPin(&s_pin_buzzer, GPIOA, 1);
 8001e48:	2201      	movs	r2, #1
 8001e4a:	4919      	ldr	r1, [pc, #100]	; (8001eb0 <initUltrasonicAndBuzzerModule+0x6c>)
 8001e4c:	4819      	ldr	r0, [pc, #100]	; (8001eb4 <initUltrasonicAndBuzzerModule+0x70>)
 8001e4e:	f7ff fdef 	bl	8001a30 <initOutputGPIOPin>
  s_buzzer.gpio_pin = &s_pin_buzzer;
 8001e52:	4b19      	ldr	r3, [pc, #100]	; (8001eb8 <initUltrasonicAndBuzzerModule+0x74>)
 8001e54:	4a17      	ldr	r2, [pc, #92]	; (8001eb4 <initUltrasonicAndBuzzerModule+0x70>)
 8001e56:	605a      	str	r2, [r3, #4]
  s_buzzer.status = BUZZER_ON;
 8001e58:	4b17      	ldr	r3, [pc, #92]	; (8001eb8 <initUltrasonicAndBuzzerModule+0x74>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	701a      	strb	r2, [r3, #0]
  g_robot.buzzer = &s_buzzer;
 8001e5e:	4b17      	ldr	r3, [pc, #92]	; (8001ebc <initUltrasonicAndBuzzerModule+0x78>)
 8001e60:	4a15      	ldr	r2, [pc, #84]	; (8001eb8 <initUltrasonicAndBuzzerModule+0x74>)
 8001e62:	611a      	str	r2, [r3, #16]

  initOutputGPIOPin(&s_pin_ultrasound_trigger, GPIOD, 2);
 8001e64:	2202      	movs	r2, #2
 8001e66:	4916      	ldr	r1, [pc, #88]	; (8001ec0 <initUltrasonicAndBuzzerModule+0x7c>)
 8001e68:	4816      	ldr	r0, [pc, #88]	; (8001ec4 <initUltrasonicAndBuzzerModule+0x80>)
 8001e6a:	f7ff fde1 	bl	8001a30 <initOutputGPIOPin>
  s_ultrasound.trigger = &s_pin_ultrasound_trigger;
 8001e6e:	4b16      	ldr	r3, [pc, #88]	; (8001ec8 <initUltrasonicAndBuzzerModule+0x84>)
 8001e70:	4a14      	ldr	r2, [pc, #80]	; (8001ec4 <initUltrasonicAndBuzzerModule+0x80>)
 8001e72:	605a      	str	r2, [r3, #4]

  initAFGPIOPin(&s_pin_ultrasound_echo, GPIOA, 5, 1);
 8001e74:	2301      	movs	r3, #1
 8001e76:	2205      	movs	r2, #5
 8001e78:	490d      	ldr	r1, [pc, #52]	; (8001eb0 <initUltrasonicAndBuzzerModule+0x6c>)
 8001e7a:	4814      	ldr	r0, [pc, #80]	; (8001ecc <initUltrasonicAndBuzzerModule+0x88>)
 8001e7c:	f7ff fdff 	bl	8001a7e <initAFGPIOPin>
  s_ultrasound.echo = &s_pin_ultrasound_echo;
 8001e80:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <initUltrasonicAndBuzzerModule+0x84>)
 8001e82:	4a12      	ldr	r2, [pc, #72]	; (8001ecc <initUltrasonicAndBuzzerModule+0x88>)
 8001e84:	609a      	str	r2, [r3, #8]

  s_ultrasound.status = ULTRASOUND_STOPPED;
 8001e86:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <initUltrasonicAndBuzzerModule+0x84>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	701a      	strb	r2, [r3, #0]
  s_ultrasound.status_distance = DISTANCE_NONE;
 8001e8c:	4b0e      	ldr	r3, [pc, #56]	; (8001ec8 <initUltrasonicAndBuzzerModule+0x84>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	705a      	strb	r2, [r3, #1]
  s_ultrasound.distance = 100;
 8001e92:	4b0d      	ldr	r3, [pc, #52]	; (8001ec8 <initUltrasonicAndBuzzerModule+0x84>)
 8001e94:	2264      	movs	r2, #100	; 0x64
 8001e96:	611a      	str	r2, [r3, #16]
  g_robot.ultrasound = &s_ultrasound;
 8001e98:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <initUltrasonicAndBuzzerModule+0x78>)
 8001e9a:	4a0b      	ldr	r2, [pc, #44]	; (8001ec8 <initUltrasonicAndBuzzerModule+0x84>)
 8001e9c:	615a      	str	r2, [r3, #20]

  updateStatusBuzzer(BUZZER_OFF);
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	f000 f89a 	bl	8001fd8 <updateStatusBuzzer>

  initTimer2();
 8001ea4:	f7ff feee 	bl	8001c84 <initTimer2>
  initTimer3();
 8001ea8:	f7ff ff60 	bl	8001d6c <initTimer3>
}
 8001eac:	bf00      	nop
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40020000 	.word	0x40020000
 8001eb4:	20000200 	.word	0x20000200
 8001eb8:	20000208 	.word	0x20000208
 8001ebc:	20000180 	.word	0x20000180
 8001ec0:	40020c00 	.word	0x40020c00
 8001ec4:	20000210 	.word	0x20000210
 8001ec8:	20000220 	.word	0x20000220
 8001ecc:	20000218 	.word	0x20000218

08001ed0 <initSpeedSelectorModule>:

static void initSpeedSelectorModule(void) {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  initGPIOPin(&s_pin_speed_selector, GPIOA, 4);
 8001ed4:	2204      	movs	r2, #4
 8001ed6:	492a      	ldr	r1, [pc, #168]	; (8001f80 <initSpeedSelectorModule+0xb0>)
 8001ed8:	482a      	ldr	r0, [pc, #168]	; (8001f84 <initSpeedSelectorModule+0xb4>)
 8001eda:	f7ff fd76 	bl	80019ca <initGPIOPin>
  s_speed_selector.adc = ADC1;
 8001ede:	4b2a      	ldr	r3, [pc, #168]	; (8001f88 <initSpeedSelectorModule+0xb8>)
 8001ee0:	4a2a      	ldr	r2, [pc, #168]	; (8001f8c <initSpeedSelectorModule+0xbc>)
 8001ee2:	609a      	str	r2, [r3, #8]

  s_pin_speed_selector.gpio->MODER |= (3 << (s_pin_speed_selector.pin * 2));
 8001ee4:	4b27      	ldr	r3, [pc, #156]	; (8001f84 <initSpeedSelectorModule+0xb4>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	4b26      	ldr	r3, [pc, #152]	; (8001f84 <initSpeedSelectorModule+0xb4>)
 8001eec:	791b      	ldrb	r3, [r3, #4]
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	2103      	movs	r1, #3
 8001ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4b22      	ldr	r3, [pc, #136]	; (8001f84 <initSpeedSelectorModule+0xb4>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	601a      	str	r2, [r3, #0]

  s_speed_selector.adc->CR2 &= ~(1 << 0);
 8001f00:	4b21      	ldr	r3, [pc, #132]	; (8001f88 <initSpeedSelectorModule+0xb8>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	689a      	ldr	r2, [r3, #8]
 8001f06:	4b20      	ldr	r3, [pc, #128]	; (8001f88 <initSpeedSelectorModule+0xb8>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f022 0201 	bic.w	r2, r2, #1
 8001f0e:	609a      	str	r2, [r3, #8]
  s_speed_selector.adc->CR1 = 0;  // OVRIE = 0 (overrun IRQ disabled) RES = 00 (resolution = 12 bits) SCAN = 0 (scan mode disabled) EOCIE = 0 (EOC IRQ disabled)
 8001f10:	4b1d      	ldr	r3, [pc, #116]	; (8001f88 <initSpeedSelectorModule+0xb8>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	2200      	movs	r2, #0
 8001f16:	605a      	str	r2, [r3, #4]
  s_speed_selector.adc->CR2 = 0x00000412; // EOCS = 1 (EOC is activated after each conv.) DELS = 001 (delay till data is read) CONT = 1 (continuous conversion)
 8001f18:	4b1b      	ldr	r3, [pc, #108]	; (8001f88 <initSpeedSelectorModule+0xb8>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f240 4212 	movw	r2, #1042	; 0x412
 8001f20:	609a      	str	r2, [r3, #8]

  s_speed_selector.adc->SQR1 = 0x00000000;       // 1 channel in the sequence
 8001f22:	4b19      	ldr	r3, [pc, #100]	; (8001f88 <initSpeedSelectorModule+0xb8>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	2200      	movs	r2, #0
 8001f28:	631a      	str	r2, [r3, #48]	; 0x30
  s_speed_selector.adc->SQR5 = 0x00000004;       // The selected channel is AIN4
 8001f2a:	4b17      	ldr	r3, [pc, #92]	; (8001f88 <initSpeedSelectorModule+0xb8>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	2204      	movs	r2, #4
 8001f30:	641a      	str	r2, [r3, #64]	; 0x40

  s_speed_selector.adc->CR2 |= (1 << 0);       // ADON = 1 (ADC powered on)
 8001f32:	4b15      	ldr	r3, [pc, #84]	; (8001f88 <initSpeedSelectorModule+0xb8>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	4b13      	ldr	r3, [pc, #76]	; (8001f88 <initSpeedSelectorModule+0xb8>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f042 0201 	orr.w	r2, r2, #1
 8001f40:	609a      	str	r2, [r3, #8]

  while ((s_speed_selector.adc->SR & 0x0040) == 0);  // If ADCONS = 0, I wait till converter is ready
 8001f42:	bf00      	nop
 8001f44:	4b10      	ldr	r3, [pc, #64]	; (8001f88 <initSpeedSelectorModule+0xb8>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0f8      	beq.n	8001f44 <initSpeedSelectorModule+0x74>
  s_speed_selector.adc->CR2 |= 0x40000000;       // When ADCONS = 1, I start conv. (SWSTART = 1)
 8001f52:	4b0d      	ldr	r3, [pc, #52]	; (8001f88 <initSpeedSelectorModule+0xb8>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <initSpeedSelectorModule+0xb8>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f60:	609a      	str	r2, [r3, #8]

  s_speed_selector.gpio_pin = &s_pin_speed_selector;
 8001f62:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <initSpeedSelectorModule+0xb8>)
 8001f64:	4a07      	ldr	r2, [pc, #28]	; (8001f84 <initSpeedSelectorModule+0xb4>)
 8001f66:	605a      	str	r2, [r3, #4]
  s_speed_selector.max_speed = MAX_SPEED;
 8001f68:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <initSpeedSelectorModule+0xb8>)
 8001f6a:	2264      	movs	r2, #100	; 0x64
 8001f6c:	801a      	strh	r2, [r3, #0]

  g_robot.speed_selector = s_speed_selector;
 8001f6e:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <initSpeedSelectorModule+0xc0>)
 8001f70:	4a05      	ldr	r2, [pc, #20]	; (8001f88 <initSpeedSelectorModule+0xb8>)
 8001f72:	3318      	adds	r3, #24
 8001f74:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f76:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40020000 	.word	0x40020000
 8001f84:	20000234 	.word	0x20000234
 8001f88:	2000023c 	.word	0x2000023c
 8001f8c:	40012400 	.word	0x40012400
 8001f90:	20000180 	.word	0x20000180

08001f94 <initBluetoothModule>:

static void initBluetoothModule(UART_HandleTypeDef *huart) {
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  s_bluetooth.data_received = s_data_received;
 8001f9c:	4b0a      	ldr	r3, [pc, #40]	; (8001fc8 <initBluetoothModule+0x34>)
 8001f9e:	4a0b      	ldr	r2, [pc, #44]	; (8001fcc <initBluetoothModule+0x38>)
 8001fa0:	609a      	str	r2, [r3, #8]
  s_bluetooth.data_send = s_data_send;
 8001fa2:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <initBluetoothModule+0x34>)
 8001fa4:	4a0a      	ldr	r2, [pc, #40]	; (8001fd0 <initBluetoothModule+0x3c>)
 8001fa6:	605a      	str	r2, [r3, #4]
  s_bluetooth.huart = huart;
 8001fa8:	4a07      	ldr	r2, [pc, #28]	; (8001fc8 <initBluetoothModule+0x34>)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6013      	str	r3, [r2, #0]

  g_robot.bluetooth = s_bluetooth;
 8001fae:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <initBluetoothModule+0x40>)
 8001fb0:	4a05      	ldr	r2, [pc, #20]	; (8001fc8 <initBluetoothModule+0x34>)
 8001fb2:	3324      	adds	r3, #36	; 0x24
 8001fb4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fb6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  receiveData();
 8001fba:	f000 fb1f 	bl	80025fc <receiveData>
}
 8001fbe:	bf00      	nop
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000280 	.word	0x20000280
 8001fcc:	2000027c 	.word	0x2000027c
 8001fd0:	20000248 	.word	0x20000248
 8001fd4:	20000180 	.word	0x20000180

08001fd8 <updateStatusBuzzer>:

void updateStatusBuzzer(enum StatusBuzzer status) {
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	71fb      	strb	r3, [r7, #7]
  if (g_robot.buzzer->status == status) {
 8001fe2:	4b15      	ldr	r3, [pc, #84]	; (8002038 <updateStatusBuzzer+0x60>)
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	79fa      	ldrb	r2, [r7, #7]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d01e      	beq.n	800202c <updateStatusBuzzer+0x54>
    return;
  }

  g_robot.buzzer->status = status;
 8001fee:	4b12      	ldr	r3, [pc, #72]	; (8002038 <updateStatusBuzzer+0x60>)
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	79fa      	ldrb	r2, [r7, #7]
 8001ff4:	701a      	strb	r2, [r3, #0]
  switch (g_robot.buzzer->status) {
 8001ff6:	4b10      	ldr	r3, [pc, #64]	; (8002038 <updateStatusBuzzer+0x60>)
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d017      	beq.n	8002030 <updateStatusBuzzer+0x58>
 8002000:	2b02      	cmp	r3, #2
 8002002:	dc16      	bgt.n	8002032 <updateStatusBuzzer+0x5a>
 8002004:	2b00      	cmp	r3, #0
 8002006:	d009      	beq.n	800201c <updateStatusBuzzer+0x44>
 8002008:	2b01      	cmp	r3, #1
 800200a:	d112      	bne.n	8002032 <updateStatusBuzzer+0x5a>
  case BUZZER_ON:
    updateStatusGPIOPin(g_robot.buzzer->gpio_pin, GPIO_PIN_UP);
 800200c:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <updateStatusBuzzer+0x60>)
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2100      	movs	r1, #0
 8002014:	4618      	mov	r0, r3
 8002016:	f000 f811 	bl	800203c <updateStatusGPIOPin>
    break;
 800201a:	e00a      	b.n	8002032 <updateStatusBuzzer+0x5a>
  case BUZZER_OFF:
    updateStatusGPIOPin(g_robot.buzzer->gpio_pin, GPIO_PIN_DOWN);
 800201c:	4b06      	ldr	r3, [pc, #24]	; (8002038 <updateStatusBuzzer+0x60>)
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2101      	movs	r1, #1
 8002024:	4618      	mov	r0, r3
 8002026:	f000 f809 	bl	800203c <updateStatusGPIOPin>
    break;
 800202a:	e002      	b.n	8002032 <updateStatusBuzzer+0x5a>
    return;
 800202c:	bf00      	nop
 800202e:	e000      	b.n	8002032 <updateStatusBuzzer+0x5a>
  case BUZZER_BEEPING:
    break;
 8002030:	bf00      	nop
  }
}
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	20000180 	.word	0x20000180

0800203c <updateStatusGPIOPin>:
/*
 * Updates the motor pin depending of its status
 *  GPIO_PIN_UP: sets the BSRR register to set the pin to 1
 *  GPIO_PIN_DOWN: sets the BSRR register to set the pin to 0
 */
void updateStatusGPIOPin(struct GPIOPin *gpio_pin, enum StatusGPIOPin status) {
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	460b      	mov	r3, r1
 8002046:	70fb      	strb	r3, [r7, #3]
  switch (status) {
 8002048:	78fb      	ldrb	r3, [r7, #3]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d002      	beq.n	8002054 <updateStatusGPIOPin+0x18>
 800204e:	2b01      	cmp	r3, #1
 8002050:	d00e      	beq.n	8002070 <updateStatusGPIOPin+0x34>
    case GPIO_PIN_DOWN:
      gpio_pin->gpio->BSRR |= (1 << gpio_pin->pin) << 16;

      break;
    }
}
 8002052:	e01c      	b.n	800208e <updateStatusGPIOPin+0x52>
      gpio_pin->gpio->BSRR |= (1 << gpio_pin->pin);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	699a      	ldr	r2, [r3, #24]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	791b      	ldrb	r3, [r3, #4]
 800205e:	4619      	mov	r1, r3
 8002060:	2301      	movs	r3, #1
 8002062:	408b      	lsls	r3, r1
 8002064:	4619      	mov	r1, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	430a      	orrs	r2, r1
 800206c:	619a      	str	r2, [r3, #24]
      break;
 800206e:	e00e      	b.n	800208e <updateStatusGPIOPin+0x52>
      gpio_pin->gpio->BSRR |= (1 << gpio_pin->pin) << 16;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	699a      	ldr	r2, [r3, #24]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	791b      	ldrb	r3, [r3, #4]
 800207a:	4619      	mov	r1, r3
 800207c:	2301      	movs	r3, #1
 800207e:	408b      	lsls	r3, r1
 8002080:	041b      	lsls	r3, r3, #16
 8002082:	4619      	mov	r1, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	430a      	orrs	r2, r1
 800208a:	619a      	str	r2, [r3, #24]
      break;
 800208c:	bf00      	nop
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr

08002098 <updateStatusMotor>:
 *  MOTOR_BACKWARD: sets the motor to backward with respect to the whole robot
 *
 *  This is important as one motor cables are swapped to correct that it is
 * flipped. (hardware)
 */
static void updateStatusMotor(struct Motor *motor, enum StatusMotor status) {
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	460b      	mov	r3, r1
 80020a2:	70fb      	strb	r3, [r7, #3]
  if (motor->status == status) {
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	78fa      	ldrb	r2, [r7, #3]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d062      	beq.n	8002174 <updateStatusMotor+0xdc>
    return;
  }

  motor->status = status;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	78fa      	ldrb	r2, [r7, #3]
 80020b2:	701a      	strb	r2, [r3, #0]

  enum StatusGPIOPin status_motor_pin_direction;
  unsigned char offset_enable = ((motor->channel - 1) * 4);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	7d1b      	ldrb	r3, [r3, #20]
 80020b8:	3b01      	subs	r3, #1
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	73bb      	strb	r3, [r7, #14]
  unsigned char offset_pwm_mode = ((motor->channel - 3) * 8) + 4;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	7d1b      	ldrb	r3, [r3, #20]
 80020c4:	3b03      	subs	r3, #3
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	3304      	adds	r3, #4
 80020ce:	737b      	strb	r3, [r7, #13]

  switch (status) {
 80020d0:	78fb      	ldrb	r3, [r7, #3]
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d02e      	beq.n	8002134 <updateStatusMotor+0x9c>
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	dc44      	bgt.n	8002164 <updateStatusMotor+0xcc>
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d002      	beq.n	80020e4 <updateStatusMotor+0x4c>
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d011      	beq.n	8002106 <updateStatusMotor+0x6e>
 80020e2:	e03f      	b.n	8002164 <updateStatusMotor+0xcc>
  case MOTOR_STOPPED:
    TIM4->CCER &= ~(11 << offset_enable); // Turn off PWM
 80020e4:	4b25      	ldr	r3, [pc, #148]	; (800217c <updateStatusMotor+0xe4>)
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	7bba      	ldrb	r2, [r7, #14]
 80020ea:	210b      	movs	r1, #11
 80020ec:	fa01 f202 	lsl.w	r2, r1, r2
 80020f0:	43d2      	mvns	r2, r2
 80020f2:	4611      	mov	r1, r2
 80020f4:	4a21      	ldr	r2, [pc, #132]	; (800217c <updateStatusMotor+0xe4>)
 80020f6:	400b      	ands	r3, r1
 80020f8:	6213      	str	r3, [r2, #32]
    status_motor_pin_direction = GPIO_PIN_DOWN;
 80020fa:	2301      	movs	r3, #1
 80020fc:	73fb      	strb	r3, [r7, #15]
    TIM4->CNT = 0;
 80020fe:	4b1f      	ldr	r3, [pc, #124]	; (800217c <updateStatusMotor+0xe4>)
 8002100:	2200      	movs	r2, #0
 8002102:	625a      	str	r2, [r3, #36]	; 0x24
    break;
 8002104:	e02e      	b.n	8002164 <updateStatusMotor+0xcc>
  case MOTOR_FORWARD:
    TIM4->CCER |= (11 << offset_enable); // Turn on PWM
 8002106:	4b1d      	ldr	r3, [pc, #116]	; (800217c <updateStatusMotor+0xe4>)
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	7bba      	ldrb	r2, [r7, #14]
 800210c:	210b      	movs	r1, #11
 800210e:	fa01 f202 	lsl.w	r2, r1, r2
 8002112:	4611      	mov	r1, r2
 8002114:	4a19      	ldr	r2, [pc, #100]	; (800217c <updateStatusMotor+0xe4>)
 8002116:	430b      	orrs	r3, r1
 8002118:	6213      	str	r3, [r2, #32]
    TIM4->CCMR2 |= (1 << offset_pwm_mode); // OCyM = 111
 800211a:	4b18      	ldr	r3, [pc, #96]	; (800217c <updateStatusMotor+0xe4>)
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	7b7a      	ldrb	r2, [r7, #13]
 8002120:	2101      	movs	r1, #1
 8002122:	fa01 f202 	lsl.w	r2, r1, r2
 8002126:	4611      	mov	r1, r2
 8002128:	4a14      	ldr	r2, [pc, #80]	; (800217c <updateStatusMotor+0xe4>)
 800212a:	430b      	orrs	r3, r1
 800212c:	61d3      	str	r3, [r2, #28]
    status_motor_pin_direction = GPIO_PIN_DOWN;
 800212e:	2301      	movs	r3, #1
 8002130:	73fb      	strb	r3, [r7, #15]
    break;
 8002132:	e017      	b.n	8002164 <updateStatusMotor+0xcc>
  case MOTOR_BACKWARD:
    TIM4->CCER |= (11 << offset_enable);
 8002134:	4b11      	ldr	r3, [pc, #68]	; (800217c <updateStatusMotor+0xe4>)
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	7bba      	ldrb	r2, [r7, #14]
 800213a:	210b      	movs	r1, #11
 800213c:	fa01 f202 	lsl.w	r2, r1, r2
 8002140:	4611      	mov	r1, r2
 8002142:	4a0e      	ldr	r2, [pc, #56]	; (800217c <updateStatusMotor+0xe4>)
 8002144:	430b      	orrs	r3, r1
 8002146:	6213      	str	r3, [r2, #32]
    TIM4->CCMR2 &= ~(1 << offset_pwm_mode); // OCyM = 110
 8002148:	4b0c      	ldr	r3, [pc, #48]	; (800217c <updateStatusMotor+0xe4>)
 800214a:	69db      	ldr	r3, [r3, #28]
 800214c:	7b7a      	ldrb	r2, [r7, #13]
 800214e:	2101      	movs	r1, #1
 8002150:	fa01 f202 	lsl.w	r2, r1, r2
 8002154:	43d2      	mvns	r2, r2
 8002156:	4611      	mov	r1, r2
 8002158:	4a08      	ldr	r2, [pc, #32]	; (800217c <updateStatusMotor+0xe4>)
 800215a:	400b      	ands	r3, r1
 800215c:	61d3      	str	r3, [r2, #28]
    status_motor_pin_direction = GPIO_PIN_UP;
 800215e:	2300      	movs	r3, #0
 8002160:	73fb      	strb	r3, [r7, #15]

    break;
 8002162:	bf00      	nop
  }
  updateStatusGPIOPin(&(motor->pin_direction), status_motor_pin_direction);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	330c      	adds	r3, #12
 8002168:	7bfa      	ldrb	r2, [r7, #15]
 800216a:	4611      	mov	r1, r2
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff ff65 	bl	800203c <updateStatusGPIOPin>
 8002172:	e000      	b.n	8002176 <updateStatusMotor+0xde>
    return;
 8002174:	bf00      	nop
}
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40000800 	.word	0x40000800

08002180 <updateStatusMode>:

void updateStatusMode(enum StatusMode status) {
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	4603      	mov	r3, r0
 8002188:	71fb      	strb	r3, [r7, #7]
  if (g_robot.status_mode == status) {
 800218a:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <updateStatusMode+0x38>)
 800218c:	789b      	ldrb	r3, [r3, #2]
 800218e:	79fa      	ldrb	r2, [r7, #7]
 8002190:	429a      	cmp	r2, r3
 8002192:	d00c      	beq.n	80021ae <updateStatusMode+0x2e>
     return;
  }

  g_robot.status_mode = status;
 8002194:	4a08      	ldr	r2, [pc, #32]	; (80021b8 <updateStatusMode+0x38>)
 8002196:	79fb      	ldrb	r3, [r7, #7]
 8002198:	7093      	strb	r3, [r2, #2]

  if (g_robot.status_mode == MODE_AUTOMATIC) {
 800219a:	4b07      	ldr	r3, [pc, #28]	; (80021b8 <updateStatusMode+0x38>)
 800219c:	789b      	ldrb	r3, [r3, #2]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d106      	bne.n	80021b0 <updateStatusMode+0x30>
    g_robot.bluetooth.data_send = "Automatic mode started\n";
 80021a2:	4b05      	ldr	r3, [pc, #20]	; (80021b8 <updateStatusMode+0x38>)
 80021a4:	4a05      	ldr	r2, [pc, #20]	; (80021bc <updateStatusMode+0x3c>)
 80021a6:	629a      	str	r2, [r3, #40]	; 0x28
    sendData();
 80021a8:	f000 fa7a 	bl	80026a0 <sendData>
 80021ac:	e000      	b.n	80021b0 <updateStatusMode+0x30>
     return;
 80021ae:	bf00      	nop
  }
}
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20000180 	.word	0x20000180
 80021bc:	0800510c 	.word	0x0800510c

080021c0 <updateStatusRobot>:
/*
 * Updates the status of the motor and calls to implement the status.
 *    All the movements are with respect to the whole robot.
 *
 */
void updateStatusRobot(enum StatusRobot status) {
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	71fb      	strb	r3, [r7, #7]
  if (g_robot.status_robot == status) {
 80021ca:	4b39      	ldr	r3, [pc, #228]	; (80022b0 <updateStatusRobot+0xf0>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	79fa      	ldrb	r2, [r7, #7]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d068      	beq.n	80022a6 <updateStatusRobot+0xe6>
    return;
  }

  g_robot.status_robot = status;
 80021d4:	4a36      	ldr	r2, [pc, #216]	; (80022b0 <updateStatusRobot+0xf0>)
 80021d6:	79fb      	ldrb	r3, [r7, #7]
 80021d8:	7013      	strb	r3, [r2, #0]
  enum StatusMotor status_motor_right, status_motor_left;
  char *message = NULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	60bb      	str	r3, [r7, #8]

  switch (status) {
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	2b07      	cmp	r3, #7
 80021e2:	d849      	bhi.n	8002278 <updateStatusRobot+0xb8>
 80021e4:	a201      	add	r2, pc, #4	; (adr r2, 80021ec <updateStatusRobot+0x2c>)
 80021e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ea:	bf00      	nop
 80021ec:	0800220d 	.word	0x0800220d
 80021f0:	08002217 	.word	0x08002217
 80021f4:	08002225 	.word	0x08002225
 80021f8:	08002233 	.word	0x08002233
 80021fc:	08002241 	.word	0x08002241
 8002200:	0800224f 	.word	0x0800224f
 8002204:	0800225d 	.word	0x0800225d
 8002208:	0800226b 	.word	0x0800226b
  case ROBOT_DEFAULT:
    status_motor_right = MOTOR_STOPPED;
 800220c:	2300      	movs	r3, #0
 800220e:	73fb      	strb	r3, [r7, #15]
    status_motor_left = MOTOR_STOPPED;
 8002210:	2300      	movs	r3, #0
 8002212:	73bb      	strb	r3, [r7, #14]
    break;
 8002214:	e030      	b.n	8002278 <updateStatusRobot+0xb8>
  case ROBOT_STOPPED:
    message = "Robot stopped\n";
 8002216:	4b27      	ldr	r3, [pc, #156]	; (80022b4 <updateStatusRobot+0xf4>)
 8002218:	60bb      	str	r3, [r7, #8]
    status_motor_right = MOTOR_STOPPED;
 800221a:	2300      	movs	r3, #0
 800221c:	73fb      	strb	r3, [r7, #15]
    status_motor_left = MOTOR_STOPPED;
 800221e:	2300      	movs	r3, #0
 8002220:	73bb      	strb	r3, [r7, #14]

    break;
 8002222:	e029      	b.n	8002278 <updateStatusRobot+0xb8>
  case ROBOT_FORWARD:
    message = "Robot moving forward\n";
 8002224:	4b24      	ldr	r3, [pc, #144]	; (80022b8 <updateStatusRobot+0xf8>)
 8002226:	60bb      	str	r3, [r7, #8]
    status_motor_right = MOTOR_FORWARD;
 8002228:	2301      	movs	r3, #1
 800222a:	73fb      	strb	r3, [r7, #15]
    status_motor_left = MOTOR_FORWARD;
 800222c:	2301      	movs	r3, #1
 800222e:	73bb      	strb	r3, [r7, #14]

    break;
 8002230:	e022      	b.n	8002278 <updateStatusRobot+0xb8>
  case ROBOT_BACKWARD:
    message = "Robot moving backwards\n";
 8002232:	4b22      	ldr	r3, [pc, #136]	; (80022bc <updateStatusRobot+0xfc>)
 8002234:	60bb      	str	r3, [r7, #8]
    status_motor_right = MOTOR_BACKWARD;
 8002236:	2302      	movs	r3, #2
 8002238:	73fb      	strb	r3, [r7, #15]
    status_motor_left = MOTOR_BACKWARD;
 800223a:	2302      	movs	r3, #2
 800223c:	73bb      	strb	r3, [r7, #14]

    break;
 800223e:	e01b      	b.n	8002278 <updateStatusRobot+0xb8>
  case ROBOT_RIGHT:
    message = "Robot turning right\n";
 8002240:	4b1f      	ldr	r3, [pc, #124]	; (80022c0 <updateStatusRobot+0x100>)
 8002242:	60bb      	str	r3, [r7, #8]
    status_motor_right = MOTOR_STOPPED;
 8002244:	2300      	movs	r3, #0
 8002246:	73fb      	strb	r3, [r7, #15]
    status_motor_left = MOTOR_FORWARD;
 8002248:	2301      	movs	r3, #1
 800224a:	73bb      	strb	r3, [r7, #14]

    break;
 800224c:	e014      	b.n	8002278 <updateStatusRobot+0xb8>
  case ROBOT_LEFT:
    message = "Robot turning left\n";
 800224e:	4b1d      	ldr	r3, [pc, #116]	; (80022c4 <updateStatusRobot+0x104>)
 8002250:	60bb      	str	r3, [r7, #8]
    status_motor_right = MOTOR_FORWARD;
 8002252:	2301      	movs	r3, #1
 8002254:	73fb      	strb	r3, [r7, #15]
    status_motor_left = MOTOR_STOPPED;
 8002256:	2300      	movs	r3, #0
 8002258:	73bb      	strb	r3, [r7, #14]

    break;
 800225a:	e00d      	b.n	8002278 <updateStatusRobot+0xb8>
  case ROBOT_BACKWARD_RIGHT:
    message = "Robot turning backwards right\n";
 800225c:	4b1a      	ldr	r3, [pc, #104]	; (80022c8 <updateStatusRobot+0x108>)
 800225e:	60bb      	str	r3, [r7, #8]
    status_motor_right = MOTOR_BACKWARD;
 8002260:	2302      	movs	r3, #2
 8002262:	73fb      	strb	r3, [r7, #15]
    status_motor_left = MOTOR_STOPPED;
 8002264:	2300      	movs	r3, #0
 8002266:	73bb      	strb	r3, [r7, #14]

    break;
 8002268:	e006      	b.n	8002278 <updateStatusRobot+0xb8>
  case ROBOT_BACKWARD_LEFT:
    message = "Robot turning backwards left\n";
 800226a:	4b18      	ldr	r3, [pc, #96]	; (80022cc <updateStatusRobot+0x10c>)
 800226c:	60bb      	str	r3, [r7, #8]
    status_motor_right = MOTOR_STOPPED;
 800226e:	2300      	movs	r3, #0
 8002270:	73fb      	strb	r3, [r7, #15]
    status_motor_left = MOTOR_BACKWARD;
 8002272:	2302      	movs	r3, #2
 8002274:	73bb      	strb	r3, [r7, #14]

    break;
 8002276:	bf00      	nop
  }

  // TODO enable motor
  updateStatusMotor(g_robot.motor_left, status_motor_left);
 8002278:	4b0d      	ldr	r3, [pc, #52]	; (80022b0 <updateStatusRobot+0xf0>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	7bba      	ldrb	r2, [r7, #14]
 800227e:	4611      	mov	r1, r2
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff ff09 	bl	8002098 <updateStatusMotor>
  updateStatusMotor(g_robot.motor_right, status_motor_right);
 8002286:	4b0a      	ldr	r3, [pc, #40]	; (80022b0 <updateStatusRobot+0xf0>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	7bfa      	ldrb	r2, [r7, #15]
 800228c:	4611      	mov	r1, r2
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff ff02 	bl	8002098 <updateStatusMotor>

  if (message != NULL) {
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d006      	beq.n	80022a8 <updateStatusRobot+0xe8>
    g_robot.bluetooth.data_send = message;
 800229a:	4a05      	ldr	r2, [pc, #20]	; (80022b0 <updateStatusRobot+0xf0>)
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	6293      	str	r3, [r2, #40]	; 0x28
    sendData();
 80022a0:	f000 f9fe 	bl	80026a0 <sendData>
 80022a4:	e000      	b.n	80022a8 <updateStatusRobot+0xe8>
    return;
 80022a6:	bf00      	nop
  }

}
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	20000180 	.word	0x20000180
 80022b4:	08005124 	.word	0x08005124
 80022b8:	08005134 	.word	0x08005134
 80022bc:	0800514c 	.word	0x0800514c
 80022c0:	08005164 	.word	0x08005164
 80022c4:	0800517c 	.word	0x0800517c
 80022c8:	08005190 	.word	0x08005190
 80022cc:	080051b0 	.word	0x080051b0

080022d0 <updateSpeedRobot>:

void updateSpeedRobot(unsigned char speed) {
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	71fb      	strb	r3, [r7, #7]
  if (g_robot.speed == speed) {
 80022da:	4b0c      	ldr	r3, [pc, #48]	; (800230c <updateSpeedRobot+0x3c>)
 80022dc:	791b      	ldrb	r3, [r3, #4]
 80022de:	79fa      	ldrb	r2, [r7, #7]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d00e      	beq.n	8002302 <updateSpeedRobot+0x32>
    return;
  }

  if (speed > MAX_SPEED) {
 80022e4:	79fb      	ldrb	r3, [r7, #7]
 80022e6:	2b64      	cmp	r3, #100	; 0x64
 80022e8:	d901      	bls.n	80022ee <updateSpeedRobot+0x1e>
    speed = MAX_SPEED;
 80022ea:	2364      	movs	r3, #100	; 0x64
 80022ec:	71fb      	strb	r3, [r7, #7]
  }

  g_robot.speed = speed;
 80022ee:	4a07      	ldr	r2, [pc, #28]	; (800230c <updateSpeedRobot+0x3c>)
 80022f0:	79fb      	ldrb	r3, [r7, #7]
 80022f2:	7113      	strb	r3, [r2, #4]

  TIM4->CCR3 = speed;
 80022f4:	4a06      	ldr	r2, [pc, #24]	; (8002310 <updateSpeedRobot+0x40>)
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	63d3      	str	r3, [r2, #60]	; 0x3c
  TIM4->CCR4 = speed;
 80022fa:	4a05      	ldr	r2, [pc, #20]	; (8002310 <updateSpeedRobot+0x40>)
 80022fc:	79fb      	ldrb	r3, [r7, #7]
 80022fe:	6413      	str	r3, [r2, #64]	; 0x40
 8002300:	e000      	b.n	8002304 <updateSpeedRobot+0x34>
    return;
 8002302:	bf00      	nop
}
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr
 800230c:	20000180 	.word	0x20000180
 8002310:	40000800 	.word	0x40000800

08002314 <createRobot>:


/*
 * Creates a new robot and initializes all global and static variables
 */
void createRobot(UART_HandleTypeDef *huart) {
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  initDriveModule();
 800231c:	f7ff fc40 	bl	8001ba0 <initDriveModule>
  initUltrasonicAndBuzzerModule();
 8002320:	f7ff fd90 	bl	8001e44 <initUltrasonicAndBuzzerModule>
  initSpeedSelectorModule();
 8002324:	f7ff fdd4 	bl	8001ed0 <initSpeedSelectorModule>
  initBluetoothModule(huart);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f7ff fe33 	bl	8001f94 <initBluetoothModule>

  TIM2->CR1 |= 0x0001; // CEN = 1 -> Start counter
 800232e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002338:	f043 0301 	orr.w	r3, r3, #1
 800233c:	6013      	str	r3, [r2, #0]
  TIM2->SR = 0; // Clear flags
 800233e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002342:	2200      	movs	r2, #0
 8002344:	611a      	str	r2, [r3, #16]

  TIM3->CR1 |= 0x0001; // CEN = 1 -> Start counter
 8002346:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <createRobot+0x60>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a0a      	ldr	r2, [pc, #40]	; (8002374 <createRobot+0x60>)
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	6013      	str	r3, [r2, #0]
  TIM3->SR = 0; // Clear flags
 8002352:	4b08      	ldr	r3, [pc, #32]	; (8002374 <createRobot+0x60>)
 8002354:	2200      	movs	r2, #0
 8002356:	611a      	str	r2, [r3, #16]

  TIM4->CR1 |= 0x0001;
 8002358:	4b07      	ldr	r3, [pc, #28]	; (8002378 <createRobot+0x64>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a06      	ldr	r2, [pc, #24]	; (8002378 <createRobot+0x64>)
 800235e:	f043 0301 	orr.w	r3, r3, #1
 8002362:	6013      	str	r3, [r2, #0]
  TIM4->SR = 0; // Clear flags
 8002364:	4b04      	ldr	r3, [pc, #16]	; (8002378 <createRobot+0x64>)
 8002366:	2200      	movs	r2, #0
 8002368:	611a      	str	r2, [r3, #16]
}
 800236a:	bf00      	nop
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40000400 	.word	0x40000400
 8002378:	40000800 	.word	0x40000800

0800237c <toggleGPIOPin>:

void toggleGPIOPin(struct GPIOPin *gpio_pin) {
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  if ((gpio_pin->gpio->IDR & (1 << gpio_pin->pin)) == 0) {
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	7912      	ldrb	r2, [r2, #4]
 800238e:	4611      	mov	r1, r2
 8002390:	2201      	movs	r2, #1
 8002392:	408a      	lsls	r2, r1
 8002394:	4013      	ands	r3, r2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10d      	bne.n	80023b6 <toggleGPIOPin+0x3a>
    gpio_pin->gpio->BSRR |= (1 << gpio_pin->pin);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	699a      	ldr	r2, [r3, #24]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	791b      	ldrb	r3, [r3, #4]
 80023a4:	4619      	mov	r1, r3
 80023a6:	2301      	movs	r3, #1
 80023a8:	408b      	lsls	r3, r1
 80023aa:	4619      	mov	r1, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	619a      	str	r2, [r3, #24]
  } else {
    gpio_pin->gpio->BSRR |= (1 << gpio_pin->pin) << 16;
  }
}
 80023b4:	e00d      	b.n	80023d2 <toggleGPIOPin+0x56>
    gpio_pin->gpio->BSRR |= (1 << gpio_pin->pin) << 16;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	699a      	ldr	r2, [r3, #24]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	791b      	ldrb	r3, [r3, #4]
 80023c0:	4619      	mov	r1, r3
 80023c2:	2301      	movs	r3, #1
 80023c4:	408b      	lsls	r3, r1
 80023c6:	041b      	lsls	r3, r3, #16
 80023c8:	4619      	mov	r1, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	430a      	orrs	r2, r1
 80023d0:	619a      	str	r2, [r3, #24]
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc80      	pop	{r7}
 80023da:	4770      	bx	lr

080023dc <updateBuzzer>:

void updateBuzzer() {
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
  enum StatusBuzzer status_buzzer;

  if (g_robot.ultrasound->distance < SHORT_DISTANCE) {
 80023e2:	4b0d      	ldr	r3, [pc, #52]	; (8002418 <updateBuzzer+0x3c>)
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	2b09      	cmp	r3, #9
 80023ea:	dc02      	bgt.n	80023f2 <updateBuzzer+0x16>
    status_buzzer = BUZZER_ON;
 80023ec:	2301      	movs	r3, #1
 80023ee:	71fb      	strb	r3, [r7, #7]
 80023f0:	e009      	b.n	8002406 <updateBuzzer+0x2a>
  } else if (g_robot.ultrasound->distance < LONG_DISTANCE) {
 80023f2:	4b09      	ldr	r3, [pc, #36]	; (8002418 <updateBuzzer+0x3c>)
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	2b13      	cmp	r3, #19
 80023fa:	dc02      	bgt.n	8002402 <updateBuzzer+0x26>
    status_buzzer = BUZZER_BEEPING;
 80023fc:	2302      	movs	r3, #2
 80023fe:	71fb      	strb	r3, [r7, #7]
 8002400:	e001      	b.n	8002406 <updateBuzzer+0x2a>
  } else {
    status_buzzer = BUZZER_OFF;
 8002402:	2300      	movs	r3, #0
 8002404:	71fb      	strb	r3, [r7, #7]
  }

  updateStatusBuzzer(status_buzzer);
 8002406:	79fb      	ldrb	r3, [r7, #7]
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff fde5 	bl	8001fd8 <updateStatusBuzzer>
}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20000180 	.word	0x20000180
 800241c:	00000000 	.word	0x00000000

08002420 <updateMaxSpeed>:

void updateMaxSpeed() {
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
  uint32_t value = g_robot.speed_selector.adc->DR;
 8002426:	4b24      	ldr	r3, [pc, #144]	; (80024b8 <updateMaxSpeed+0x98>)
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800242c:	607b      	str	r3, [r7, #4]

  float percentage = (((float) value * 0.5) / MAX_VALUE_ADC) + 0.5;
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7fe fc56 	bl	8000ce0 <__aeabi_ui2f>
 8002434:	4603      	mov	r3, r0
 8002436:	4618      	mov	r0, r3
 8002438:	f7fe f8ba 	bl	80005b0 <__aeabi_f2d>
 800243c:	f04f 0200 	mov.w	r2, #0
 8002440:	4b1e      	ldr	r3, [pc, #120]	; (80024bc <updateMaxSpeed+0x9c>)
 8002442:	f7fe f90d 	bl	8000660 <__aeabi_dmul>
 8002446:	4602      	mov	r2, r0
 8002448:	460b      	mov	r3, r1
 800244a:	4610      	mov	r0, r2
 800244c:	4619      	mov	r1, r3
 800244e:	a318      	add	r3, pc, #96	; (adr r3, 80024b0 <updateMaxSpeed+0x90>)
 8002450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002454:	f7fe fa2e 	bl	80008b4 <__aeabi_ddiv>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4610      	mov	r0, r2
 800245e:	4619      	mov	r1, r3
 8002460:	f04f 0200 	mov.w	r2, #0
 8002464:	4b15      	ldr	r3, [pc, #84]	; (80024bc <updateMaxSpeed+0x9c>)
 8002466:	f7fd ff45 	bl	80002f4 <__adddf3>
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	4610      	mov	r0, r2
 8002470:	4619      	mov	r1, r3
 8002472:	f7fe fb2f 	bl	8000ad4 <__aeabi_d2f>
 8002476:	4603      	mov	r3, r0
 8002478:	603b      	str	r3, [r7, #0]

  g_robot.speed_selector.max_speed = (int) (MAX_SPEED * percentage);
 800247a:	4911      	ldr	r1, [pc, #68]	; (80024c0 <updateMaxSpeed+0xa0>)
 800247c:	6838      	ldr	r0, [r7, #0]
 800247e:	f7fd fe7f 	bl	8000180 <__aeabi_fmul>
 8002482:	4603      	mov	r3, r0
 8002484:	4618      	mov	r0, r3
 8002486:	f7fe fc83 	bl	8000d90 <__aeabi_f2iz>
 800248a:	4603      	mov	r3, r0
 800248c:	b29a      	uxth	r2, r3
 800248e:	4b0a      	ldr	r3, [pc, #40]	; (80024b8 <updateMaxSpeed+0x98>)
 8002490:	831a      	strh	r2, [r3, #24]

  if (g_robot.status_mode == MODE_MANUAL) {
 8002492:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <updateMaxSpeed+0x98>)
 8002494:	789b      	ldrb	r3, [r3, #2]
 8002496:	2b02      	cmp	r3, #2
 8002498:	d105      	bne.n	80024a6 <updateMaxSpeed+0x86>
    updateSpeedRobot(g_robot.speed_selector.max_speed);
 800249a:	4b07      	ldr	r3, [pc, #28]	; (80024b8 <updateMaxSpeed+0x98>)
 800249c:	8b1b      	ldrh	r3, [r3, #24]
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff ff15 	bl	80022d0 <updateSpeedRobot>
  }
}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	00000000 	.word	0x00000000
 80024b4:	40affe00 	.word	0x40affe00
 80024b8:	20000180 	.word	0x20000180
 80024bc:	3fe00000 	.word	0x3fe00000
 80024c0:	42c80000 	.word	0x42c80000
 80024c4:	00000000 	.word	0x00000000

080024c8 <updateRobot>:

/*
 * It uses a TURN_SPEED so the angle is constant for a 0.5 second delay
 * Otherwise depending on the speed will make different angle of turns.
 */
void updateRobot() {
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
  enum StatusRobot status_robot = ROBOT_STOPPED;
 80024ce:	2301      	movs	r3, #1
 80024d0:	71fb      	strb	r3, [r7, #7]
  unsigned char speed = 0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	71bb      	strb	r3, [r7, #6]
  unsigned char do_wait = 0;
 80024d6:	2300      	movs	r3, #0
 80024d8:	717b      	strb	r3, [r7, #5]

  switch(g_robot.status_obstacle) {
 80024da:	4b47      	ldr	r3, [pc, #284]	; (80025f8 <updateRobot+0x130>)
 80024dc:	785b      	ldrb	r3, [r3, #1]
 80024de:	2b08      	cmp	r3, #8
 80024e0:	d869      	bhi.n	80025b6 <updateRobot+0xee>
 80024e2:	a201      	add	r2, pc, #4	; (adr r2, 80024e8 <updateRobot+0x20>)
 80024e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e8:	0800250d 	.word	0x0800250d
 80024ec:	0800257f 	.word	0x0800257f
 80024f0:	0800258d 	.word	0x0800258d
 80024f4:	0800257f 	.word	0x0800257f
 80024f8:	0800259b 	.word	0x0800259b
 80024fc:	080025a9 	.word	0x080025a9
 8002500:	0800257f 	.word	0x0800257f
 8002504:	0800259b 	.word	0x0800259b
 8002508:	0800257f 	.word	0x0800257f
  case OBSTACLE_NONE:
    if (g_robot.ultrasound->distance < LONG_DISTANCE) {
 800250c:	4b3a      	ldr	r3, [pc, #232]	; (80025f8 <updateRobot+0x130>)
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	2b13      	cmp	r3, #19
 8002514:	dc26      	bgt.n	8002564 <updateRobot+0x9c>
      /*
       * SHORT_DISTANCE + 2 is done so when the robot is at 10 the speed is not 0
       * Therefore the speed is from 20% to 100% the maximum
       */
      float percentage = (g_robot.ultrasound->distance - (SHORT_DISTANCE + 2)) * 0.1;
 8002516:	4b38      	ldr	r3, [pc, #224]	; (80025f8 <updateRobot+0x130>)
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	3b0c      	subs	r3, #12
 800251e:	4618      	mov	r0, r3
 8002520:	f7fe f834 	bl	800058c <__aeabi_i2d>
 8002524:	a332      	add	r3, pc, #200	; (adr r3, 80025f0 <updateRobot+0x128>)
 8002526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252a:	f7fe f899 	bl	8000660 <__aeabi_dmul>
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	4610      	mov	r0, r2
 8002534:	4619      	mov	r1, r3
 8002536:	f7fe facd 	bl	8000ad4 <__aeabi_d2f>
 800253a:	4603      	mov	r3, r0
 800253c:	603b      	str	r3, [r7, #0]
      speed = (int) (g_robot.speed_selector.max_speed * percentage) + MIN_SPEED;
 800253e:	4b2e      	ldr	r3, [pc, #184]	; (80025f8 <updateRobot+0x130>)
 8002540:	8b1b      	ldrh	r3, [r3, #24]
 8002542:	4618      	mov	r0, r3
 8002544:	f7fe fbd0 	bl	8000ce8 <__aeabi_i2f>
 8002548:	4603      	mov	r3, r0
 800254a:	6839      	ldr	r1, [r7, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f7fd fe17 	bl	8000180 <__aeabi_fmul>
 8002552:	4603      	mov	r3, r0
 8002554:	4618      	mov	r0, r3
 8002556:	f7fe fc1b 	bl	8000d90 <__aeabi_f2iz>
 800255a:	4603      	mov	r3, r0
 800255c:	b2db      	uxtb	r3, r3
 800255e:	331e      	adds	r3, #30
 8002560:	71bb      	strb	r3, [r7, #6]
 8002562:	e002      	b.n	800256a <updateRobot+0xa2>
    } else {
      speed = g_robot.speed_selector.max_speed;
 8002564:	4b24      	ldr	r3, [pc, #144]	; (80025f8 <updateRobot+0x130>)
 8002566:	8b1b      	ldrh	r3, [r3, #24]
 8002568:	71bb      	strb	r3, [r7, #6]
    }

    if (speed < MIN_SPEED) {
 800256a:	79bb      	ldrb	r3, [r7, #6]
 800256c:	2b1d      	cmp	r3, #29
 800256e:	d801      	bhi.n	8002574 <updateRobot+0xac>
      speed = MIN_SPEED;
 8002570:	231e      	movs	r3, #30
 8002572:	71bb      	strb	r3, [r7, #6]
    }

    status_robot = ROBOT_FORWARD;
 8002574:	2302      	movs	r3, #2
 8002576:	71fb      	strb	r3, [r7, #7]
    do_wait = 0;
 8002578:	2300      	movs	r3, #0
 800257a:	717b      	strb	r3, [r7, #5]

    break;
 800257c:	e01b      	b.n	80025b6 <updateRobot+0xee>

  case OBSTACLE_IN_FRONT:
  case OBSTACLE_RIGHT_MEASURE:
  case OBSTACLE_LEFT_MEASURE:
  case OBSTACLE_FINAL:
    speed = 0;
 800257e:	2300      	movs	r3, #0
 8002580:	71bb      	strb	r3, [r7, #6]
    status_robot = ROBOT_STOPPED;
 8002582:	2301      	movs	r3, #1
 8002584:	71fb      	strb	r3, [r7, #7]
    do_wait = 1;
 8002586:	2301      	movs	r3, #1
 8002588:	717b      	strb	r3, [r7, #5]
    break;
 800258a:	e014      	b.n	80025b6 <updateRobot+0xee>

  case OBSTACLE_RIGHT:
    speed = TURN_SPEED;
 800258c:	2346      	movs	r3, #70	; 0x46
 800258e:	71bb      	strb	r3, [r7, #6]
    status_robot = ROBOT_BACKWARD_RIGHT;
 8002590:	2306      	movs	r3, #6
 8002592:	71fb      	strb	r3, [r7, #7]
    do_wait = 1;
 8002594:	2301      	movs	r3, #1
 8002596:	717b      	strb	r3, [r7, #5]
    break;
 8002598:	e00d      	b.n	80025b6 <updateRobot+0xee>

  case OBSTACLE_RIGHT_BACK:
  case OBSTACLE_LEFT_BACK:
    speed = TURN_SPEED;
 800259a:	2346      	movs	r3, #70	; 0x46
 800259c:	71bb      	strb	r3, [r7, #6]
    status_robot = ROBOT_LEFT;
 800259e:	2305      	movs	r3, #5
 80025a0:	71fb      	strb	r3, [r7, #7]
    do_wait = 1;
 80025a2:	2301      	movs	r3, #1
 80025a4:	717b      	strb	r3, [r7, #5]
    break;
 80025a6:	e006      	b.n	80025b6 <updateRobot+0xee>

  case OBSTACLE_LEFT:
    speed = TURN_SPEED;
 80025a8:	2346      	movs	r3, #70	; 0x46
 80025aa:	71bb      	strb	r3, [r7, #6]
    status_robot = ROBOT_BACKWARD_LEFT;
 80025ac:	2307      	movs	r3, #7
 80025ae:	71fb      	strb	r3, [r7, #7]
    do_wait = 1;
 80025b0:	2301      	movs	r3, #1
 80025b2:	717b      	strb	r3, [r7, #5]
    break;
 80025b4:	bf00      	nop

  }

  updateSpeedRobot(speed);
 80025b6:	79bb      	ldrb	r3, [r7, #6]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff fe89 	bl	80022d0 <updateSpeedRobot>
  updateStatusRobot(status_robot);
 80025be:	79fb      	ldrb	r3, [r7, #7]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff fdfd 	bl	80021c0 <updateStatusRobot>

  while (do_wait != 0) {
 80025c6:	e00a      	b.n	80025de <updateRobot+0x116>
    g_robot.delay = DELAY_START;
 80025c8:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <updateRobot+0x130>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	70da      	strb	r2, [r3, #3]
    while(g_robot.delay != DELAY_OFF);
 80025ce:	bf00      	nop
 80025d0:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <updateRobot+0x130>)
 80025d2:	78db      	ldrb	r3, [r3, #3]
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d1fb      	bne.n	80025d0 <updateRobot+0x108>
    do_wait --;
 80025d8:	797b      	ldrb	r3, [r7, #5]
 80025da:	3b01      	subs	r3, #1
 80025dc:	717b      	strb	r3, [r7, #5]
  while (do_wait != 0) {
 80025de:	797b      	ldrb	r3, [r7, #5]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1f1      	bne.n	80025c8 <updateRobot+0x100>
  }
}
 80025e4:	bf00      	nop
 80025e6:	bf00      	nop
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	9999999a 	.word	0x9999999a
 80025f4:	3fb99999 	.word	0x3fb99999
 80025f8:	20000180 	.word	0x20000180

080025fc <receiveData>:

void receiveData() {
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  HAL_UART_Receive_IT(g_robot.bluetooth.huart, (unsigned char *) (g_robot.bluetooth.data_received), DATA_RECEIVED_LENGHT); // Turn on bluetooth receiver
 8002600:	4b04      	ldr	r3, [pc, #16]	; (8002614 <receiveData+0x18>)
 8002602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002604:	4a03      	ldr	r2, [pc, #12]	; (8002614 <receiveData+0x18>)
 8002606:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002608:	2201      	movs	r2, #1
 800260a:	4618      	mov	r0, r3
 800260c:	f002 f8e1 	bl	80047d2 <HAL_UART_Receive_IT>
}
 8002610:	bf00      	nop
 8002612:	bd80      	pop	{r7, pc}
 8002614:	20000180 	.word	0x20000180

08002618 <sendDistanceData>:

void sendDistanceData() {
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
  char *message = NULL;
 800261e:	2300      	movs	r3, #0
 8002620:	607b      	str	r3, [r7, #4]
  if ((g_robot.ultrasound->distance >= 4) && (g_robot.ultrasound->distance <= 14)) {
 8002622:	4b1c      	ldr	r3, [pc, #112]	; (8002694 <sendDistanceData+0x7c>)
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	2b03      	cmp	r3, #3
 800262a:	dd10      	ble.n	800264e <sendDistanceData+0x36>
 800262c:	4b19      	ldr	r3, [pc, #100]	; (8002694 <sendDistanceData+0x7c>)
 800262e:	695b      	ldr	r3, [r3, #20]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	2b0e      	cmp	r3, #14
 8002634:	dc0b      	bgt.n	800264e <sendDistanceData+0x36>
    if (g_robot.ultrasound->status_distance == DISTANCE_10) {
 8002636:	4b17      	ldr	r3, [pc, #92]	; (8002694 <sendDistanceData+0x7c>)
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	785b      	ldrb	r3, [r3, #1]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d021      	beq.n	8002684 <sendDistanceData+0x6c>
      return;
    }
    message = "Object at 10 cm approx \n";
 8002640:	4b15      	ldr	r3, [pc, #84]	; (8002698 <sendDistanceData+0x80>)
 8002642:	607b      	str	r3, [r7, #4]
    g_robot.ultrasound->status_distance = DISTANCE_10;
 8002644:	4b13      	ldr	r3, [pc, #76]	; (8002694 <sendDistanceData+0x7c>)
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	2201      	movs	r2, #1
 800264a:	705a      	strb	r2, [r3, #1]
 800264c:	e014      	b.n	8002678 <sendDistanceData+0x60>

  } else if ((g_robot.ultrasound->distance >= 16) && (g_robot.ultrasound->distance <= 24)) {
 800264e:	4b11      	ldr	r3, [pc, #68]	; (8002694 <sendDistanceData+0x7c>)
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	2b0f      	cmp	r3, #15
 8002656:	dd17      	ble.n	8002688 <sendDistanceData+0x70>
 8002658:	4b0e      	ldr	r3, [pc, #56]	; (8002694 <sendDistanceData+0x7c>)
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	2b18      	cmp	r3, #24
 8002660:	dc12      	bgt.n	8002688 <sendDistanceData+0x70>
    if (g_robot.ultrasound->status_distance == DISTANCE_20) {
 8002662:	4b0c      	ldr	r3, [pc, #48]	; (8002694 <sendDistanceData+0x7c>)
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	785b      	ldrb	r3, [r3, #1]
 8002668:	2b02      	cmp	r3, #2
 800266a:	d00f      	beq.n	800268c <sendDistanceData+0x74>
      return;
    }
    message = "Object at 20 cm approx \n";
 800266c:	4b0b      	ldr	r3, [pc, #44]	; (800269c <sendDistanceData+0x84>)
 800266e:	607b      	str	r3, [r7, #4]
    g_robot.ultrasound->status_distance = DISTANCE_20;
 8002670:	4b08      	ldr	r3, [pc, #32]	; (8002694 <sendDistanceData+0x7c>)
 8002672:	695b      	ldr	r3, [r3, #20]
 8002674:	2202      	movs	r2, #2
 8002676:	705a      	strb	r2, [r3, #1]

  } else {
    return;
  }

  g_robot.bluetooth.data_send = message;
 8002678:	4a06      	ldr	r2, [pc, #24]	; (8002694 <sendDistanceData+0x7c>)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6293      	str	r3, [r2, #40]	; 0x28
  sendData();
 800267e:	f000 f80f 	bl	80026a0 <sendData>
 8002682:	e004      	b.n	800268e <sendDistanceData+0x76>
      return;
 8002684:	bf00      	nop
 8002686:	e002      	b.n	800268e <sendDistanceData+0x76>
    return;
 8002688:	bf00      	nop
 800268a:	e000      	b.n	800268e <sendDistanceData+0x76>
      return;
 800268c:	bf00      	nop
}
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	20000180 	.word	0x20000180
 8002698:	080051d0 	.word	0x080051d0
 800269c:	080051ec 	.word	0x080051ec

080026a0 <sendData>:

void sendData() {
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
  unsigned length = 0;
 80026a6:	2300      	movs	r3, #0
 80026a8:	607b      	str	r3, [r7, #4]
  while (length < DATA_SEND_LENGTH) {
 80026aa:	e009      	b.n	80026c0 <sendData+0x20>
    if (g_robot.bluetooth.data_send[length] == '\0'){
 80026ac:	4b0d      	ldr	r3, [pc, #52]	; (80026e4 <sendData+0x44>)
 80026ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4413      	add	r3, r2
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d006      	beq.n	80026c8 <sendData+0x28>
      break;
    }
    length++;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	3301      	adds	r3, #1
 80026be:	607b      	str	r3, [r7, #4]
  while (length < DATA_SEND_LENGTH) {
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b31      	cmp	r3, #49	; 0x31
 80026c4:	d9f2      	bls.n	80026ac <sendData+0xc>
 80026c6:	e000      	b.n	80026ca <sendData+0x2a>
      break;
 80026c8:	bf00      	nop
  }

  HAL_UART_Transmit_IT(g_robot.bluetooth.huart, (unsigned char *) (g_robot.bluetooth.data_send), length);
 80026ca:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <sendData+0x44>)
 80026cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ce:	4a05      	ldr	r2, [pc, #20]	; (80026e4 <sendData+0x44>)
 80026d0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	b292      	uxth	r2, r2
 80026d6:	4618      	mov	r0, r3
 80026d8:	f002 f837 	bl	800474a <HAL_UART_Transmit_IT>
}
 80026dc:	bf00      	nop
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	20000180 	.word	0x20000180

080026e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80026ee:	4b15      	ldr	r3, [pc, #84]	; (8002744 <HAL_MspInit+0x5c>)
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	4a14      	ldr	r2, [pc, #80]	; (8002744 <HAL_MspInit+0x5c>)
 80026f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026f8:	6253      	str	r3, [r2, #36]	; 0x24
 80026fa:	4b12      	ldr	r3, [pc, #72]	; (8002744 <HAL_MspInit+0x5c>)
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002706:	4b0f      	ldr	r3, [pc, #60]	; (8002744 <HAL_MspInit+0x5c>)
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	4a0e      	ldr	r2, [pc, #56]	; (8002744 <HAL_MspInit+0x5c>)
 800270c:	f043 0301 	orr.w	r3, r3, #1
 8002710:	6213      	str	r3, [r2, #32]
 8002712:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <HAL_MspInit+0x5c>)
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	60bb      	str	r3, [r7, #8]
 800271c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800271e:	4b09      	ldr	r3, [pc, #36]	; (8002744 <HAL_MspInit+0x5c>)
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002722:	4a08      	ldr	r2, [pc, #32]	; (8002744 <HAL_MspInit+0x5c>)
 8002724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002728:	6253      	str	r3, [r2, #36]	; 0x24
 800272a:	4b06      	ldr	r3, [pc, #24]	; (8002744 <HAL_MspInit+0x5c>)
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002732:	607b      	str	r3, [r7, #4]
 8002734:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002736:	2007      	movs	r0, #7
 8002738:	f000 fd04 	bl	8003144 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800273c:	bf00      	nop
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40023800 	.word	0x40023800

08002748 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b08a      	sub	sp, #40	; 0x28
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002750:	f107 0314 	add.w	r3, r7, #20
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	605a      	str	r2, [r3, #4]
 800275a:	609a      	str	r2, [r3, #8]
 800275c:	60da      	str	r2, [r3, #12]
 800275e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a15      	ldr	r2, [pc, #84]	; (80027bc <HAL_ADC_MspInit+0x74>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d123      	bne.n	80027b2 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800276a:	4b15      	ldr	r3, [pc, #84]	; (80027c0 <HAL_ADC_MspInit+0x78>)
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	4a14      	ldr	r2, [pc, #80]	; (80027c0 <HAL_ADC_MspInit+0x78>)
 8002770:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002774:	6213      	str	r3, [r2, #32]
 8002776:	4b12      	ldr	r3, [pc, #72]	; (80027c0 <HAL_ADC_MspInit+0x78>)
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800277e:	613b      	str	r3, [r7, #16]
 8002780:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002782:	4b0f      	ldr	r3, [pc, #60]	; (80027c0 <HAL_ADC_MspInit+0x78>)
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	4a0e      	ldr	r2, [pc, #56]	; (80027c0 <HAL_ADC_MspInit+0x78>)
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	61d3      	str	r3, [r2, #28]
 800278e:	4b0c      	ldr	r3, [pc, #48]	; (80027c0 <HAL_ADC_MspInit+0x78>)
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = IDD_Measurement_Pin;
 800279a:	2310      	movs	r3, #16
 800279c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800279e:	2303      	movs	r3, #3
 80027a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(IDD_Measurement_GPIO_Port, &GPIO_InitStruct);
 80027a6:	f107 0314 	add.w	r3, r7, #20
 80027aa:	4619      	mov	r1, r3
 80027ac:	4805      	ldr	r0, [pc, #20]	; (80027c4 <HAL_ADC_MspInit+0x7c>)
 80027ae:	f000 fd89 	bl	80032c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80027b2:	bf00      	nop
 80027b4:	3728      	adds	r7, #40	; 0x28
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40012400 	.word	0x40012400
 80027c0:	40023800 	.word	0x40023800
 80027c4:	40020000 	.word	0x40020000

080027c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b087      	sub	sp, #28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027d8:	d10c      	bne.n	80027f4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027da:	4b1a      	ldr	r3, [pc, #104]	; (8002844 <HAL_TIM_Base_MspInit+0x7c>)
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	4a19      	ldr	r2, [pc, #100]	; (8002844 <HAL_TIM_Base_MspInit+0x7c>)
 80027e0:	f043 0301 	orr.w	r3, r3, #1
 80027e4:	6253      	str	r3, [r2, #36]	; 0x24
 80027e6:	4b17      	ldr	r3, [pc, #92]	; (8002844 <HAL_TIM_Base_MspInit+0x7c>)
 80027e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	617b      	str	r3, [r7, #20]
 80027f0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80027f2:	e022      	b.n	800283a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a13      	ldr	r2, [pc, #76]	; (8002848 <HAL_TIM_Base_MspInit+0x80>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d10c      	bne.n	8002818 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027fe:	4b11      	ldr	r3, [pc, #68]	; (8002844 <HAL_TIM_Base_MspInit+0x7c>)
 8002800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002802:	4a10      	ldr	r2, [pc, #64]	; (8002844 <HAL_TIM_Base_MspInit+0x7c>)
 8002804:	f043 0302 	orr.w	r3, r3, #2
 8002808:	6253      	str	r3, [r2, #36]	; 0x24
 800280a:	4b0e      	ldr	r3, [pc, #56]	; (8002844 <HAL_TIM_Base_MspInit+0x7c>)
 800280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	613b      	str	r3, [r7, #16]
 8002814:	693b      	ldr	r3, [r7, #16]
}
 8002816:	e010      	b.n	800283a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a0b      	ldr	r2, [pc, #44]	; (800284c <HAL_TIM_Base_MspInit+0x84>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d10b      	bne.n	800283a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002822:	4b08      	ldr	r3, [pc, #32]	; (8002844 <HAL_TIM_Base_MspInit+0x7c>)
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	4a07      	ldr	r2, [pc, #28]	; (8002844 <HAL_TIM_Base_MspInit+0x7c>)
 8002828:	f043 0304 	orr.w	r3, r3, #4
 800282c:	6253      	str	r3, [r2, #36]	; 0x24
 800282e:	4b05      	ldr	r3, [pc, #20]	; (8002844 <HAL_TIM_Base_MspInit+0x7c>)
 8002830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002832:	f003 0304 	and.w	r3, r3, #4
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]
}
 800283a:	bf00      	nop
 800283c:	371c      	adds	r7, #28
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr
 8002844:	40023800 	.word	0x40023800
 8002848:	40000400 	.word	0x40000400
 800284c:	40000800 	.word	0x40000800

08002850 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b08a      	sub	sp, #40	; 0x28
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002858:	f107 0314 	add.w	r3, r7, #20
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	605a      	str	r2, [r3, #4]
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	60da      	str	r2, [r3, #12]
 8002866:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a1b      	ldr	r2, [pc, #108]	; (80028dc <HAL_UART_MspInit+0x8c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d12f      	bne.n	80028d2 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002872:	4b1b      	ldr	r3, [pc, #108]	; (80028e0 <HAL_UART_MspInit+0x90>)
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	4a1a      	ldr	r2, [pc, #104]	; (80028e0 <HAL_UART_MspInit+0x90>)
 8002878:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800287c:	6213      	str	r3, [r2, #32]
 800287e:	4b18      	ldr	r3, [pc, #96]	; (80028e0 <HAL_UART_MspInit+0x90>)
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002886:	613b      	str	r3, [r7, #16]
 8002888:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800288a:	4b15      	ldr	r3, [pc, #84]	; (80028e0 <HAL_UART_MspInit+0x90>)
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	4a14      	ldr	r2, [pc, #80]	; (80028e0 <HAL_UART_MspInit+0x90>)
 8002890:	f043 0302 	orr.w	r3, r3, #2
 8002894:	61d3      	str	r3, [r2, #28]
 8002896:	4b12      	ldr	r3, [pc, #72]	; (80028e0 <HAL_UART_MspInit+0x90>)
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028a2:	23c0      	movs	r3, #192	; 0xc0
 80028a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a6:	2302      	movs	r3, #2
 80028a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028aa:	2300      	movs	r3, #0
 80028ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ae:	2303      	movs	r3, #3
 80028b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028b2:	2307      	movs	r3, #7
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028b6:	f107 0314 	add.w	r3, r7, #20
 80028ba:	4619      	mov	r1, r3
 80028bc:	4809      	ldr	r0, [pc, #36]	; (80028e4 <HAL_UART_MspInit+0x94>)
 80028be:	f000 fd01 	bl	80032c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80028c2:	2200      	movs	r2, #0
 80028c4:	2100      	movs	r1, #0
 80028c6:	2025      	movs	r0, #37	; 0x25
 80028c8:	f000 fc47 	bl	800315a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028cc:	2025      	movs	r0, #37	; 0x25
 80028ce:	f000 fc60 	bl	8003192 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80028d2:	bf00      	nop
 80028d4:	3728      	adds	r7, #40	; 0x28
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	40013800 	.word	0x40013800
 80028e0:	40023800 	.word	0x40023800
 80028e4:	40020400 	.word	0x40020400

080028e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028ec:	e7fe      	b.n	80028ec <NMI_Handler+0x4>

080028ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028ee:	b480      	push	{r7}
 80028f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028f2:	e7fe      	b.n	80028f2 <HardFault_Handler+0x4>

080028f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028f8:	e7fe      	b.n	80028f8 <MemManage_Handler+0x4>

080028fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028fa:	b480      	push	{r7}
 80028fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028fe:	e7fe      	b.n	80028fe <BusFault_Handler+0x4>

08002900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002904:	e7fe      	b.n	8002904 <UsageFault_Handler+0x4>

08002906 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002906:	b480      	push	{r7}
 8002908:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800290a:	bf00      	nop
 800290c:	46bd      	mov	sp, r7
 800290e:	bc80      	pop	{r7}
 8002910:	4770      	bx	lr

08002912 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002912:	b480      	push	{r7}
 8002914:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002916:	bf00      	nop
 8002918:	46bd      	mov	sp, r7
 800291a:	bc80      	pop	{r7}
 800291c:	4770      	bx	lr

0800291e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800291e:	b480      	push	{r7}
 8002920:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002922:	bf00      	nop
 8002924:	46bd      	mov	sp, r7
 8002926:	bc80      	pop	{r7}
 8002928:	4770      	bx	lr

0800292a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800292e:	f000 f88b 	bl	8002a48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002932:	bf00      	nop
 8002934:	bd80      	pop	{r7, pc}
	...

08002938 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800293c:	4802      	ldr	r0, [pc, #8]	; (8002948 <USART1_IRQHandler+0x10>)
 800293e:	f001 ff79 	bl	8004834 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002942:	bf00      	nop
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	2000013c 	.word	0x2000013c

0800294c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002950:	bf00      	nop
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr

08002958 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002958:	480c      	ldr	r0, [pc, #48]	; (800298c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800295a:	490d      	ldr	r1, [pc, #52]	; (8002990 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800295c:	4a0d      	ldr	r2, [pc, #52]	; (8002994 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800295e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002960:	e002      	b.n	8002968 <LoopCopyDataInit>

08002962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002966:	3304      	adds	r3, #4

08002968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800296a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800296c:	d3f9      	bcc.n	8002962 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800296e:	4a0a      	ldr	r2, [pc, #40]	; (8002998 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002970:	4c0a      	ldr	r4, [pc, #40]	; (800299c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002974:	e001      	b.n	800297a <LoopFillZerobss>

08002976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002978:	3204      	adds	r2, #4

0800297a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800297a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800297c:	d3fb      	bcc.n	8002976 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800297e:	f7ff ffe5 	bl	800294c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002982:	f002 fb8b 	bl	800509c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002986:	f7fe fcc1 	bl	800130c <main>
  bx lr
 800298a:	4770      	bx	lr
  ldr r0, =_sdata
 800298c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002990:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002994:	0800523c 	.word	0x0800523c
  ldr r2, =_sbss
 8002998:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800299c:	20000290 	.word	0x20000290

080029a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029a0:	e7fe      	b.n	80029a0 <ADC1_IRQHandler>

080029a2 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b082      	sub	sp, #8
 80029a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80029a8:	2300      	movs	r3, #0
 80029aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029ac:	2003      	movs	r0, #3
 80029ae:	f000 fbc9 	bl	8003144 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029b2:	2000      	movs	r0, #0
 80029b4:	f000 f80e 	bl	80029d4 <HAL_InitTick>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d002      	beq.n	80029c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	71fb      	strb	r3, [r7, #7]
 80029c2:	e001      	b.n	80029c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80029c4:	f7ff fe90 	bl	80026e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80029c8:	79fb      	ldrb	r3, [r7, #7]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
	...

080029d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80029dc:	2300      	movs	r3, #0
 80029de:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80029e0:	4b16      	ldr	r3, [pc, #88]	; (8002a3c <HAL_InitTick+0x68>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d022      	beq.n	8002a2e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80029e8:	4b15      	ldr	r3, [pc, #84]	; (8002a40 <HAL_InitTick+0x6c>)
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	4b13      	ldr	r3, [pc, #76]	; (8002a3c <HAL_InitTick+0x68>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80029f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80029f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fc:	4618      	mov	r0, r3
 80029fe:	f000 fbd6 	bl	80031ae <HAL_SYSTICK_Config>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d10f      	bne.n	8002a28 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b0f      	cmp	r3, #15
 8002a0c:	d809      	bhi.n	8002a22 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a0e:	2200      	movs	r2, #0
 8002a10:	6879      	ldr	r1, [r7, #4]
 8002a12:	f04f 30ff 	mov.w	r0, #4294967295
 8002a16:	f000 fba0 	bl	800315a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a1a:	4a0a      	ldr	r2, [pc, #40]	; (8002a44 <HAL_InitTick+0x70>)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6013      	str	r3, [r2, #0]
 8002a20:	e007      	b.n	8002a32 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	73fb      	strb	r3, [r7, #15]
 8002a26:	e004      	b.n	8002a32 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	73fb      	strb	r3, [r7, #15]
 8002a2c:	e001      	b.n	8002a32 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	20000008 	.word	0x20000008
 8002a40:	20000000 	.word	0x20000000
 8002a44:	20000004 	.word	0x20000004

08002a48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a4c:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <HAL_IncTick+0x1c>)
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <HAL_IncTick+0x20>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4413      	add	r3, r2
 8002a56:	4a03      	ldr	r2, [pc, #12]	; (8002a64 <HAL_IncTick+0x1c>)
 8002a58:	6013      	str	r3, [r2, #0]
}
 8002a5a:	bf00      	nop
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bc80      	pop	{r7}
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	2000028c 	.word	0x2000028c
 8002a68:	20000008 	.word	0x20000008

08002a6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a70:	4b02      	ldr	r3, [pc, #8]	; (8002a7c <HAL_GetTick+0x10>)
 8002a72:	681b      	ldr	r3, [r3, #0]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bc80      	pop	{r7}
 8002a7a:	4770      	bx	lr
 8002a7c:	2000028c 	.word	0x2000028c

08002a80 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b08e      	sub	sp, #56	; 0x38
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8002a92:	2300      	movs	r3, #0
 8002a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e127      	b.n	8002cf0 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d115      	bne.n	8002ada <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002abc:	4b8e      	ldr	r3, [pc, #568]	; (8002cf8 <HAL_ADC_Init+0x278>)
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	4a8d      	ldr	r2, [pc, #564]	; (8002cf8 <HAL_ADC_Init+0x278>)
 8002ac2:	f043 0301 	orr.w	r3, r3, #1
 8002ac6:	6213      	str	r3, [r2, #32]
 8002ac8:	4b8b      	ldr	r3, [pc, #556]	; (8002cf8 <HAL_ADC_Init+0x278>)
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	60bb      	str	r3, [r7, #8]
 8002ad2:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7ff fe37 	bl	8002748 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ade:	f003 0310 	and.w	r3, r3, #16
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f040 80ff 	bne.w	8002ce6 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002af0:	f023 0302 	bic.w	r3, r3, #2
 8002af4:	f043 0202 	orr.w	r2, r3, #2
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8002afc:	4b7f      	ldr	r3, [pc, #508]	; (8002cfc <HAL_ADC_Init+0x27c>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	497c      	ldr	r1, [pc, #496]	; (8002cfc <HAL_ADC_Init+0x27c>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8002b16:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b1e:	4619      	mov	r1, r3
 8002b20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b24:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	fa93 f3a3 	rbit	r3, r3
 8002b2c:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	fab3 f383 	clz	r3, r3
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8002b3a:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002b40:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b48:	4619      	mov	r1, r3
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b50:	fa93 f3a3 	rbit	r3, r3
 8002b54:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	fab3 f383 	clz	r3, r3
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8002b62:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8002b64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b66:	4313      	orrs	r3, r2
 8002b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b6e:	2b10      	cmp	r3, #16
 8002b70:	d007      	beq.n	8002b82 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b8c:	2b40      	cmp	r3, #64	; 0x40
 8002b8e:	d04f      	beq.n	8002c30 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b96:	4313      	orrs	r3, r2
 8002b98:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002ba2:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6912      	ldr	r2, [r2, #16]
 8002ba8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002bac:	d003      	beq.n	8002bb6 <HAL_ADC_Init+0x136>
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6912      	ldr	r2, [r2, #16]
 8002bb2:	2a01      	cmp	r2, #1
 8002bb4:	d102      	bne.n	8002bbc <HAL_ADC_Init+0x13c>
 8002bb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bba:	e000      	b.n	8002bbe <HAL_ADC_Init+0x13e>
 8002bbc:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8002bbe:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d125      	bne.n	8002c1c <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d114      	bne.n	8002c04 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	3b01      	subs	r3, #1
 8002be0:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8002be4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	fa92 f2a2 	rbit	r2, r2
 8002bec:	617a      	str	r2, [r7, #20]
  return result;
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	fab2 f282 	clz	r2, r2
 8002bf4:	b2d2      	uxtb	r2, r2
 8002bf6:	4093      	lsls	r3, r2
 8002bf8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002bfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	633b      	str	r3, [r7, #48]	; 0x30
 8002c02:	e00b      	b.n	8002c1c <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c08:	f043 0220 	orr.w	r2, r3, #32
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c14:	f043 0201 	orr.w	r2, r3, #1
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	4b37      	ldr	r3, [pc, #220]	; (8002d00 <HAL_ADC_Init+0x280>)
 8002c24:	4013      	ands	r3, r2
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	6812      	ldr	r2, [r2, #0]
 8002c2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c2c:	430b      	orrs	r3, r1
 8002c2e:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689a      	ldr	r2, [r3, #8]
 8002c36:	4b33      	ldr	r3, [pc, #204]	; (8002d04 <HAL_ADC_Init+0x284>)
 8002c38:	4013      	ands	r3, r2
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	6812      	ldr	r2, [r2, #0]
 8002c3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c40:	430b      	orrs	r3, r1
 8002c42:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c4c:	d003      	beq.n	8002c56 <HAL_ADC_Init+0x1d6>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d119      	bne.n	8002c8a <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5c:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c64:	3b01      	subs	r3, #1
 8002c66:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8002c6a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	fa92 f2a2 	rbit	r2, r2
 8002c72:	60fa      	str	r2, [r7, #12]
  return result;
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	fab2 f282 	clz	r2, r2
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	fa03 f202 	lsl.w	r2, r3, r2
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	631a      	str	r2, [r3, #48]	; 0x30
 8002c88:	e007      	b.n	8002c9a <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8002c98:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	4b19      	ldr	r3, [pc, #100]	; (8002d08 <HAL_ADC_Init+0x288>)
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d10b      	bne.n	8002cc2 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb4:	f023 0303 	bic.w	r3, r3, #3
 8002cb8:	f043 0201 	orr.w	r2, r3, #1
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	64da      	str	r2, [r3, #76]	; 0x4c
 8002cc0:	e014      	b.n	8002cec <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc6:	f023 0312 	bic.w	r3, r3, #18
 8002cca:	f043 0210 	orr.w	r2, r3, #16
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cd6:	f043 0201 	orr.w	r2, r3, #1
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002ce4:	e002      	b.n	8002cec <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002cec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3738      	adds	r7, #56	; 0x38
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	40012700 	.word	0x40012700
 8002d00:	fcfc16ff 	.word	0xfcfc16ff
 8002d04:	c0fff189 	.word	0xc0fff189
 8002d08:	bf80fffe 	.word	0xbf80fffe

08002d0c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d16:	2300      	movs	r3, #0
 8002d18:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d101      	bne.n	8002d2c <HAL_ADC_ConfigChannel+0x20>
 8002d28:	2302      	movs	r3, #2
 8002d2a:	e134      	b.n	8002f96 <HAL_ADC_ConfigChannel+0x28a>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	2b06      	cmp	r3, #6
 8002d3a:	d81c      	bhi.n	8002d76 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	4613      	mov	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3b05      	subs	r3, #5
 8002d4e:	221f      	movs	r2, #31
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	43db      	mvns	r3, r3
 8002d56:	4019      	ands	r1, r3
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	6818      	ldr	r0, [r3, #0]
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	4613      	mov	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4413      	add	r3, r2
 8002d66:	3b05      	subs	r3, #5
 8002d68:	fa00 f203 	lsl.w	r2, r0, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	641a      	str	r2, [r3, #64]	; 0x40
 8002d74:	e07e      	b.n	8002e74 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2b0c      	cmp	r3, #12
 8002d7c:	d81c      	bhi.n	8002db8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685a      	ldr	r2, [r3, #4]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	3b23      	subs	r3, #35	; 0x23
 8002d90:	221f      	movs	r2, #31
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	43db      	mvns	r3, r3
 8002d98:	4019      	ands	r1, r3
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	6818      	ldr	r0, [r3, #0]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	4613      	mov	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4413      	add	r3, r2
 8002da8:	3b23      	subs	r3, #35	; 0x23
 8002daa:	fa00 f203 	lsl.w	r2, r0, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	63da      	str	r2, [r3, #60]	; 0x3c
 8002db6:	e05d      	b.n	8002e74 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	2b12      	cmp	r3, #18
 8002dbe:	d81c      	bhi.n	8002dfa <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	3b41      	subs	r3, #65	; 0x41
 8002dd2:	221f      	movs	r2, #31
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	4019      	ands	r1, r3
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	6818      	ldr	r0, [r3, #0]
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685a      	ldr	r2, [r3, #4]
 8002de4:	4613      	mov	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	3b41      	subs	r3, #65	; 0x41
 8002dec:	fa00 f203 	lsl.w	r2, r0, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	639a      	str	r2, [r3, #56]	; 0x38
 8002df8:	e03c      	b.n	8002e74 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2b18      	cmp	r3, #24
 8002e00:	d81c      	bhi.n	8002e3c <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	3b5f      	subs	r3, #95	; 0x5f
 8002e14:	221f      	movs	r2, #31
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	4019      	ands	r1, r3
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	6818      	ldr	r0, [r3, #0]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	4613      	mov	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	4413      	add	r3, r2
 8002e2c:	3b5f      	subs	r3, #95	; 0x5f
 8002e2e:	fa00 f203 	lsl.w	r2, r0, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	635a      	str	r2, [r3, #52]	; 0x34
 8002e3a:	e01b      	b.n	8002e74 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	4613      	mov	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	3b7d      	subs	r3, #125	; 0x7d
 8002e4e:	221f      	movs	r2, #31
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	43db      	mvns	r3, r3
 8002e56:	4019      	ands	r1, r3
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	6818      	ldr	r0, [r3, #0]
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	4613      	mov	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	3b7d      	subs	r3, #125	; 0x7d
 8002e68:	fa00 f203 	lsl.w	r2, r0, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2b09      	cmp	r3, #9
 8002e7a:	d81a      	bhi.n	8002eb2 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6959      	ldr	r1, [r3, #20]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	4613      	mov	r3, r2
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	4413      	add	r3, r2
 8002e8c:	2207      	movs	r2, #7
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	43db      	mvns	r3, r3
 8002e94:	4019      	ands	r1, r3
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	6898      	ldr	r0, [r3, #8]
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	4413      	add	r3, r2
 8002ea4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	615a      	str	r2, [r3, #20]
 8002eb0:	e042      	b.n	8002f38 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2b13      	cmp	r3, #19
 8002eb8:	d81c      	bhi.n	8002ef4 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6919      	ldr	r1, [r3, #16]
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	4413      	add	r3, r2
 8002eca:	3b1e      	subs	r3, #30
 8002ecc:	2207      	movs	r2, #7
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	4019      	ands	r1, r3
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	6898      	ldr	r0, [r3, #8]
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	4413      	add	r3, r2
 8002ee4:	3b1e      	subs	r3, #30
 8002ee6:	fa00 f203 	lsl.w	r2, r0, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	611a      	str	r2, [r3, #16]
 8002ef2:	e021      	b.n	8002f38 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2b1a      	cmp	r3, #26
 8002efa:	d81c      	bhi.n	8002f36 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68d9      	ldr	r1, [r3, #12]
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	4613      	mov	r3, r2
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	4413      	add	r3, r2
 8002f0c:	3b3c      	subs	r3, #60	; 0x3c
 8002f0e:	2207      	movs	r2, #7
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	43db      	mvns	r3, r3
 8002f16:	4019      	ands	r1, r3
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	6898      	ldr	r0, [r3, #8]
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	4613      	mov	r3, r2
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	4413      	add	r3, r2
 8002f26:	3b3c      	subs	r3, #60	; 0x3c
 8002f28:	fa00 f203 	lsl.w	r2, r0, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	60da      	str	r2, [r3, #12]
 8002f34:	e000      	b.n	8002f38 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8002f36:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2b10      	cmp	r3, #16
 8002f3e:	d003      	beq.n	8002f48 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002f44:	2b11      	cmp	r3, #17
 8002f46:	d121      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8002f48:	4b15      	ldr	r3, [pc, #84]	; (8002fa0 <HAL_ADC_ConfigChannel+0x294>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d11b      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8002f54:	4b12      	ldr	r3, [pc, #72]	; (8002fa0 <HAL_ADC_ConfigChannel+0x294>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	4a11      	ldr	r2, [pc, #68]	; (8002fa0 <HAL_ADC_ConfigChannel+0x294>)
 8002f5a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f5e:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b10      	cmp	r3, #16
 8002f66:	d111      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002f68:	4b0e      	ldr	r3, [pc, #56]	; (8002fa4 <HAL_ADC_ConfigChannel+0x298>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a0e      	ldr	r2, [pc, #56]	; (8002fa8 <HAL_ADC_ConfigChannel+0x29c>)
 8002f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f72:	0c9a      	lsrs	r2, r3, #18
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002f7e:	e002      	b.n	8002f86 <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	3b01      	subs	r3, #1
 8002f84:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1f9      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8002f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bc80      	pop	{r7}
 8002f9e:	4770      	bx	lr
 8002fa0:	40012700 	.word	0x40012700
 8002fa4:	20000000 	.word	0x20000000
 8002fa8:	431bde83 	.word	0x431bde83

08002fac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fbc:	4b0c      	ldr	r3, [pc, #48]	; (8002ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fc8:	4013      	ands	r3, r2
 8002fca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fde:	4a04      	ldr	r2, [pc, #16]	; (8002ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	60d3      	str	r3, [r2, #12]
}
 8002fe4:	bf00      	nop
 8002fe6:	3714      	adds	r7, #20
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bc80      	pop	{r7}
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	e000ed00 	.word	0xe000ed00

08002ff4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ff8:	4b04      	ldr	r3, [pc, #16]	; (800300c <__NVIC_GetPriorityGrouping+0x18>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	0a1b      	lsrs	r3, r3, #8
 8002ffe:	f003 0307 	and.w	r3, r3, #7
}
 8003002:	4618      	mov	r0, r3
 8003004:	46bd      	mov	sp, r7
 8003006:	bc80      	pop	{r7}
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	e000ed00 	.word	0xe000ed00

08003010 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800301a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301e:	2b00      	cmp	r3, #0
 8003020:	db0b      	blt.n	800303a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003022:	79fb      	ldrb	r3, [r7, #7]
 8003024:	f003 021f 	and.w	r2, r3, #31
 8003028:	4906      	ldr	r1, [pc, #24]	; (8003044 <__NVIC_EnableIRQ+0x34>)
 800302a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302e:	095b      	lsrs	r3, r3, #5
 8003030:	2001      	movs	r0, #1
 8003032:	fa00 f202 	lsl.w	r2, r0, r2
 8003036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr
 8003044:	e000e100 	.word	0xe000e100

08003048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	6039      	str	r1, [r7, #0]
 8003052:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003058:	2b00      	cmp	r3, #0
 800305a:	db0a      	blt.n	8003072 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	b2da      	uxtb	r2, r3
 8003060:	490c      	ldr	r1, [pc, #48]	; (8003094 <__NVIC_SetPriority+0x4c>)
 8003062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003066:	0112      	lsls	r2, r2, #4
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	440b      	add	r3, r1
 800306c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003070:	e00a      	b.n	8003088 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	b2da      	uxtb	r2, r3
 8003076:	4908      	ldr	r1, [pc, #32]	; (8003098 <__NVIC_SetPriority+0x50>)
 8003078:	79fb      	ldrb	r3, [r7, #7]
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	3b04      	subs	r3, #4
 8003080:	0112      	lsls	r2, r2, #4
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	440b      	add	r3, r1
 8003086:	761a      	strb	r2, [r3, #24]
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	bc80      	pop	{r7}
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	e000e100 	.word	0xe000e100
 8003098:	e000ed00 	.word	0xe000ed00

0800309c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800309c:	b480      	push	{r7}
 800309e:	b089      	sub	sp, #36	; 0x24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	f1c3 0307 	rsb	r3, r3, #7
 80030b6:	2b04      	cmp	r3, #4
 80030b8:	bf28      	it	cs
 80030ba:	2304      	movcs	r3, #4
 80030bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	3304      	adds	r3, #4
 80030c2:	2b06      	cmp	r3, #6
 80030c4:	d902      	bls.n	80030cc <NVIC_EncodePriority+0x30>
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	3b03      	subs	r3, #3
 80030ca:	e000      	b.n	80030ce <NVIC_EncodePriority+0x32>
 80030cc:	2300      	movs	r3, #0
 80030ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d0:	f04f 32ff 	mov.w	r2, #4294967295
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	43da      	mvns	r2, r3
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	401a      	ands	r2, r3
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030e4:	f04f 31ff 	mov.w	r1, #4294967295
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	fa01 f303 	lsl.w	r3, r1, r3
 80030ee:	43d9      	mvns	r1, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030f4:	4313      	orrs	r3, r2
         );
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3724      	adds	r7, #36	; 0x24
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bc80      	pop	{r7}
 80030fe:	4770      	bx	lr

08003100 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	3b01      	subs	r3, #1
 800310c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003110:	d301      	bcc.n	8003116 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003112:	2301      	movs	r3, #1
 8003114:	e00f      	b.n	8003136 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003116:	4a0a      	ldr	r2, [pc, #40]	; (8003140 <SysTick_Config+0x40>)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3b01      	subs	r3, #1
 800311c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800311e:	210f      	movs	r1, #15
 8003120:	f04f 30ff 	mov.w	r0, #4294967295
 8003124:	f7ff ff90 	bl	8003048 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003128:	4b05      	ldr	r3, [pc, #20]	; (8003140 <SysTick_Config+0x40>)
 800312a:	2200      	movs	r2, #0
 800312c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800312e:	4b04      	ldr	r3, [pc, #16]	; (8003140 <SysTick_Config+0x40>)
 8003130:	2207      	movs	r2, #7
 8003132:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	e000e010 	.word	0xe000e010

08003144 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f7ff ff2d 	bl	8002fac <__NVIC_SetPriorityGrouping>
}
 8003152:	bf00      	nop
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b086      	sub	sp, #24
 800315e:	af00      	add	r7, sp, #0
 8003160:	4603      	mov	r3, r0
 8003162:	60b9      	str	r1, [r7, #8]
 8003164:	607a      	str	r2, [r7, #4]
 8003166:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003168:	2300      	movs	r3, #0
 800316a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800316c:	f7ff ff42 	bl	8002ff4 <__NVIC_GetPriorityGrouping>
 8003170:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	68b9      	ldr	r1, [r7, #8]
 8003176:	6978      	ldr	r0, [r7, #20]
 8003178:	f7ff ff90 	bl	800309c <NVIC_EncodePriority>
 800317c:	4602      	mov	r2, r0
 800317e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003182:	4611      	mov	r1, r2
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff ff5f 	bl	8003048 <__NVIC_SetPriority>
}
 800318a:	bf00      	nop
 800318c:	3718      	adds	r7, #24
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b082      	sub	sp, #8
 8003196:	af00      	add	r7, sp, #0
 8003198:	4603      	mov	r3, r0
 800319a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800319c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff ff35 	bl	8003010 <__NVIC_EnableIRQ>
}
 80031a6:	bf00      	nop
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b082      	sub	sp, #8
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7ff ffa2 	bl	8003100 <SysTick_Config>
 80031bc:	4603      	mov	r3, r0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b085      	sub	sp, #20
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031ce:	2300      	movs	r3, #0
 80031d0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d008      	beq.n	80031f0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2204      	movs	r2, #4
 80031e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e022      	b.n	8003236 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 020e 	bic.w	r2, r2, #14
 80031fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 0201 	bic.w	r2, r2, #1
 800320e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003214:	f003 021c 	and.w	r2, r3, #28
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321c:	2101      	movs	r1, #1
 800321e:	fa01 f202 	lsl.w	r2, r1, r2
 8003222:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8003234:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003236:	4618      	mov	r0, r3
 8003238:	3714      	adds	r7, #20
 800323a:	46bd      	mov	sp, r7
 800323c:	bc80      	pop	{r7}
 800323e:	4770      	bx	lr

08003240 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003248:	2300      	movs	r3, #0
 800324a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d005      	beq.n	8003264 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2204      	movs	r2, #4
 800325c:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	73fb      	strb	r3, [r7, #15]
 8003262:	e029      	b.n	80032b8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 020e 	bic.w	r2, r2, #14
 8003272:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 0201 	bic.w	r2, r2, #1
 8003282:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003288:	f003 021c 	and.w	r2, r3, #28
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003290:	2101      	movs	r1, #1
 8003292:	fa01 f202 	lsl.w	r2, r1, r2
 8003296:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d003      	beq.n	80032b8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	4798      	blx	r3
    }
  }
  return status;
 80032b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
	...

080032c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b087      	sub	sp, #28
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80032ce:	2300      	movs	r3, #0
 80032d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80032d2:	2300      	movs	r3, #0
 80032d4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80032d6:	2300      	movs	r3, #0
 80032d8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80032da:	e154      	b.n	8003586 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	2101      	movs	r1, #1
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	fa01 f303 	lsl.w	r3, r1, r3
 80032e8:	4013      	ands	r3, r2
 80032ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f000 8146 	beq.w	8003580 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f003 0303 	and.w	r3, r3, #3
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d005      	beq.n	800330c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003308:	2b02      	cmp	r3, #2
 800330a:	d130      	bne.n	800336e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	2203      	movs	r2, #3
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	43db      	mvns	r3, r3
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	4013      	ands	r3, r2
 8003322:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	68da      	ldr	r2, [r3, #12]
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	4313      	orrs	r3, r2
 8003334:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8003342:	2201      	movs	r2, #1
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	43db      	mvns	r3, r3
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	4013      	ands	r3, r2
 8003350:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	091b      	lsrs	r3, r3, #4
 8003358:	f003 0201 	and.w	r2, r3, #1
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	4313      	orrs	r3, r2
 8003366:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	2b03      	cmp	r3, #3
 8003378:	d017      	beq.n	80033aa <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	2203      	movs	r2, #3
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	43db      	mvns	r3, r3
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	4013      	ands	r3, r2
 8003390:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	689a      	ldr	r2, [r3, #8]
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	fa02 f303 	lsl.w	r3, r2, r3
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f003 0303 	and.w	r3, r3, #3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d123      	bne.n	80033fe <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	08da      	lsrs	r2, r3, #3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	3208      	adds	r2, #8
 80033be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033c2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	f003 0307 	and.w	r3, r3, #7
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	220f      	movs	r2, #15
 80033ce:	fa02 f303 	lsl.w	r3, r2, r3
 80033d2:	43db      	mvns	r3, r3
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	4013      	ands	r3, r2
 80033d8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	691a      	ldr	r2, [r3, #16]
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	f003 0307 	and.w	r3, r3, #7
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	08da      	lsrs	r2, r3, #3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	3208      	adds	r2, #8
 80033f8:	6939      	ldr	r1, [r7, #16]
 80033fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	2203      	movs	r2, #3
 800340a:	fa02 f303 	lsl.w	r3, r2, r3
 800340e:	43db      	mvns	r3, r3
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	4013      	ands	r3, r2
 8003414:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f003 0203 	and.w	r2, r3, #3
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	4313      	orrs	r3, r2
 800342a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 80a0 	beq.w	8003580 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003440:	4b58      	ldr	r3, [pc, #352]	; (80035a4 <HAL_GPIO_Init+0x2e0>)
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	4a57      	ldr	r2, [pc, #348]	; (80035a4 <HAL_GPIO_Init+0x2e0>)
 8003446:	f043 0301 	orr.w	r3, r3, #1
 800344a:	6213      	str	r3, [r2, #32]
 800344c:	4b55      	ldr	r3, [pc, #340]	; (80035a4 <HAL_GPIO_Init+0x2e0>)
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	60bb      	str	r3, [r7, #8]
 8003456:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8003458:	4a53      	ldr	r2, [pc, #332]	; (80035a8 <HAL_GPIO_Init+0x2e4>)
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	089b      	lsrs	r3, r3, #2
 800345e:	3302      	adds	r3, #2
 8003460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003464:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f003 0303 	and.w	r3, r3, #3
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	220f      	movs	r2, #15
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	43db      	mvns	r3, r3
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	4013      	ands	r3, r2
 800347a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a4b      	ldr	r2, [pc, #300]	; (80035ac <HAL_GPIO_Init+0x2e8>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d019      	beq.n	80034b8 <HAL_GPIO_Init+0x1f4>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a4a      	ldr	r2, [pc, #296]	; (80035b0 <HAL_GPIO_Init+0x2ec>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d013      	beq.n	80034b4 <HAL_GPIO_Init+0x1f0>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a49      	ldr	r2, [pc, #292]	; (80035b4 <HAL_GPIO_Init+0x2f0>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d00d      	beq.n	80034b0 <HAL_GPIO_Init+0x1ec>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a48      	ldr	r2, [pc, #288]	; (80035b8 <HAL_GPIO_Init+0x2f4>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d007      	beq.n	80034ac <HAL_GPIO_Init+0x1e8>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a47      	ldr	r2, [pc, #284]	; (80035bc <HAL_GPIO_Init+0x2f8>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d101      	bne.n	80034a8 <HAL_GPIO_Init+0x1e4>
 80034a4:	2304      	movs	r3, #4
 80034a6:	e008      	b.n	80034ba <HAL_GPIO_Init+0x1f6>
 80034a8:	2305      	movs	r3, #5
 80034aa:	e006      	b.n	80034ba <HAL_GPIO_Init+0x1f6>
 80034ac:	2303      	movs	r3, #3
 80034ae:	e004      	b.n	80034ba <HAL_GPIO_Init+0x1f6>
 80034b0:	2302      	movs	r3, #2
 80034b2:	e002      	b.n	80034ba <HAL_GPIO_Init+0x1f6>
 80034b4:	2301      	movs	r3, #1
 80034b6:	e000      	b.n	80034ba <HAL_GPIO_Init+0x1f6>
 80034b8:	2300      	movs	r3, #0
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	f002 0203 	and.w	r2, r2, #3
 80034c0:	0092      	lsls	r2, r2, #2
 80034c2:	4093      	lsls	r3, r2
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80034ca:	4937      	ldr	r1, [pc, #220]	; (80035a8 <HAL_GPIO_Init+0x2e4>)
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	089b      	lsrs	r3, r3, #2
 80034d0:	3302      	adds	r3, #2
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034d8:	4b39      	ldr	r3, [pc, #228]	; (80035c0 <HAL_GPIO_Init+0x2fc>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	43db      	mvns	r3, r3
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	4013      	ands	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80034fc:	4a30      	ldr	r2, [pc, #192]	; (80035c0 <HAL_GPIO_Init+0x2fc>)
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003502:	4b2f      	ldr	r3, [pc, #188]	; (80035c0 <HAL_GPIO_Init+0x2fc>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	43db      	mvns	r3, r3
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	4013      	ands	r3, r2
 8003510:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	4313      	orrs	r3, r2
 8003524:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003526:	4a26      	ldr	r2, [pc, #152]	; (80035c0 <HAL_GPIO_Init+0x2fc>)
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800352c:	4b24      	ldr	r3, [pc, #144]	; (80035c0 <HAL_GPIO_Init+0x2fc>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	43db      	mvns	r3, r3
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	4013      	ands	r3, r2
 800353a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	4313      	orrs	r3, r2
 800354e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003550:	4a1b      	ldr	r2, [pc, #108]	; (80035c0 <HAL_GPIO_Init+0x2fc>)
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003556:	4b1a      	ldr	r3, [pc, #104]	; (80035c0 <HAL_GPIO_Init+0x2fc>)
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	43db      	mvns	r3, r3
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	4013      	ands	r3, r2
 8003564:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d003      	beq.n	800357a <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4313      	orrs	r3, r2
 8003578:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800357a:	4a11      	ldr	r2, [pc, #68]	; (80035c0 <HAL_GPIO_Init+0x2fc>)
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	3301      	adds	r3, #1
 8003584:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	fa22 f303 	lsr.w	r3, r2, r3
 8003590:	2b00      	cmp	r3, #0
 8003592:	f47f aea3 	bne.w	80032dc <HAL_GPIO_Init+0x18>
  }
}
 8003596:	bf00      	nop
 8003598:	bf00      	nop
 800359a:	371c      	adds	r7, #28
 800359c:	46bd      	mov	sp, r7
 800359e:	bc80      	pop	{r7}
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	40023800 	.word	0x40023800
 80035a8:	40010000 	.word	0x40010000
 80035ac:	40020000 	.word	0x40020000
 80035b0:	40020400 	.word	0x40020400
 80035b4:	40020800 	.word	0x40020800
 80035b8:	40020c00 	.word	0x40020c00
 80035bc:	40021000 	.word	0x40021000
 80035c0:	40010400 	.word	0x40010400

080035c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	460b      	mov	r3, r1
 80035ce:	807b      	strh	r3, [r7, #2]
 80035d0:	4613      	mov	r3, r2
 80035d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035d4:	787b      	ldrb	r3, [r7, #1]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035da:	887a      	ldrh	r2, [r7, #2]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80035e0:	e003      	b.n	80035ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80035e2:	887b      	ldrh	r3, [r7, #2]
 80035e4:	041a      	lsls	r2, r3, #16
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	619a      	str	r2, [r3, #24]
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bc80      	pop	{r7}
 80035f2:	4770      	bx	lr

080035f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b088      	sub	sp, #32
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e31d      	b.n	8003c42 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003606:	4b94      	ldr	r3, [pc, #592]	; (8003858 <HAL_RCC_OscConfig+0x264>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 030c 	and.w	r3, r3, #12
 800360e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003610:	4b91      	ldr	r3, [pc, #580]	; (8003858 <HAL_RCC_OscConfig+0x264>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003618:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	d07b      	beq.n	800371e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	2b08      	cmp	r3, #8
 800362a:	d006      	beq.n	800363a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	2b0c      	cmp	r3, #12
 8003630:	d10f      	bne.n	8003652 <HAL_RCC_OscConfig+0x5e>
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003638:	d10b      	bne.n	8003652 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800363a:	4b87      	ldr	r3, [pc, #540]	; (8003858 <HAL_RCC_OscConfig+0x264>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d06a      	beq.n	800371c <HAL_RCC_OscConfig+0x128>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d166      	bne.n	800371c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e2f7      	b.n	8003c42 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d106      	bne.n	8003668 <HAL_RCC_OscConfig+0x74>
 800365a:	4b7f      	ldr	r3, [pc, #508]	; (8003858 <HAL_RCC_OscConfig+0x264>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a7e      	ldr	r2, [pc, #504]	; (8003858 <HAL_RCC_OscConfig+0x264>)
 8003660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003664:	6013      	str	r3, [r2, #0]
 8003666:	e02d      	b.n	80036c4 <HAL_RCC_OscConfig+0xd0>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10c      	bne.n	800368a <HAL_RCC_OscConfig+0x96>
 8003670:	4b79      	ldr	r3, [pc, #484]	; (8003858 <HAL_RCC_OscConfig+0x264>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a78      	ldr	r2, [pc, #480]	; (8003858 <HAL_RCC_OscConfig+0x264>)
 8003676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800367a:	6013      	str	r3, [r2, #0]
 800367c:	4b76      	ldr	r3, [pc, #472]	; (8003858 <HAL_RCC_OscConfig+0x264>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a75      	ldr	r2, [pc, #468]	; (8003858 <HAL_RCC_OscConfig+0x264>)
 8003682:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003686:	6013      	str	r3, [r2, #0]
 8003688:	e01c      	b.n	80036c4 <HAL_RCC_OscConfig+0xd0>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	2b05      	cmp	r3, #5
 8003690:	d10c      	bne.n	80036ac <HAL_RCC_OscConfig+0xb8>
 8003692:	4b71      	ldr	r3, [pc, #452]	; (8003858 <HAL_RCC_OscConfig+0x264>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a70      	ldr	r2, [pc, #448]	; (8003858 <HAL_RCC_OscConfig+0x264>)
 8003698:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800369c:	6013      	str	r3, [r2, #0]
 800369e:	4b6e      	ldr	r3, [pc, #440]	; (8003858 <HAL_RCC_OscConfig+0x264>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a6d      	ldr	r2, [pc, #436]	; (8003858 <HAL_RCC_OscConfig+0x264>)
 80036a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036a8:	6013      	str	r3, [r2, #0]
 80036aa:	e00b      	b.n	80036c4 <HAL_RCC_OscConfig+0xd0>
 80036ac:	4b6a      	ldr	r3, [pc, #424]	; (8003858 <HAL_RCC_OscConfig+0x264>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a69      	ldr	r2, [pc, #420]	; (8003858 <HAL_RCC_OscConfig+0x264>)
 80036b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036b6:	6013      	str	r3, [r2, #0]
 80036b8:	4b67      	ldr	r3, [pc, #412]	; (8003858 <HAL_RCC_OscConfig+0x264>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a66      	ldr	r2, [pc, #408]	; (8003858 <HAL_RCC_OscConfig+0x264>)
 80036be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d013      	beq.n	80036f4 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036cc:	f7ff f9ce 	bl	8002a6c <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036d4:	f7ff f9ca 	bl	8002a6c <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b64      	cmp	r3, #100	; 0x64
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e2ad      	b.n	8003c42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036e6:	4b5c      	ldr	r3, [pc, #368]	; (8003858 <HAL_RCC_OscConfig+0x264>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0f0      	beq.n	80036d4 <HAL_RCC_OscConfig+0xe0>
 80036f2:	e014      	b.n	800371e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f4:	f7ff f9ba 	bl	8002a6c <HAL_GetTick>
 80036f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80036fa:	e008      	b.n	800370e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036fc:	f7ff f9b6 	bl	8002a6c <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b64      	cmp	r3, #100	; 0x64
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e299      	b.n	8003c42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800370e:	4b52      	ldr	r3, [pc, #328]	; (8003858 <HAL_RCC_OscConfig+0x264>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1f0      	bne.n	80036fc <HAL_RCC_OscConfig+0x108>
 800371a:	e000      	b.n	800371e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800371c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d05a      	beq.n	80037e0 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	2b04      	cmp	r3, #4
 800372e:	d005      	beq.n	800373c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	2b0c      	cmp	r3, #12
 8003734:	d119      	bne.n	800376a <HAL_RCC_OscConfig+0x176>
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d116      	bne.n	800376a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800373c:	4b46      	ldr	r3, [pc, #280]	; (8003858 <HAL_RCC_OscConfig+0x264>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d005      	beq.n	8003754 <HAL_RCC_OscConfig+0x160>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d001      	beq.n	8003754 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e276      	b.n	8003c42 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003754:	4b40      	ldr	r3, [pc, #256]	; (8003858 <HAL_RCC_OscConfig+0x264>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	021b      	lsls	r3, r3, #8
 8003762:	493d      	ldr	r1, [pc, #244]	; (8003858 <HAL_RCC_OscConfig+0x264>)
 8003764:	4313      	orrs	r3, r2
 8003766:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003768:	e03a      	b.n	80037e0 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d020      	beq.n	80037b4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003772:	4b3a      	ldr	r3, [pc, #232]	; (800385c <HAL_RCC_OscConfig+0x268>)
 8003774:	2201      	movs	r2, #1
 8003776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003778:	f7ff f978 	bl	8002a6c <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003780:	f7ff f974 	bl	8002a6c <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e257      	b.n	8003c42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003792:	4b31      	ldr	r3, [pc, #196]	; (8003858 <HAL_RCC_OscConfig+0x264>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0f0      	beq.n	8003780 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800379e:	4b2e      	ldr	r3, [pc, #184]	; (8003858 <HAL_RCC_OscConfig+0x264>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	021b      	lsls	r3, r3, #8
 80037ac:	492a      	ldr	r1, [pc, #168]	; (8003858 <HAL_RCC_OscConfig+0x264>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	604b      	str	r3, [r1, #4]
 80037b2:	e015      	b.n	80037e0 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037b4:	4b29      	ldr	r3, [pc, #164]	; (800385c <HAL_RCC_OscConfig+0x268>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ba:	f7ff f957 	bl	8002a6c <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80037c0:	e008      	b.n	80037d4 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037c2:	f7ff f953 	bl	8002a6c <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e236      	b.n	8003c42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80037d4:	4b20      	ldr	r3, [pc, #128]	; (8003858 <HAL_RCC_OscConfig+0x264>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1f0      	bne.n	80037c2 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0310 	and.w	r3, r3, #16
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 80b8 	beq.w	800395e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d170      	bne.n	80038d6 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037f4:	4b18      	ldr	r3, [pc, #96]	; (8003858 <HAL_RCC_OscConfig+0x264>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d005      	beq.n	800380c <HAL_RCC_OscConfig+0x218>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e21a      	b.n	8003c42 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a1a      	ldr	r2, [r3, #32]
 8003810:	4b11      	ldr	r3, [pc, #68]	; (8003858 <HAL_RCC_OscConfig+0x264>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003818:	429a      	cmp	r2, r3
 800381a:	d921      	bls.n	8003860 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	4618      	mov	r0, r3
 8003822:	f000 fc7d 	bl	8004120 <RCC_SetFlashLatencyFromMSIRange>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e208      	b.n	8003c42 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003830:	4b09      	ldr	r3, [pc, #36]	; (8003858 <HAL_RCC_OscConfig+0x264>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	4906      	ldr	r1, [pc, #24]	; (8003858 <HAL_RCC_OscConfig+0x264>)
 800383e:	4313      	orrs	r3, r2
 8003840:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003842:	4b05      	ldr	r3, [pc, #20]	; (8003858 <HAL_RCC_OscConfig+0x264>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	061b      	lsls	r3, r3, #24
 8003850:	4901      	ldr	r1, [pc, #4]	; (8003858 <HAL_RCC_OscConfig+0x264>)
 8003852:	4313      	orrs	r3, r2
 8003854:	604b      	str	r3, [r1, #4]
 8003856:	e020      	b.n	800389a <HAL_RCC_OscConfig+0x2a6>
 8003858:	40023800 	.word	0x40023800
 800385c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003860:	4b99      	ldr	r3, [pc, #612]	; (8003ac8 <HAL_RCC_OscConfig+0x4d4>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	4996      	ldr	r1, [pc, #600]	; (8003ac8 <HAL_RCC_OscConfig+0x4d4>)
 800386e:	4313      	orrs	r3, r2
 8003870:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003872:	4b95      	ldr	r3, [pc, #596]	; (8003ac8 <HAL_RCC_OscConfig+0x4d4>)
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	69db      	ldr	r3, [r3, #28]
 800387e:	061b      	lsls	r3, r3, #24
 8003880:	4991      	ldr	r1, [pc, #580]	; (8003ac8 <HAL_RCC_OscConfig+0x4d4>)
 8003882:	4313      	orrs	r3, r2
 8003884:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	4618      	mov	r0, r3
 800388c:	f000 fc48 	bl	8004120 <RCC_SetFlashLatencyFromMSIRange>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e1d3      	b.n	8003c42 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	0b5b      	lsrs	r3, r3, #13
 80038a0:	3301      	adds	r3, #1
 80038a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80038a6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80038aa:	4a87      	ldr	r2, [pc, #540]	; (8003ac8 <HAL_RCC_OscConfig+0x4d4>)
 80038ac:	6892      	ldr	r2, [r2, #8]
 80038ae:	0912      	lsrs	r2, r2, #4
 80038b0:	f002 020f 	and.w	r2, r2, #15
 80038b4:	4985      	ldr	r1, [pc, #532]	; (8003acc <HAL_RCC_OscConfig+0x4d8>)
 80038b6:	5c8a      	ldrb	r2, [r1, r2]
 80038b8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80038ba:	4a85      	ldr	r2, [pc, #532]	; (8003ad0 <HAL_RCC_OscConfig+0x4dc>)
 80038bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80038be:	4b85      	ldr	r3, [pc, #532]	; (8003ad4 <HAL_RCC_OscConfig+0x4e0>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7ff f886 	bl	80029d4 <HAL_InitTick>
 80038c8:	4603      	mov	r3, r0
 80038ca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80038cc:	7bfb      	ldrb	r3, [r7, #15]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d045      	beq.n	800395e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80038d2:	7bfb      	ldrb	r3, [r7, #15]
 80038d4:	e1b5      	b.n	8003c42 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d029      	beq.n	8003932 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80038de:	4b7e      	ldr	r3, [pc, #504]	; (8003ad8 <HAL_RCC_OscConfig+0x4e4>)
 80038e0:	2201      	movs	r2, #1
 80038e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e4:	f7ff f8c2 	bl	8002a6c <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038ec:	f7ff f8be 	bl	8002a6c <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e1a1      	b.n	8003c42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80038fe:	4b72      	ldr	r3, [pc, #456]	; (8003ac8 <HAL_RCC_OscConfig+0x4d4>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003906:	2b00      	cmp	r3, #0
 8003908:	d0f0      	beq.n	80038ec <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800390a:	4b6f      	ldr	r3, [pc, #444]	; (8003ac8 <HAL_RCC_OscConfig+0x4d4>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	496c      	ldr	r1, [pc, #432]	; (8003ac8 <HAL_RCC_OscConfig+0x4d4>)
 8003918:	4313      	orrs	r3, r2
 800391a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800391c:	4b6a      	ldr	r3, [pc, #424]	; (8003ac8 <HAL_RCC_OscConfig+0x4d4>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	69db      	ldr	r3, [r3, #28]
 8003928:	061b      	lsls	r3, r3, #24
 800392a:	4967      	ldr	r1, [pc, #412]	; (8003ac8 <HAL_RCC_OscConfig+0x4d4>)
 800392c:	4313      	orrs	r3, r2
 800392e:	604b      	str	r3, [r1, #4]
 8003930:	e015      	b.n	800395e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003932:	4b69      	ldr	r3, [pc, #420]	; (8003ad8 <HAL_RCC_OscConfig+0x4e4>)
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003938:	f7ff f898 	bl	8002a6c <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003940:	f7ff f894 	bl	8002a6c <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e177      	b.n	8003c42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003952:	4b5d      	ldr	r3, [pc, #372]	; (8003ac8 <HAL_RCC_OscConfig+0x4d4>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1f0      	bne.n	8003940 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0308 	and.w	r3, r3, #8
 8003966:	2b00      	cmp	r3, #0
 8003968:	d030      	beq.n	80039cc <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d016      	beq.n	80039a0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003972:	4b5a      	ldr	r3, [pc, #360]	; (8003adc <HAL_RCC_OscConfig+0x4e8>)
 8003974:	2201      	movs	r2, #1
 8003976:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003978:	f7ff f878 	bl	8002a6c <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800397e:	e008      	b.n	8003992 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003980:	f7ff f874 	bl	8002a6c <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e157      	b.n	8003c42 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003992:	4b4d      	ldr	r3, [pc, #308]	; (8003ac8 <HAL_RCC_OscConfig+0x4d4>)
 8003994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0f0      	beq.n	8003980 <HAL_RCC_OscConfig+0x38c>
 800399e:	e015      	b.n	80039cc <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039a0:	4b4e      	ldr	r3, [pc, #312]	; (8003adc <HAL_RCC_OscConfig+0x4e8>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039a6:	f7ff f861 	bl	8002a6c <HAL_GetTick>
 80039aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80039ac:	e008      	b.n	80039c0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039ae:	f7ff f85d 	bl	8002a6c <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e140      	b.n	8003c42 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80039c0:	4b41      	ldr	r3, [pc, #260]	; (8003ac8 <HAL_RCC_OscConfig+0x4d4>)
 80039c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1f0      	bne.n	80039ae <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f000 80b5 	beq.w	8003b44 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039da:	2300      	movs	r3, #0
 80039dc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039de:	4b3a      	ldr	r3, [pc, #232]	; (8003ac8 <HAL_RCC_OscConfig+0x4d4>)
 80039e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10d      	bne.n	8003a06 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ea:	4b37      	ldr	r3, [pc, #220]	; (8003ac8 <HAL_RCC_OscConfig+0x4d4>)
 80039ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ee:	4a36      	ldr	r2, [pc, #216]	; (8003ac8 <HAL_RCC_OscConfig+0x4d4>)
 80039f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f4:	6253      	str	r3, [r2, #36]	; 0x24
 80039f6:	4b34      	ldr	r3, [pc, #208]	; (8003ac8 <HAL_RCC_OscConfig+0x4d4>)
 80039f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039fe:	60bb      	str	r3, [r7, #8]
 8003a00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a02:	2301      	movs	r3, #1
 8003a04:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a06:	4b36      	ldr	r3, [pc, #216]	; (8003ae0 <HAL_RCC_OscConfig+0x4ec>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d118      	bne.n	8003a44 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a12:	4b33      	ldr	r3, [pc, #204]	; (8003ae0 <HAL_RCC_OscConfig+0x4ec>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a32      	ldr	r2, [pc, #200]	; (8003ae0 <HAL_RCC_OscConfig+0x4ec>)
 8003a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a1e:	f7ff f825 	bl	8002a6c <HAL_GetTick>
 8003a22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a24:	e008      	b.n	8003a38 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a26:	f7ff f821 	bl	8002a6c <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b64      	cmp	r3, #100	; 0x64
 8003a32:	d901      	bls.n	8003a38 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e104      	b.n	8003c42 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a38:	4b29      	ldr	r3, [pc, #164]	; (8003ae0 <HAL_RCC_OscConfig+0x4ec>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d0f0      	beq.n	8003a26 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d106      	bne.n	8003a5a <HAL_RCC_OscConfig+0x466>
 8003a4c:	4b1e      	ldr	r3, [pc, #120]	; (8003ac8 <HAL_RCC_OscConfig+0x4d4>)
 8003a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a50:	4a1d      	ldr	r2, [pc, #116]	; (8003ac8 <HAL_RCC_OscConfig+0x4d4>)
 8003a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a56:	6353      	str	r3, [r2, #52]	; 0x34
 8003a58:	e02d      	b.n	8003ab6 <HAL_RCC_OscConfig+0x4c2>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10c      	bne.n	8003a7c <HAL_RCC_OscConfig+0x488>
 8003a62:	4b19      	ldr	r3, [pc, #100]	; (8003ac8 <HAL_RCC_OscConfig+0x4d4>)
 8003a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a66:	4a18      	ldr	r2, [pc, #96]	; (8003ac8 <HAL_RCC_OscConfig+0x4d4>)
 8003a68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a6c:	6353      	str	r3, [r2, #52]	; 0x34
 8003a6e:	4b16      	ldr	r3, [pc, #88]	; (8003ac8 <HAL_RCC_OscConfig+0x4d4>)
 8003a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a72:	4a15      	ldr	r2, [pc, #84]	; (8003ac8 <HAL_RCC_OscConfig+0x4d4>)
 8003a74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a78:	6353      	str	r3, [r2, #52]	; 0x34
 8003a7a:	e01c      	b.n	8003ab6 <HAL_RCC_OscConfig+0x4c2>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	2b05      	cmp	r3, #5
 8003a82:	d10c      	bne.n	8003a9e <HAL_RCC_OscConfig+0x4aa>
 8003a84:	4b10      	ldr	r3, [pc, #64]	; (8003ac8 <HAL_RCC_OscConfig+0x4d4>)
 8003a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a88:	4a0f      	ldr	r2, [pc, #60]	; (8003ac8 <HAL_RCC_OscConfig+0x4d4>)
 8003a8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a8e:	6353      	str	r3, [r2, #52]	; 0x34
 8003a90:	4b0d      	ldr	r3, [pc, #52]	; (8003ac8 <HAL_RCC_OscConfig+0x4d4>)
 8003a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a94:	4a0c      	ldr	r2, [pc, #48]	; (8003ac8 <HAL_RCC_OscConfig+0x4d4>)
 8003a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a9a:	6353      	str	r3, [r2, #52]	; 0x34
 8003a9c:	e00b      	b.n	8003ab6 <HAL_RCC_OscConfig+0x4c2>
 8003a9e:	4b0a      	ldr	r3, [pc, #40]	; (8003ac8 <HAL_RCC_OscConfig+0x4d4>)
 8003aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa2:	4a09      	ldr	r2, [pc, #36]	; (8003ac8 <HAL_RCC_OscConfig+0x4d4>)
 8003aa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003aa8:	6353      	str	r3, [r2, #52]	; 0x34
 8003aaa:	4b07      	ldr	r3, [pc, #28]	; (8003ac8 <HAL_RCC_OscConfig+0x4d4>)
 8003aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aae:	4a06      	ldr	r2, [pc, #24]	; (8003ac8 <HAL_RCC_OscConfig+0x4d4>)
 8003ab0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ab4:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d024      	beq.n	8003b08 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003abe:	f7fe ffd5 	bl	8002a6c <HAL_GetTick>
 8003ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ac4:	e019      	b.n	8003afa <HAL_RCC_OscConfig+0x506>
 8003ac6:	bf00      	nop
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	08005214 	.word	0x08005214
 8003ad0:	20000000 	.word	0x20000000
 8003ad4:	20000004 	.word	0x20000004
 8003ad8:	42470020 	.word	0x42470020
 8003adc:	42470680 	.word	0x42470680
 8003ae0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ae4:	f7fe ffc2 	bl	8002a6c <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e0a3      	b.n	8003c42 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003afa:	4b54      	ldr	r3, [pc, #336]	; (8003c4c <HAL_RCC_OscConfig+0x658>)
 8003afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003afe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d0ee      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x4f0>
 8003b06:	e014      	b.n	8003b32 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b08:	f7fe ffb0 	bl	8002a6c <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b0e:	e00a      	b.n	8003b26 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b10:	f7fe ffac 	bl	8002a6c <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e08d      	b.n	8003c42 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b26:	4b49      	ldr	r3, [pc, #292]	; (8003c4c <HAL_RCC_OscConfig+0x658>)
 8003b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1ee      	bne.n	8003b10 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b32:	7ffb      	ldrb	r3, [r7, #31]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d105      	bne.n	8003b44 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b38:	4b44      	ldr	r3, [pc, #272]	; (8003c4c <HAL_RCC_OscConfig+0x658>)
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	4a43      	ldr	r2, [pc, #268]	; (8003c4c <HAL_RCC_OscConfig+0x658>)
 8003b3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b42:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d079      	beq.n	8003c40 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	2b0c      	cmp	r3, #12
 8003b50:	d056      	beq.n	8003c00 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d13b      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b5a:	4b3d      	ldr	r3, [pc, #244]	; (8003c50 <HAL_RCC_OscConfig+0x65c>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b60:	f7fe ff84 	bl	8002a6c <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b66:	e008      	b.n	8003b7a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b68:	f7fe ff80 	bl	8002a6c <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e063      	b.n	8003c42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b7a:	4b34      	ldr	r3, [pc, #208]	; (8003c4c <HAL_RCC_OscConfig+0x658>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1f0      	bne.n	8003b68 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b86:	4b31      	ldr	r3, [pc, #196]	; (8003c4c <HAL_RCC_OscConfig+0x658>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b96:	4319      	orrs	r1, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9c:	430b      	orrs	r3, r1
 8003b9e:	492b      	ldr	r1, [pc, #172]	; (8003c4c <HAL_RCC_OscConfig+0x658>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ba4:	4b2a      	ldr	r3, [pc, #168]	; (8003c50 <HAL_RCC_OscConfig+0x65c>)
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003baa:	f7fe ff5f 	bl	8002a6c <HAL_GetTick>
 8003bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003bb0:	e008      	b.n	8003bc4 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bb2:	f7fe ff5b 	bl	8002a6c <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e03e      	b.n	8003c42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003bc4:	4b21      	ldr	r3, [pc, #132]	; (8003c4c <HAL_RCC_OscConfig+0x658>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0f0      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x5be>
 8003bd0:	e036      	b.n	8003c40 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bd2:	4b1f      	ldr	r3, [pc, #124]	; (8003c50 <HAL_RCC_OscConfig+0x65c>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd8:	f7fe ff48 	bl	8002a6c <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003bde:	e008      	b.n	8003bf2 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003be0:	f7fe ff44 	bl	8002a6c <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e027      	b.n	8003c42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003bf2:	4b16      	ldr	r3, [pc, #88]	; (8003c4c <HAL_RCC_OscConfig+0x658>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1f0      	bne.n	8003be0 <HAL_RCC_OscConfig+0x5ec>
 8003bfe:	e01f      	b.n	8003c40 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d101      	bne.n	8003c0c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e01a      	b.n	8003c42 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c0c:	4b0f      	ldr	r3, [pc, #60]	; (8003c4c <HAL_RCC_OscConfig+0x658>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d10d      	bne.n	8003c3c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d106      	bne.n	8003c3c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d001      	beq.n	8003c40 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e000      	b.n	8003c42 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3720      	adds	r7, #32
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	40023800 	.word	0x40023800
 8003c50:	42470060 	.word	0x42470060

08003c54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d101      	bne.n	8003c68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e11a      	b.n	8003e9e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c68:	4b8f      	ldr	r3, [pc, #572]	; (8003ea8 <HAL_RCC_ClockConfig+0x254>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d919      	bls.n	8003caa <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d105      	bne.n	8003c88 <HAL_RCC_ClockConfig+0x34>
 8003c7c:	4b8a      	ldr	r3, [pc, #552]	; (8003ea8 <HAL_RCC_ClockConfig+0x254>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a89      	ldr	r2, [pc, #548]	; (8003ea8 <HAL_RCC_ClockConfig+0x254>)
 8003c82:	f043 0304 	orr.w	r3, r3, #4
 8003c86:	6013      	str	r3, [r2, #0]
 8003c88:	4b87      	ldr	r3, [pc, #540]	; (8003ea8 <HAL_RCC_ClockConfig+0x254>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f023 0201 	bic.w	r2, r3, #1
 8003c90:	4985      	ldr	r1, [pc, #532]	; (8003ea8 <HAL_RCC_ClockConfig+0x254>)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c98:	4b83      	ldr	r3, [pc, #524]	; (8003ea8 <HAL_RCC_ClockConfig+0x254>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d001      	beq.n	8003caa <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e0f9      	b.n	8003e9e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d008      	beq.n	8003cc8 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cb6:	4b7d      	ldr	r3, [pc, #500]	; (8003eac <HAL_RCC_ClockConfig+0x258>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	497a      	ldr	r1, [pc, #488]	; (8003eac <HAL_RCC_ClockConfig+0x258>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 808e 	beq.w	8003df2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d107      	bne.n	8003cee <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003cde:	4b73      	ldr	r3, [pc, #460]	; (8003eac <HAL_RCC_ClockConfig+0x258>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d121      	bne.n	8003d2e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e0d7      	b.n	8003e9e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	2b03      	cmp	r3, #3
 8003cf4:	d107      	bne.n	8003d06 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003cf6:	4b6d      	ldr	r3, [pc, #436]	; (8003eac <HAL_RCC_ClockConfig+0x258>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d115      	bne.n	8003d2e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e0cb      	b.n	8003e9e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d107      	bne.n	8003d1e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d0e:	4b67      	ldr	r3, [pc, #412]	; (8003eac <HAL_RCC_ClockConfig+0x258>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d109      	bne.n	8003d2e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e0bf      	b.n	8003e9e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003d1e:	4b63      	ldr	r3, [pc, #396]	; (8003eac <HAL_RCC_ClockConfig+0x258>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e0b7      	b.n	8003e9e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d2e:	4b5f      	ldr	r3, [pc, #380]	; (8003eac <HAL_RCC_ClockConfig+0x258>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f023 0203 	bic.w	r2, r3, #3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	495c      	ldr	r1, [pc, #368]	; (8003eac <HAL_RCC_ClockConfig+0x258>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d40:	f7fe fe94 	bl	8002a6c <HAL_GetTick>
 8003d44:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d112      	bne.n	8003d74 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d4e:	e00a      	b.n	8003d66 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d50:	f7fe fe8c 	bl	8002a6c <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e09b      	b.n	8003e9e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d66:	4b51      	ldr	r3, [pc, #324]	; (8003eac <HAL_RCC_ClockConfig+0x258>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 030c 	and.w	r3, r3, #12
 8003d6e:	2b08      	cmp	r3, #8
 8003d70:	d1ee      	bne.n	8003d50 <HAL_RCC_ClockConfig+0xfc>
 8003d72:	e03e      	b.n	8003df2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	2b03      	cmp	r3, #3
 8003d7a:	d112      	bne.n	8003da2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d7c:	e00a      	b.n	8003d94 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d7e:	f7fe fe75 	bl	8002a6c <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e084      	b.n	8003e9e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d94:	4b45      	ldr	r3, [pc, #276]	; (8003eac <HAL_RCC_ClockConfig+0x258>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f003 030c 	and.w	r3, r3, #12
 8003d9c:	2b0c      	cmp	r3, #12
 8003d9e:	d1ee      	bne.n	8003d7e <HAL_RCC_ClockConfig+0x12a>
 8003da0:	e027      	b.n	8003df2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d11d      	bne.n	8003de6 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003daa:	e00a      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dac:	f7fe fe5e 	bl	8002a6c <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e06d      	b.n	8003e9e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003dc2:	4b3a      	ldr	r3, [pc, #232]	; (8003eac <HAL_RCC_ClockConfig+0x258>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f003 030c 	and.w	r3, r3, #12
 8003dca:	2b04      	cmp	r3, #4
 8003dcc:	d1ee      	bne.n	8003dac <HAL_RCC_ClockConfig+0x158>
 8003dce:	e010      	b.n	8003df2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dd0:	f7fe fe4c 	bl	8002a6c <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e05b      	b.n	8003e9e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003de6:	4b31      	ldr	r3, [pc, #196]	; (8003eac <HAL_RCC_ClockConfig+0x258>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f003 030c 	and.w	r3, r3, #12
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1ee      	bne.n	8003dd0 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003df2:	4b2d      	ldr	r3, [pc, #180]	; (8003ea8 <HAL_RCC_ClockConfig+0x254>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d219      	bcs.n	8003e34 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d105      	bne.n	8003e12 <HAL_RCC_ClockConfig+0x1be>
 8003e06:	4b28      	ldr	r3, [pc, #160]	; (8003ea8 <HAL_RCC_ClockConfig+0x254>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a27      	ldr	r2, [pc, #156]	; (8003ea8 <HAL_RCC_ClockConfig+0x254>)
 8003e0c:	f043 0304 	orr.w	r3, r3, #4
 8003e10:	6013      	str	r3, [r2, #0]
 8003e12:	4b25      	ldr	r3, [pc, #148]	; (8003ea8 <HAL_RCC_ClockConfig+0x254>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f023 0201 	bic.w	r2, r3, #1
 8003e1a:	4923      	ldr	r1, [pc, #140]	; (8003ea8 <HAL_RCC_ClockConfig+0x254>)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e22:	4b21      	ldr	r3, [pc, #132]	; (8003ea8 <HAL_RCC_ClockConfig+0x254>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d001      	beq.n	8003e34 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e034      	b.n	8003e9e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0304 	and.w	r3, r3, #4
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d008      	beq.n	8003e52 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e40:	4b1a      	ldr	r3, [pc, #104]	; (8003eac <HAL_RCC_ClockConfig+0x258>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	4917      	ldr	r1, [pc, #92]	; (8003eac <HAL_RCC_ClockConfig+0x258>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0308 	and.w	r3, r3, #8
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d009      	beq.n	8003e72 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e5e:	4b13      	ldr	r3, [pc, #76]	; (8003eac <HAL_RCC_ClockConfig+0x258>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	490f      	ldr	r1, [pc, #60]	; (8003eac <HAL_RCC_ClockConfig+0x258>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e72:	f000 f823 	bl	8003ebc <HAL_RCC_GetSysClockFreq>
 8003e76:	4602      	mov	r2, r0
 8003e78:	4b0c      	ldr	r3, [pc, #48]	; (8003eac <HAL_RCC_ClockConfig+0x258>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	091b      	lsrs	r3, r3, #4
 8003e7e:	f003 030f 	and.w	r3, r3, #15
 8003e82:	490b      	ldr	r1, [pc, #44]	; (8003eb0 <HAL_RCC_ClockConfig+0x25c>)
 8003e84:	5ccb      	ldrb	r3, [r1, r3]
 8003e86:	fa22 f303 	lsr.w	r3, r2, r3
 8003e8a:	4a0a      	ldr	r2, [pc, #40]	; (8003eb4 <HAL_RCC_ClockConfig+0x260>)
 8003e8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e8e:	4b0a      	ldr	r3, [pc, #40]	; (8003eb8 <HAL_RCC_ClockConfig+0x264>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7fe fd9e 	bl	80029d4 <HAL_InitTick>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	72fb      	strb	r3, [r7, #11]

  return status;
 8003e9c:	7afb      	ldrb	r3, [r7, #11]
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	40023c00 	.word	0x40023c00
 8003eac:	40023800 	.word	0x40023800
 8003eb0:	08005214 	.word	0x08005214
 8003eb4:	20000000 	.word	0x20000000
 8003eb8:	20000004 	.word	0x20000004

08003ebc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ebc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ec0:	b092      	sub	sp, #72	; 0x48
 8003ec2:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003ec4:	4b79      	ldr	r3, [pc, #484]	; (80040ac <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ecc:	f003 030c 	and.w	r3, r3, #12
 8003ed0:	2b0c      	cmp	r3, #12
 8003ed2:	d00d      	beq.n	8003ef0 <HAL_RCC_GetSysClockFreq+0x34>
 8003ed4:	2b0c      	cmp	r3, #12
 8003ed6:	f200 80d5 	bhi.w	8004084 <HAL_RCC_GetSysClockFreq+0x1c8>
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d002      	beq.n	8003ee4 <HAL_RCC_GetSysClockFreq+0x28>
 8003ede:	2b08      	cmp	r3, #8
 8003ee0:	d003      	beq.n	8003eea <HAL_RCC_GetSysClockFreq+0x2e>
 8003ee2:	e0cf      	b.n	8004084 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ee4:	4b72      	ldr	r3, [pc, #456]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8003ee6:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003ee8:	e0da      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003eea:	4b72      	ldr	r3, [pc, #456]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003eec:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003eee:	e0d7      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ef2:	0c9b      	lsrs	r3, r3, #18
 8003ef4:	f003 020f 	and.w	r2, r3, #15
 8003ef8:	4b6f      	ldr	r3, [pc, #444]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003efa:	5c9b      	ldrb	r3, [r3, r2]
 8003efc:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f00:	0d9b      	lsrs	r3, r3, #22
 8003f02:	f003 0303 	and.w	r3, r3, #3
 8003f06:	3301      	adds	r3, #1
 8003f08:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f0a:	4b68      	ldr	r3, [pc, #416]	; (80040ac <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d05d      	beq.n	8003fd2 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f18:	2200      	movs	r2, #0
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	4611      	mov	r1, r2
 8003f1e:	4604      	mov	r4, r0
 8003f20:	460d      	mov	r5, r1
 8003f22:	4622      	mov	r2, r4
 8003f24:	462b      	mov	r3, r5
 8003f26:	f04f 0000 	mov.w	r0, #0
 8003f2a:	f04f 0100 	mov.w	r1, #0
 8003f2e:	0159      	lsls	r1, r3, #5
 8003f30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f34:	0150      	lsls	r0, r2, #5
 8003f36:	4602      	mov	r2, r0
 8003f38:	460b      	mov	r3, r1
 8003f3a:	4621      	mov	r1, r4
 8003f3c:	1a51      	subs	r1, r2, r1
 8003f3e:	6139      	str	r1, [r7, #16]
 8003f40:	4629      	mov	r1, r5
 8003f42:	eb63 0301 	sbc.w	r3, r3, r1
 8003f46:	617b      	str	r3, [r7, #20]
 8003f48:	f04f 0200 	mov.w	r2, #0
 8003f4c:	f04f 0300 	mov.w	r3, #0
 8003f50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f54:	4659      	mov	r1, fp
 8003f56:	018b      	lsls	r3, r1, #6
 8003f58:	4651      	mov	r1, sl
 8003f5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f5e:	4651      	mov	r1, sl
 8003f60:	018a      	lsls	r2, r1, #6
 8003f62:	46d4      	mov	ip, sl
 8003f64:	ebb2 080c 	subs.w	r8, r2, ip
 8003f68:	4659      	mov	r1, fp
 8003f6a:	eb63 0901 	sbc.w	r9, r3, r1
 8003f6e:	f04f 0200 	mov.w	r2, #0
 8003f72:	f04f 0300 	mov.w	r3, #0
 8003f76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f82:	4690      	mov	r8, r2
 8003f84:	4699      	mov	r9, r3
 8003f86:	4623      	mov	r3, r4
 8003f88:	eb18 0303 	adds.w	r3, r8, r3
 8003f8c:	60bb      	str	r3, [r7, #8]
 8003f8e:	462b      	mov	r3, r5
 8003f90:	eb49 0303 	adc.w	r3, r9, r3
 8003f94:	60fb      	str	r3, [r7, #12]
 8003f96:	f04f 0200 	mov.w	r2, #0
 8003f9a:	f04f 0300 	mov.w	r3, #0
 8003f9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003fa2:	4629      	mov	r1, r5
 8003fa4:	024b      	lsls	r3, r1, #9
 8003fa6:	4620      	mov	r0, r4
 8003fa8:	4629      	mov	r1, r5
 8003faa:	4604      	mov	r4, r0
 8003fac:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003fb0:	4601      	mov	r1, r0
 8003fb2:	024a      	lsls	r2, r1, #9
 8003fb4:	4610      	mov	r0, r2
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fba:	2200      	movs	r2, #0
 8003fbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fc4:	f7fc ff0a 	bl	8000ddc <__aeabi_uldivmod>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	460b      	mov	r3, r1
 8003fcc:	4613      	mov	r3, r2
 8003fce:	647b      	str	r3, [r7, #68]	; 0x44
 8003fd0:	e055      	b.n	800407e <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	623b      	str	r3, [r7, #32]
 8003fd8:	627a      	str	r2, [r7, #36]	; 0x24
 8003fda:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003fde:	4642      	mov	r2, r8
 8003fe0:	464b      	mov	r3, r9
 8003fe2:	f04f 0000 	mov.w	r0, #0
 8003fe6:	f04f 0100 	mov.w	r1, #0
 8003fea:	0159      	lsls	r1, r3, #5
 8003fec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ff0:	0150      	lsls	r0, r2, #5
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	46c4      	mov	ip, r8
 8003ff8:	ebb2 0a0c 	subs.w	sl, r2, ip
 8003ffc:	4640      	mov	r0, r8
 8003ffe:	4649      	mov	r1, r9
 8004000:	468c      	mov	ip, r1
 8004002:	eb63 0b0c 	sbc.w	fp, r3, ip
 8004006:	f04f 0200 	mov.w	r2, #0
 800400a:	f04f 0300 	mov.w	r3, #0
 800400e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004012:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004016:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800401a:	ebb2 040a 	subs.w	r4, r2, sl
 800401e:	eb63 050b 	sbc.w	r5, r3, fp
 8004022:	f04f 0200 	mov.w	r2, #0
 8004026:	f04f 0300 	mov.w	r3, #0
 800402a:	00eb      	lsls	r3, r5, #3
 800402c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004030:	00e2      	lsls	r2, r4, #3
 8004032:	4614      	mov	r4, r2
 8004034:	461d      	mov	r5, r3
 8004036:	4603      	mov	r3, r0
 8004038:	18e3      	adds	r3, r4, r3
 800403a:	603b      	str	r3, [r7, #0]
 800403c:	460b      	mov	r3, r1
 800403e:	eb45 0303 	adc.w	r3, r5, r3
 8004042:	607b      	str	r3, [r7, #4]
 8004044:	f04f 0200 	mov.w	r2, #0
 8004048:	f04f 0300 	mov.w	r3, #0
 800404c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004050:	4629      	mov	r1, r5
 8004052:	028b      	lsls	r3, r1, #10
 8004054:	4620      	mov	r0, r4
 8004056:	4629      	mov	r1, r5
 8004058:	4604      	mov	r4, r0
 800405a:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800405e:	4601      	mov	r1, r0
 8004060:	028a      	lsls	r2, r1, #10
 8004062:	4610      	mov	r0, r2
 8004064:	4619      	mov	r1, r3
 8004066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004068:	2200      	movs	r2, #0
 800406a:	61bb      	str	r3, [r7, #24]
 800406c:	61fa      	str	r2, [r7, #28]
 800406e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004072:	f7fc feb3 	bl	8000ddc <__aeabi_uldivmod>
 8004076:	4602      	mov	r2, r0
 8004078:	460b      	mov	r3, r1
 800407a:	4613      	mov	r3, r2
 800407c:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 800407e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004080:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004082:	e00d      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004084:	4b09      	ldr	r3, [pc, #36]	; (80040ac <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	0b5b      	lsrs	r3, r3, #13
 800408a:	f003 0307 	and.w	r3, r3, #7
 800408e:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004092:	3301      	adds	r3, #1
 8004094:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800409e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3748      	adds	r7, #72	; 0x48
 80040a6:	46bd      	mov	sp, r7
 80040a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040ac:	40023800 	.word	0x40023800
 80040b0:	00f42400 	.word	0x00f42400
 80040b4:	007a1200 	.word	0x007a1200
 80040b8:	08005208 	.word	0x08005208

080040bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040c0:	4b02      	ldr	r3, [pc, #8]	; (80040cc <HAL_RCC_GetHCLKFreq+0x10>)
 80040c2:	681b      	ldr	r3, [r3, #0]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bc80      	pop	{r7}
 80040ca:	4770      	bx	lr
 80040cc:	20000000 	.word	0x20000000

080040d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040d4:	f7ff fff2 	bl	80040bc <HAL_RCC_GetHCLKFreq>
 80040d8:	4602      	mov	r2, r0
 80040da:	4b05      	ldr	r3, [pc, #20]	; (80040f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	0a1b      	lsrs	r3, r3, #8
 80040e0:	f003 0307 	and.w	r3, r3, #7
 80040e4:	4903      	ldr	r1, [pc, #12]	; (80040f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040e6:	5ccb      	ldrb	r3, [r1, r3]
 80040e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	40023800 	.word	0x40023800
 80040f4:	08005224 	.word	0x08005224

080040f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040fc:	f7ff ffde 	bl	80040bc <HAL_RCC_GetHCLKFreq>
 8004100:	4602      	mov	r2, r0
 8004102:	4b05      	ldr	r3, [pc, #20]	; (8004118 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	0adb      	lsrs	r3, r3, #11
 8004108:	f003 0307 	and.w	r3, r3, #7
 800410c:	4903      	ldr	r1, [pc, #12]	; (800411c <HAL_RCC_GetPCLK2Freq+0x24>)
 800410e:	5ccb      	ldrb	r3, [r1, r3]
 8004110:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004114:	4618      	mov	r0, r3
 8004116:	bd80      	pop	{r7, pc}
 8004118:	40023800 	.word	0x40023800
 800411c:	08005224 	.word	0x08005224

08004120 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004120:	b480      	push	{r7}
 8004122:	b087      	sub	sp, #28
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004128:	2300      	movs	r3, #0
 800412a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800412c:	4b29      	ldr	r3, [pc, #164]	; (80041d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d12c      	bne.n	8004192 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004138:	4b26      	ldr	r3, [pc, #152]	; (80041d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d005      	beq.n	8004150 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004144:	4b24      	ldr	r3, [pc, #144]	; (80041d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800414c:	617b      	str	r3, [r7, #20]
 800414e:	e016      	b.n	800417e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004150:	4b20      	ldr	r3, [pc, #128]	; (80041d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	4a1f      	ldr	r2, [pc, #124]	; (80041d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800415a:	6253      	str	r3, [r2, #36]	; 0x24
 800415c:	4b1d      	ldr	r3, [pc, #116]	; (80041d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004164:	60fb      	str	r3, [r7, #12]
 8004166:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004168:	4b1b      	ldr	r3, [pc, #108]	; (80041d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004170:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8004172:	4b18      	ldr	r3, [pc, #96]	; (80041d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	4a17      	ldr	r2, [pc, #92]	; (80041d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004178:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800417c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004184:	d105      	bne.n	8004192 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800418c:	d101      	bne.n	8004192 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800418e:	2301      	movs	r3, #1
 8004190:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d105      	bne.n	80041a4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8004198:	4b10      	ldr	r3, [pc, #64]	; (80041dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a0f      	ldr	r2, [pc, #60]	; (80041dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800419e:	f043 0304 	orr.w	r3, r3, #4
 80041a2:	6013      	str	r3, [r2, #0]
 80041a4:	4b0d      	ldr	r3, [pc, #52]	; (80041dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f023 0201 	bic.w	r2, r3, #1
 80041ac:	490b      	ldr	r1, [pc, #44]	; (80041dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80041b4:	4b09      	ldr	r3, [pc, #36]	; (80041dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d001      	beq.n	80041c6 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e000      	b.n	80041c8 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	371c      	adds	r7, #28
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bc80      	pop	{r7}
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	40023800 	.word	0x40023800
 80041d8:	40007000 	.word	0x40007000
 80041dc:	40023c00 	.word	0x40023c00

080041e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e031      	b.n	8004256 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d106      	bne.n	800420c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7fe fade 	bl	80027c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2202      	movs	r2, #2
 8004210:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3304      	adds	r3, #4
 800421c:	4619      	mov	r1, r3
 800421e:	4610      	mov	r0, r2
 8004220:	f000 f8e2 	bl	80043e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b084      	sub	sp, #16
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
 8004266:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800426e:	2b01      	cmp	r3, #1
 8004270:	d101      	bne.n	8004276 <HAL_TIM_ConfigClockSource+0x18>
 8004272:	2302      	movs	r3, #2
 8004274:	e0b3      	b.n	80043de <HAL_TIM_ConfigClockSource+0x180>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2201      	movs	r2, #1
 800427a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2202      	movs	r2, #2
 8004282:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004294:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800429c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ae:	d03e      	beq.n	800432e <HAL_TIM_ConfigClockSource+0xd0>
 80042b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042b4:	f200 8087 	bhi.w	80043c6 <HAL_TIM_ConfigClockSource+0x168>
 80042b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042bc:	f000 8085 	beq.w	80043ca <HAL_TIM_ConfigClockSource+0x16c>
 80042c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042c4:	d87f      	bhi.n	80043c6 <HAL_TIM_ConfigClockSource+0x168>
 80042c6:	2b70      	cmp	r3, #112	; 0x70
 80042c8:	d01a      	beq.n	8004300 <HAL_TIM_ConfigClockSource+0xa2>
 80042ca:	2b70      	cmp	r3, #112	; 0x70
 80042cc:	d87b      	bhi.n	80043c6 <HAL_TIM_ConfigClockSource+0x168>
 80042ce:	2b60      	cmp	r3, #96	; 0x60
 80042d0:	d050      	beq.n	8004374 <HAL_TIM_ConfigClockSource+0x116>
 80042d2:	2b60      	cmp	r3, #96	; 0x60
 80042d4:	d877      	bhi.n	80043c6 <HAL_TIM_ConfigClockSource+0x168>
 80042d6:	2b50      	cmp	r3, #80	; 0x50
 80042d8:	d03c      	beq.n	8004354 <HAL_TIM_ConfigClockSource+0xf6>
 80042da:	2b50      	cmp	r3, #80	; 0x50
 80042dc:	d873      	bhi.n	80043c6 <HAL_TIM_ConfigClockSource+0x168>
 80042de:	2b40      	cmp	r3, #64	; 0x40
 80042e0:	d058      	beq.n	8004394 <HAL_TIM_ConfigClockSource+0x136>
 80042e2:	2b40      	cmp	r3, #64	; 0x40
 80042e4:	d86f      	bhi.n	80043c6 <HAL_TIM_ConfigClockSource+0x168>
 80042e6:	2b30      	cmp	r3, #48	; 0x30
 80042e8:	d064      	beq.n	80043b4 <HAL_TIM_ConfigClockSource+0x156>
 80042ea:	2b30      	cmp	r3, #48	; 0x30
 80042ec:	d86b      	bhi.n	80043c6 <HAL_TIM_ConfigClockSource+0x168>
 80042ee:	2b20      	cmp	r3, #32
 80042f0:	d060      	beq.n	80043b4 <HAL_TIM_ConfigClockSource+0x156>
 80042f2:	2b20      	cmp	r3, #32
 80042f4:	d867      	bhi.n	80043c6 <HAL_TIM_ConfigClockSource+0x168>
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d05c      	beq.n	80043b4 <HAL_TIM_ConfigClockSource+0x156>
 80042fa:	2b10      	cmp	r3, #16
 80042fc:	d05a      	beq.n	80043b4 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80042fe:	e062      	b.n	80043c6 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6818      	ldr	r0, [r3, #0]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	6899      	ldr	r1, [r3, #8]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	f000 f951 	bl	80045b6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004322:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	609a      	str	r2, [r3, #8]
      break;
 800432c:	e04e      	b.n	80043cc <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6818      	ldr	r0, [r3, #0]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	6899      	ldr	r1, [r3, #8]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	685a      	ldr	r2, [r3, #4]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	f000 f93a 	bl	80045b6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	689a      	ldr	r2, [r3, #8]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004350:	609a      	str	r2, [r3, #8]
      break;
 8004352:	e03b      	b.n	80043cc <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6818      	ldr	r0, [r3, #0]
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	6859      	ldr	r1, [r3, #4]
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	461a      	mov	r2, r3
 8004362:	f000 f8b1 	bl	80044c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2150      	movs	r1, #80	; 0x50
 800436c:	4618      	mov	r0, r3
 800436e:	f000 f908 	bl	8004582 <TIM_ITRx_SetConfig>
      break;
 8004372:	e02b      	b.n	80043cc <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6818      	ldr	r0, [r3, #0]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	6859      	ldr	r1, [r3, #4]
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	461a      	mov	r2, r3
 8004382:	f000 f8cf 	bl	8004524 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2160      	movs	r1, #96	; 0x60
 800438c:	4618      	mov	r0, r3
 800438e:	f000 f8f8 	bl	8004582 <TIM_ITRx_SetConfig>
      break;
 8004392:	e01b      	b.n	80043cc <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6818      	ldr	r0, [r3, #0]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	6859      	ldr	r1, [r3, #4]
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	461a      	mov	r2, r3
 80043a2:	f000 f891 	bl	80044c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2140      	movs	r1, #64	; 0x40
 80043ac:	4618      	mov	r0, r3
 80043ae:	f000 f8e8 	bl	8004582 <TIM_ITRx_SetConfig>
      break;
 80043b2:	e00b      	b.n	80043cc <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4619      	mov	r1, r3
 80043be:	4610      	mov	r0, r2
 80043c0:	f000 f8df 	bl	8004582 <TIM_ITRx_SetConfig>
        break;
 80043c4:	e002      	b.n	80043cc <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80043c6:	bf00      	nop
 80043c8:	e000      	b.n	80043cc <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80043ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
	...

080043e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043fe:	d00f      	beq.n	8004420 <TIM_Base_SetConfig+0x38>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a2b      	ldr	r2, [pc, #172]	; (80044b0 <TIM_Base_SetConfig+0xc8>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d00b      	beq.n	8004420 <TIM_Base_SetConfig+0x38>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a2a      	ldr	r2, [pc, #168]	; (80044b4 <TIM_Base_SetConfig+0xcc>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d007      	beq.n	8004420 <TIM_Base_SetConfig+0x38>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a29      	ldr	r2, [pc, #164]	; (80044b8 <TIM_Base_SetConfig+0xd0>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d003      	beq.n	8004420 <TIM_Base_SetConfig+0x38>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a28      	ldr	r2, [pc, #160]	; (80044bc <TIM_Base_SetConfig+0xd4>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d108      	bne.n	8004432 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004426:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	4313      	orrs	r3, r2
 8004430:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004438:	d017      	beq.n	800446a <TIM_Base_SetConfig+0x82>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a1c      	ldr	r2, [pc, #112]	; (80044b0 <TIM_Base_SetConfig+0xc8>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d013      	beq.n	800446a <TIM_Base_SetConfig+0x82>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a1b      	ldr	r2, [pc, #108]	; (80044b4 <TIM_Base_SetConfig+0xcc>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d00f      	beq.n	800446a <TIM_Base_SetConfig+0x82>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a1a      	ldr	r2, [pc, #104]	; (80044b8 <TIM_Base_SetConfig+0xd0>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d00b      	beq.n	800446a <TIM_Base_SetConfig+0x82>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a19      	ldr	r2, [pc, #100]	; (80044bc <TIM_Base_SetConfig+0xd4>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d007      	beq.n	800446a <TIM_Base_SetConfig+0x82>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a18      	ldr	r2, [pc, #96]	; (80044c0 <TIM_Base_SetConfig+0xd8>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d003      	beq.n	800446a <TIM_Base_SetConfig+0x82>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a17      	ldr	r2, [pc, #92]	; (80044c4 <TIM_Base_SetConfig+0xdc>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d108      	bne.n	800447c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004470:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	4313      	orrs	r3, r2
 800447a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	4313      	orrs	r3, r2
 8004488:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	689a      	ldr	r2, [r3, #8]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	615a      	str	r2, [r3, #20]
}
 80044a6:	bf00      	nop
 80044a8:	3714      	adds	r7, #20
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bc80      	pop	{r7}
 80044ae:	4770      	bx	lr
 80044b0:	40000400 	.word	0x40000400
 80044b4:	40000800 	.word	0x40000800
 80044b8:	40000c00 	.word	0x40000c00
 80044bc:	40010800 	.word	0x40010800
 80044c0:	40010c00 	.word	0x40010c00
 80044c4:	40011000 	.word	0x40011000

080044c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b087      	sub	sp, #28
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6a1b      	ldr	r3, [r3, #32]
 80044d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	f023 0201 	bic.w	r2, r3, #1
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	011b      	lsls	r3, r3, #4
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f023 030a 	bic.w	r3, r3, #10
 8004504:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	4313      	orrs	r3, r2
 800450c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	621a      	str	r2, [r3, #32]
}
 800451a:	bf00      	nop
 800451c:	371c      	adds	r7, #28
 800451e:	46bd      	mov	sp, r7
 8004520:	bc80      	pop	{r7}
 8004522:	4770      	bx	lr

08004524 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004524:	b480      	push	{r7}
 8004526:	b087      	sub	sp, #28
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	f023 0210 	bic.w	r2, r3, #16
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800454e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	031b      	lsls	r3, r3, #12
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	4313      	orrs	r3, r2
 8004558:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004560:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	011b      	lsls	r3, r3, #4
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	4313      	orrs	r3, r2
 800456a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	621a      	str	r2, [r3, #32]
}
 8004578:	bf00      	nop
 800457a:	371c      	adds	r7, #28
 800457c:	46bd      	mov	sp, r7
 800457e:	bc80      	pop	{r7}
 8004580:	4770      	bx	lr

08004582 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004582:	b480      	push	{r7}
 8004584:	b085      	sub	sp, #20
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
 800458a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004598:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4313      	orrs	r3, r2
 80045a0:	f043 0307 	orr.w	r3, r3, #7
 80045a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	609a      	str	r2, [r3, #8]
}
 80045ac:	bf00      	nop
 80045ae:	3714      	adds	r7, #20
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bc80      	pop	{r7}
 80045b4:	4770      	bx	lr

080045b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045b6:	b480      	push	{r7}
 80045b8:	b087      	sub	sp, #28
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	60f8      	str	r0, [r7, #12]
 80045be:	60b9      	str	r1, [r7, #8]
 80045c0:	607a      	str	r2, [r7, #4]
 80045c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	021a      	lsls	r2, r3, #8
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	431a      	orrs	r2, r3
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	4313      	orrs	r3, r2
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	609a      	str	r2, [r3, #8]
}
 80045ea:	bf00      	nop
 80045ec:	371c      	adds	r7, #28
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bc80      	pop	{r7}
 80045f2:	4770      	bx	lr

080045f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004604:	2b01      	cmp	r3, #1
 8004606:	d101      	bne.n	800460c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004608:	2302      	movs	r3, #2
 800460a:	e046      	b.n	800469a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2202      	movs	r2, #2
 8004618:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004632:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	4313      	orrs	r3, r2
 800463c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800464e:	d00e      	beq.n	800466e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a13      	ldr	r2, [pc, #76]	; (80046a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d009      	beq.n	800466e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a12      	ldr	r2, [pc, #72]	; (80046a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d004      	beq.n	800466e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a10      	ldr	r2, [pc, #64]	; (80046ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d10c      	bne.n	8004688 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004674:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	68ba      	ldr	r2, [r7, #8]
 800467c:	4313      	orrs	r3, r2
 800467e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68ba      	ldr	r2, [r7, #8]
 8004686:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3714      	adds	r7, #20
 800469e:	46bd      	mov	sp, r7
 80046a0:	bc80      	pop	{r7}
 80046a2:	4770      	bx	lr
 80046a4:	40000400 	.word	0x40000400
 80046a8:	40000800 	.word	0x40000800
 80046ac:	40010800 	.word	0x40010800

080046b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e03f      	b.n	8004742 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d106      	bne.n	80046dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7fe f8ba 	bl	8002850 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2224      	movs	r2, #36	; 0x24
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68da      	ldr	r2, [r3, #12]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f000 fbed 	bl	8004ed4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	691a      	ldr	r2, [r3, #16]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004708:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	695a      	ldr	r2, [r3, #20]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004718:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68da      	ldr	r2, [r3, #12]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004728:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2220      	movs	r2, #32
 8004734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2220      	movs	r2, #32
 800473c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800474a:	b480      	push	{r7}
 800474c:	b085      	sub	sp, #20
 800474e:	af00      	add	r7, sp, #0
 8004750:	60f8      	str	r0, [r7, #12]
 8004752:	60b9      	str	r1, [r7, #8]
 8004754:	4613      	mov	r3, r2
 8004756:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800475e:	b2db      	uxtb	r3, r3
 8004760:	2b20      	cmp	r3, #32
 8004762:	d130      	bne.n	80047c6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d002      	beq.n	8004770 <HAL_UART_Transmit_IT+0x26>
 800476a:	88fb      	ldrh	r3, [r7, #6]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d101      	bne.n	8004774 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e029      	b.n	80047c8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800477a:	2b01      	cmp	r3, #1
 800477c:	d101      	bne.n	8004782 <HAL_UART_Transmit_IT+0x38>
 800477e:	2302      	movs	r3, #2
 8004780:	e022      	b.n	80047c8 <HAL_UART_Transmit_IT+0x7e>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	88fa      	ldrh	r2, [r7, #6]
 8004794:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	88fa      	ldrh	r2, [r7, #6]
 800479a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2221      	movs	r2, #33	; 0x21
 80047a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68da      	ldr	r2, [r3, #12]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80047c0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80047c2:	2300      	movs	r3, #0
 80047c4:	e000      	b.n	80047c8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80047c6:	2302      	movs	r3, #2
  }
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3714      	adds	r7, #20
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bc80      	pop	{r7}
 80047d0:	4770      	bx	lr

080047d2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b084      	sub	sp, #16
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	60f8      	str	r0, [r7, #12]
 80047da:	60b9      	str	r1, [r7, #8]
 80047dc:	4613      	mov	r3, r2
 80047de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b20      	cmp	r3, #32
 80047ea:	d11d      	bne.n	8004828 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d002      	beq.n	80047f8 <HAL_UART_Receive_IT+0x26>
 80047f2:	88fb      	ldrh	r3, [r7, #6]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d101      	bne.n	80047fc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e016      	b.n	800482a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004802:	2b01      	cmp	r3, #1
 8004804:	d101      	bne.n	800480a <HAL_UART_Receive_IT+0x38>
 8004806:	2302      	movs	r3, #2
 8004808:	e00f      	b.n	800482a <HAL_UART_Receive_IT+0x58>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004818:	88fb      	ldrh	r3, [r7, #6]
 800481a:	461a      	mov	r2, r3
 800481c:	68b9      	ldr	r1, [r7, #8]
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f000 f9cf 	bl	8004bc2 <UART_Start_Receive_IT>
 8004824:	4603      	mov	r3, r0
 8004826:	e000      	b.n	800482a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004828:	2302      	movs	r3, #2
  }
}
 800482a:	4618      	mov	r0, r3
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
	...

08004834 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b08a      	sub	sp, #40	; 0x28
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004854:	2300      	movs	r3, #0
 8004856:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004858:	2300      	movs	r3, #0
 800485a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800485c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485e:	f003 030f 	and.w	r3, r3, #15
 8004862:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10d      	bne.n	8004886 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800486a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486c:	f003 0320 	and.w	r3, r3, #32
 8004870:	2b00      	cmp	r3, #0
 8004872:	d008      	beq.n	8004886 <HAL_UART_IRQHandler+0x52>
 8004874:	6a3b      	ldr	r3, [r7, #32]
 8004876:	f003 0320 	and.w	r3, r3, #32
 800487a:	2b00      	cmp	r3, #0
 800487c:	d003      	beq.n	8004886 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 fa7f 	bl	8004d82 <UART_Receive_IT>
      return;
 8004884:	e17b      	b.n	8004b7e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	2b00      	cmp	r3, #0
 800488a:	f000 80b1 	beq.w	80049f0 <HAL_UART_IRQHandler+0x1bc>
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	f003 0301 	and.w	r3, r3, #1
 8004894:	2b00      	cmp	r3, #0
 8004896:	d105      	bne.n	80048a4 <HAL_UART_IRQHandler+0x70>
 8004898:	6a3b      	ldr	r3, [r7, #32]
 800489a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f000 80a6 	beq.w	80049f0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80048a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00a      	beq.n	80048c4 <HAL_UART_IRQHandler+0x90>
 80048ae:	6a3b      	ldr	r3, [r7, #32]
 80048b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d005      	beq.n	80048c4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048bc:	f043 0201 	orr.w	r2, r3, #1
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	f003 0304 	and.w	r3, r3, #4
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00a      	beq.n	80048e4 <HAL_UART_IRQHandler+0xb0>
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d005      	beq.n	80048e4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048dc:	f043 0202 	orr.w	r2, r3, #2
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <HAL_UART_IRQHandler+0xd0>
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	f003 0301 	and.w	r3, r3, #1
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d005      	beq.n	8004904 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fc:	f043 0204 	orr.w	r2, r3, #4
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004906:	f003 0308 	and.w	r3, r3, #8
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00f      	beq.n	800492e <HAL_UART_IRQHandler+0xfa>
 800490e:	6a3b      	ldr	r3, [r7, #32]
 8004910:	f003 0320 	and.w	r3, r3, #32
 8004914:	2b00      	cmp	r3, #0
 8004916:	d104      	bne.n	8004922 <HAL_UART_IRQHandler+0xee>
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	2b00      	cmp	r3, #0
 8004920:	d005      	beq.n	800492e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004926:	f043 0208 	orr.w	r2, r3, #8
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 811e 	beq.w	8004b74 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493a:	f003 0320 	and.w	r3, r3, #32
 800493e:	2b00      	cmp	r3, #0
 8004940:	d007      	beq.n	8004952 <HAL_UART_IRQHandler+0x11e>
 8004942:	6a3b      	ldr	r3, [r7, #32]
 8004944:	f003 0320 	and.w	r3, r3, #32
 8004948:	2b00      	cmp	r3, #0
 800494a:	d002      	beq.n	8004952 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 fa18 	bl	8004d82 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	695b      	ldr	r3, [r3, #20]
 8004958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800495c:	2b40      	cmp	r3, #64	; 0x40
 800495e:	bf0c      	ite	eq
 8004960:	2301      	moveq	r3, #1
 8004962:	2300      	movne	r3, #0
 8004964:	b2db      	uxtb	r3, r3
 8004966:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496c:	f003 0308 	and.w	r3, r3, #8
 8004970:	2b00      	cmp	r3, #0
 8004972:	d102      	bne.n	800497a <HAL_UART_IRQHandler+0x146>
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d031      	beq.n	80049de <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f95a 	bl	8004c34 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800498a:	2b40      	cmp	r3, #64	; 0x40
 800498c:	d123      	bne.n	80049d6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	695a      	ldr	r2, [r3, #20]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800499c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d013      	beq.n	80049ce <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049aa:	4a76      	ldr	r2, [pc, #472]	; (8004b84 <HAL_UART_IRQHandler+0x350>)
 80049ac:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7fe fc44 	bl	8003240 <HAL_DMA_Abort_IT>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d016      	beq.n	80049ec <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049c8:	4610      	mov	r0, r2
 80049ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049cc:	e00e      	b.n	80049ec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f8e3 	bl	8004b9a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049d4:	e00a      	b.n	80049ec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f8df 	bl	8004b9a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049dc:	e006      	b.n	80049ec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f8db 	bl	8004b9a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80049ea:	e0c3      	b.n	8004b74 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049ec:	bf00      	nop
    return;
 80049ee:	e0c1      	b.n	8004b74 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	f040 80a1 	bne.w	8004b3c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	f003 0310 	and.w	r3, r3, #16
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f000 809b 	beq.w	8004b3c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004a06:	6a3b      	ldr	r3, [r7, #32]
 8004a08:	f003 0310 	and.w	r3, r3, #16
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f000 8095 	beq.w	8004b3c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a12:	2300      	movs	r3, #0
 8004a14:	60fb      	str	r3, [r7, #12]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	60fb      	str	r3, [r7, #12]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	60fb      	str	r3, [r7, #12]
 8004a26:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a32:	2b40      	cmp	r3, #64	; 0x40
 8004a34:	d14e      	bne.n	8004ad4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004a40:	8a3b      	ldrh	r3, [r7, #16]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f000 8098 	beq.w	8004b78 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a4c:	8a3a      	ldrh	r2, [r7, #16]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	f080 8092 	bcs.w	8004b78 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	8a3a      	ldrh	r2, [r7, #16]
 8004a58:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	2b20      	cmp	r3, #32
 8004a62:	d02b      	beq.n	8004abc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68da      	ldr	r2, [r3, #12]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a72:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	695a      	ldr	r2, [r3, #20]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f022 0201 	bic.w	r2, r2, #1
 8004a82:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	695a      	ldr	r2, [r3, #20]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a92:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2220      	movs	r2, #32
 8004a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68da      	ldr	r2, [r3, #12]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f022 0210 	bic.w	r2, r2, #16
 8004ab0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7fe fb85 	bl	80031c6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	4619      	mov	r1, r3
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f86d 	bl	8004bac <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004ad2:	e051      	b.n	8004b78 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d047      	beq.n	8004b7c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004aec:	8a7b      	ldrh	r3, [r7, #18]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d044      	beq.n	8004b7c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68da      	ldr	r2, [r3, #12]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004b00:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	695a      	ldr	r2, [r3, #20]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f022 0201 	bic.w	r2, r2, #1
 8004b10:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2220      	movs	r2, #32
 8004b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68da      	ldr	r2, [r3, #12]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f022 0210 	bic.w	r2, r2, #16
 8004b2e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b30:	8a7b      	ldrh	r3, [r7, #18]
 8004b32:	4619      	mov	r1, r3
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 f839 	bl	8004bac <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004b3a:	e01f      	b.n	8004b7c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d008      	beq.n	8004b58 <HAL_UART_IRQHandler+0x324>
 8004b46:	6a3b      	ldr	r3, [r7, #32]
 8004b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d003      	beq.n	8004b58 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 f8af 	bl	8004cb4 <UART_Transmit_IT>
    return;
 8004b56:	e012      	b.n	8004b7e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00d      	beq.n	8004b7e <HAL_UART_IRQHandler+0x34a>
 8004b62:	6a3b      	ldr	r3, [r7, #32]
 8004b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d008      	beq.n	8004b7e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 f8f0 	bl	8004d52 <UART_EndTransmit_IT>
    return;
 8004b72:	e004      	b.n	8004b7e <HAL_UART_IRQHandler+0x34a>
    return;
 8004b74:	bf00      	nop
 8004b76:	e002      	b.n	8004b7e <HAL_UART_IRQHandler+0x34a>
      return;
 8004b78:	bf00      	nop
 8004b7a:	e000      	b.n	8004b7e <HAL_UART_IRQHandler+0x34a>
      return;
 8004b7c:	bf00      	nop
  }
}
 8004b7e:	3728      	adds	r7, #40	; 0x28
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	08004c8d 	.word	0x08004c8d

08004b88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bc80      	pop	{r7}
 8004b98:	4770      	bx	lr

08004b9a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b083      	sub	sp, #12
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ba2:	bf00      	nop
 8004ba4:	370c      	adds	r7, #12
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bc80      	pop	{r7}
 8004baa:	4770      	bx	lr

08004bac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bc80      	pop	{r7}
 8004bc0:	4770      	bx	lr

08004bc2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b085      	sub	sp, #20
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	60f8      	str	r0, [r7, #12]
 8004bca:	60b9      	str	r1, [r7, #8]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	88fa      	ldrh	r2, [r7, #6]
 8004bda:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	88fa      	ldrh	r2, [r7, #6]
 8004be0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2222      	movs	r2, #34	; 0x22
 8004bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68da      	ldr	r2, [r3, #12]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c06:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	695a      	ldr	r2, [r3, #20]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f042 0201 	orr.w	r2, r2, #1
 8004c16:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68da      	ldr	r2, [r3, #12]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f042 0220 	orr.w	r2, r2, #32
 8004c26:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3714      	adds	r7, #20
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bc80      	pop	{r7}
 8004c32:	4770      	bx	lr

08004c34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68da      	ldr	r2, [r3, #12]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004c4a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	695a      	ldr	r2, [r3, #20]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f022 0201 	bic.w	r2, r2, #1
 8004c5a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d107      	bne.n	8004c74 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68da      	ldr	r2, [r3, #12]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 0210 	bic.w	r2, r2, #16
 8004c72:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2220      	movs	r2, #32
 8004c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004c82:	bf00      	nop
 8004c84:	370c      	adds	r7, #12
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bc80      	pop	{r7}
 8004c8a:	4770      	bx	lr

08004c8c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	f7ff ff77 	bl	8004b9a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cac:	bf00      	nop
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b21      	cmp	r3, #33	; 0x21
 8004cc6:	d13e      	bne.n	8004d46 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cd0:	d114      	bne.n	8004cfc <UART_Transmit_IT+0x48>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d110      	bne.n	8004cfc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
 8004cde:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	881b      	ldrh	r3, [r3, #0]
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a1b      	ldr	r3, [r3, #32]
 8004cf4:	1c9a      	adds	r2, r3, #2
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	621a      	str	r2, [r3, #32]
 8004cfa:	e008      	b.n	8004d0e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	1c59      	adds	r1, r3, #1
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	6211      	str	r1, [r2, #32]
 8004d06:	781a      	ldrb	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	3b01      	subs	r3, #1
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10f      	bne.n	8004d42 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68da      	ldr	r2, [r3, #12]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d30:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68da      	ldr	r2, [r3, #12]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d40:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d42:	2300      	movs	r3, #0
 8004d44:	e000      	b.n	8004d48 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d46:	2302      	movs	r3, #2
  }
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3714      	adds	r7, #20
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bc80      	pop	{r7}
 8004d50:	4770      	bx	lr

08004d52 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b082      	sub	sp, #8
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68da      	ldr	r2, [r3, #12]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d68:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2220      	movs	r2, #32
 8004d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f7ff ff08 	bl	8004b88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3708      	adds	r7, #8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b086      	sub	sp, #24
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b22      	cmp	r3, #34	; 0x22
 8004d94:	f040 8099 	bne.w	8004eca <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004da0:	d117      	bne.n	8004dd2 <UART_Receive_IT+0x50>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d113      	bne.n	8004dd2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004daa:	2300      	movs	r3, #0
 8004dac:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dca:	1c9a      	adds	r2, r3, #2
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	629a      	str	r2, [r3, #40]	; 0x28
 8004dd0:	e026      	b.n	8004e20 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004de4:	d007      	beq.n	8004df6 <UART_Receive_IT+0x74>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10a      	bne.n	8004e04 <UART_Receive_IT+0x82>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d106      	bne.n	8004e04 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	b2da      	uxtb	r2, r3
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	701a      	strb	r2, [r3, #0]
 8004e02:	e008      	b.n	8004e16 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e10:	b2da      	uxtb	r2, r3
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1a:	1c5a      	adds	r2, r3, #1
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	3b01      	subs	r3, #1
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d148      	bne.n	8004ec6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68da      	ldr	r2, [r3, #12]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 0220 	bic.w	r2, r2, #32
 8004e42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68da      	ldr	r2, [r3, #12]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	695a      	ldr	r2, [r3, #20]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f022 0201 	bic.w	r2, r2, #1
 8004e62:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2220      	movs	r2, #32
 8004e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d123      	bne.n	8004ebc <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68da      	ldr	r2, [r3, #12]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f022 0210 	bic.w	r2, r2, #16
 8004e88:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0310 	and.w	r3, r3, #16
 8004e94:	2b10      	cmp	r3, #16
 8004e96:	d10a      	bne.n	8004eae <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e98:	2300      	movs	r3, #0
 8004e9a:	60fb      	str	r3, [r7, #12]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	60fb      	str	r3, [r7, #12]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	60fb      	str	r3, [r7, #12]
 8004eac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f7ff fe79 	bl	8004bac <HAL_UARTEx_RxEventCallback>
 8004eba:	e002      	b.n	8004ec2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f7fc fcf9 	bl	80018b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	e002      	b.n	8004ecc <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	e000      	b.n	8004ecc <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004eca:	2302      	movs	r3, #2
  }
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3718      	adds	r7, #24
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	68da      	ldr	r2, [r3, #12]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	689a      	ldr	r2, [r3, #8]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	431a      	orrs	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	695b      	ldr	r3, [r3, #20]
 8004f00:	431a      	orrs	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	69db      	ldr	r3, [r3, #28]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004f14:	f023 030c 	bic.w	r3, r3, #12
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	6812      	ldr	r2, [r2, #0]
 8004f1c:	68b9      	ldr	r1, [r7, #8]
 8004f1e:	430b      	orrs	r3, r1
 8004f20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	695b      	ldr	r3, [r3, #20]
 8004f28:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	699a      	ldr	r2, [r3, #24]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	430a      	orrs	r2, r1
 8004f36:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a55      	ldr	r2, [pc, #340]	; (8005094 <UART_SetConfig+0x1c0>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d103      	bne.n	8004f4a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004f42:	f7ff f8d9 	bl	80040f8 <HAL_RCC_GetPCLK2Freq>
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	e002      	b.n	8004f50 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004f4a:	f7ff f8c1 	bl	80040d0 <HAL_RCC_GetPCLK1Freq>
 8004f4e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	69db      	ldr	r3, [r3, #28]
 8004f54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f58:	d14c      	bne.n	8004ff4 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	009a      	lsls	r2, r3, #2
 8004f64:	441a      	add	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	005b      	lsls	r3, r3, #1
 8004f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f70:	4a49      	ldr	r2, [pc, #292]	; (8005098 <UART_SetConfig+0x1c4>)
 8004f72:	fba2 2303 	umull	r2, r3, r2, r3
 8004f76:	095b      	lsrs	r3, r3, #5
 8004f78:	0119      	lsls	r1, r3, #4
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	4413      	add	r3, r2
 8004f82:	009a      	lsls	r2, r3, #2
 8004f84:	441a      	add	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	005b      	lsls	r3, r3, #1
 8004f8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f90:	4b41      	ldr	r3, [pc, #260]	; (8005098 <UART_SetConfig+0x1c4>)
 8004f92:	fba3 0302 	umull	r0, r3, r3, r2
 8004f96:	095b      	lsrs	r3, r3, #5
 8004f98:	2064      	movs	r0, #100	; 0x64
 8004f9a:	fb00 f303 	mul.w	r3, r0, r3
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	00db      	lsls	r3, r3, #3
 8004fa2:	3332      	adds	r3, #50	; 0x32
 8004fa4:	4a3c      	ldr	r2, [pc, #240]	; (8005098 <UART_SetConfig+0x1c4>)
 8004fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8004faa:	095b      	lsrs	r3, r3, #5
 8004fac:	005b      	lsls	r3, r3, #1
 8004fae:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004fb2:	4419      	add	r1, r3
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4413      	add	r3, r2
 8004fbc:	009a      	lsls	r2, r3, #2
 8004fbe:	441a      	add	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fca:	4b33      	ldr	r3, [pc, #204]	; (8005098 <UART_SetConfig+0x1c4>)
 8004fcc:	fba3 0302 	umull	r0, r3, r3, r2
 8004fd0:	095b      	lsrs	r3, r3, #5
 8004fd2:	2064      	movs	r0, #100	; 0x64
 8004fd4:	fb00 f303 	mul.w	r3, r0, r3
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	00db      	lsls	r3, r3, #3
 8004fdc:	3332      	adds	r3, #50	; 0x32
 8004fde:	4a2e      	ldr	r2, [pc, #184]	; (8005098 <UART_SetConfig+0x1c4>)
 8004fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe4:	095b      	lsrs	r3, r3, #5
 8004fe6:	f003 0207 	and.w	r2, r3, #7
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	440a      	add	r2, r1
 8004ff0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ff2:	e04a      	b.n	800508a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4413      	add	r3, r2
 8004ffc:	009a      	lsls	r2, r3, #2
 8004ffe:	441a      	add	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	fbb2 f3f3 	udiv	r3, r2, r3
 800500a:	4a23      	ldr	r2, [pc, #140]	; (8005098 <UART_SetConfig+0x1c4>)
 800500c:	fba2 2303 	umull	r2, r3, r2, r3
 8005010:	095b      	lsrs	r3, r3, #5
 8005012:	0119      	lsls	r1, r3, #4
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	4613      	mov	r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	4413      	add	r3, r2
 800501c:	009a      	lsls	r2, r3, #2
 800501e:	441a      	add	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	fbb2 f2f3 	udiv	r2, r2, r3
 800502a:	4b1b      	ldr	r3, [pc, #108]	; (8005098 <UART_SetConfig+0x1c4>)
 800502c:	fba3 0302 	umull	r0, r3, r3, r2
 8005030:	095b      	lsrs	r3, r3, #5
 8005032:	2064      	movs	r0, #100	; 0x64
 8005034:	fb00 f303 	mul.w	r3, r0, r3
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	011b      	lsls	r3, r3, #4
 800503c:	3332      	adds	r3, #50	; 0x32
 800503e:	4a16      	ldr	r2, [pc, #88]	; (8005098 <UART_SetConfig+0x1c4>)
 8005040:	fba2 2303 	umull	r2, r3, r2, r3
 8005044:	095b      	lsrs	r3, r3, #5
 8005046:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800504a:	4419      	add	r1, r3
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	4613      	mov	r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4413      	add	r3, r2
 8005054:	009a      	lsls	r2, r3, #2
 8005056:	441a      	add	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005062:	4b0d      	ldr	r3, [pc, #52]	; (8005098 <UART_SetConfig+0x1c4>)
 8005064:	fba3 0302 	umull	r0, r3, r3, r2
 8005068:	095b      	lsrs	r3, r3, #5
 800506a:	2064      	movs	r0, #100	; 0x64
 800506c:	fb00 f303 	mul.w	r3, r0, r3
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	011b      	lsls	r3, r3, #4
 8005074:	3332      	adds	r3, #50	; 0x32
 8005076:	4a08      	ldr	r2, [pc, #32]	; (8005098 <UART_SetConfig+0x1c4>)
 8005078:	fba2 2303 	umull	r2, r3, r2, r3
 800507c:	095b      	lsrs	r3, r3, #5
 800507e:	f003 020f 	and.w	r2, r3, #15
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	440a      	add	r2, r1
 8005088:	609a      	str	r2, [r3, #8]
}
 800508a:	bf00      	nop
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	40013800 	.word	0x40013800
 8005098:	51eb851f 	.word	0x51eb851f

0800509c <__libc_init_array>:
 800509c:	b570      	push	{r4, r5, r6, lr}
 800509e:	2600      	movs	r6, #0
 80050a0:	4d0c      	ldr	r5, [pc, #48]	; (80050d4 <__libc_init_array+0x38>)
 80050a2:	4c0d      	ldr	r4, [pc, #52]	; (80050d8 <__libc_init_array+0x3c>)
 80050a4:	1b64      	subs	r4, r4, r5
 80050a6:	10a4      	asrs	r4, r4, #2
 80050a8:	42a6      	cmp	r6, r4
 80050aa:	d109      	bne.n	80050c0 <__libc_init_array+0x24>
 80050ac:	f000 f822 	bl	80050f4 <_init>
 80050b0:	2600      	movs	r6, #0
 80050b2:	4d0a      	ldr	r5, [pc, #40]	; (80050dc <__libc_init_array+0x40>)
 80050b4:	4c0a      	ldr	r4, [pc, #40]	; (80050e0 <__libc_init_array+0x44>)
 80050b6:	1b64      	subs	r4, r4, r5
 80050b8:	10a4      	asrs	r4, r4, #2
 80050ba:	42a6      	cmp	r6, r4
 80050bc:	d105      	bne.n	80050ca <__libc_init_array+0x2e>
 80050be:	bd70      	pop	{r4, r5, r6, pc}
 80050c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80050c4:	4798      	blx	r3
 80050c6:	3601      	adds	r6, #1
 80050c8:	e7ee      	b.n	80050a8 <__libc_init_array+0xc>
 80050ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ce:	4798      	blx	r3
 80050d0:	3601      	adds	r6, #1
 80050d2:	e7f2      	b.n	80050ba <__libc_init_array+0x1e>
 80050d4:	08005234 	.word	0x08005234
 80050d8:	08005234 	.word	0x08005234
 80050dc:	08005234 	.word	0x08005234
 80050e0:	08005238 	.word	0x08005238

080050e4 <memset>:
 80050e4:	4603      	mov	r3, r0
 80050e6:	4402      	add	r2, r0
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d100      	bne.n	80050ee <memset+0xa>
 80050ec:	4770      	bx	lr
 80050ee:	f803 1b01 	strb.w	r1, [r3], #1
 80050f2:	e7f9      	b.n	80050e8 <memset+0x4>

080050f4 <_init>:
 80050f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050f6:	bf00      	nop
 80050f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050fa:	bc08      	pop	{r3}
 80050fc:	469e      	mov	lr, r3
 80050fe:	4770      	bx	lr

08005100 <_fini>:
 8005100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005102:	bf00      	nop
 8005104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005106:	bc08      	pop	{r3}
 8005108:	469e      	mov	lr, r3
 800510a:	4770      	bx	lr
