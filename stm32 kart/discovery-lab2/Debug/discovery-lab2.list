
discovery-lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003570  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080036b0  080036b0  000136b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036cc  080036cc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080036cc  080036cc  000136cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036d4  080036d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036d4  080036d4  000136d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036d8  080036d8  000136d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080036dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  2000000c  080036e8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  080036e8  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000900d  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000190a  00000000  00000000  00029042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b8  00000000  00000000  0002a950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f0  00000000  00000000  0002b308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000161a6  00000000  00000000  0002bbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a138  00000000  00000000  00041d9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d144  00000000  00000000  0004bed6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d901a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028e4  00000000  00000000  000d906c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000000c 	.word	0x2000000c
 800015c:	00000000 	.word	0x00000000
 8000160:	08003698 	.word	0x08003698

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000010 	.word	0x20000010
 800017c:	08003698 	.word	0x08003698

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__aeabi_d2iz>:
 800091c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000920:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000924:	d215      	bcs.n	8000952 <__aeabi_d2iz+0x36>
 8000926:	d511      	bpl.n	800094c <__aeabi_d2iz+0x30>
 8000928:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800092c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000930:	d912      	bls.n	8000958 <__aeabi_d2iz+0x3c>
 8000932:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000936:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800093a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800093e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000942:	fa23 f002 	lsr.w	r0, r3, r2
 8000946:	bf18      	it	ne
 8000948:	4240      	negne	r0, r0
 800094a:	4770      	bx	lr
 800094c:	f04f 0000 	mov.w	r0, #0
 8000950:	4770      	bx	lr
 8000952:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000956:	d105      	bne.n	8000964 <__aeabi_d2iz+0x48>
 8000958:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800095c:	bf08      	it	eq
 800095e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000962:	4770      	bx	lr
 8000964:	f04f 0000 	mov.w	r0, #0
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop

0800096c <__aeabi_uldivmod>:
 800096c:	b953      	cbnz	r3, 8000984 <__aeabi_uldivmod+0x18>
 800096e:	b94a      	cbnz	r2, 8000984 <__aeabi_uldivmod+0x18>
 8000970:	2900      	cmp	r1, #0
 8000972:	bf08      	it	eq
 8000974:	2800      	cmpeq	r0, #0
 8000976:	bf1c      	itt	ne
 8000978:	f04f 31ff 	movne.w	r1, #4294967295
 800097c:	f04f 30ff 	movne.w	r0, #4294967295
 8000980:	f000 b976 	b.w	8000c70 <__aeabi_idiv0>
 8000984:	f1ad 0c08 	sub.w	ip, sp, #8
 8000988:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800098c:	f000 f806 	bl	800099c <__udivmoddi4>
 8000990:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000994:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000998:	b004      	add	sp, #16
 800099a:	4770      	bx	lr

0800099c <__udivmoddi4>:
 800099c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009a0:	9e08      	ldr	r6, [sp, #32]
 80009a2:	460d      	mov	r5, r1
 80009a4:	4604      	mov	r4, r0
 80009a6:	4688      	mov	r8, r1
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d14d      	bne.n	8000a48 <__udivmoddi4+0xac>
 80009ac:	428a      	cmp	r2, r1
 80009ae:	4694      	mov	ip, r2
 80009b0:	d968      	bls.n	8000a84 <__udivmoddi4+0xe8>
 80009b2:	fab2 f282 	clz	r2, r2
 80009b6:	b152      	cbz	r2, 80009ce <__udivmoddi4+0x32>
 80009b8:	fa01 f302 	lsl.w	r3, r1, r2
 80009bc:	f1c2 0120 	rsb	r1, r2, #32
 80009c0:	fa20 f101 	lsr.w	r1, r0, r1
 80009c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009c8:	ea41 0803 	orr.w	r8, r1, r3
 80009cc:	4094      	lsls	r4, r2
 80009ce:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80009d2:	fbb8 f7f1 	udiv	r7, r8, r1
 80009d6:	fa1f fe8c 	uxth.w	lr, ip
 80009da:	fb01 8817 	mls	r8, r1, r7, r8
 80009de:	fb07 f00e 	mul.w	r0, r7, lr
 80009e2:	0c23      	lsrs	r3, r4, #16
 80009e4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009e8:	4298      	cmp	r0, r3
 80009ea:	d90a      	bls.n	8000a02 <__udivmoddi4+0x66>
 80009ec:	eb1c 0303 	adds.w	r3, ip, r3
 80009f0:	f107 35ff 	add.w	r5, r7, #4294967295
 80009f4:	f080 811e 	bcs.w	8000c34 <__udivmoddi4+0x298>
 80009f8:	4298      	cmp	r0, r3
 80009fa:	f240 811b 	bls.w	8000c34 <__udivmoddi4+0x298>
 80009fe:	3f02      	subs	r7, #2
 8000a00:	4463      	add	r3, ip
 8000a02:	1a1b      	subs	r3, r3, r0
 8000a04:	fbb3 f0f1 	udiv	r0, r3, r1
 8000a08:	fb01 3310 	mls	r3, r1, r0, r3
 8000a0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a10:	b2a4      	uxth	r4, r4
 8000a12:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a16:	45a6      	cmp	lr, r4
 8000a18:	d90a      	bls.n	8000a30 <__udivmoddi4+0x94>
 8000a1a:	eb1c 0404 	adds.w	r4, ip, r4
 8000a1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a22:	f080 8109 	bcs.w	8000c38 <__udivmoddi4+0x29c>
 8000a26:	45a6      	cmp	lr, r4
 8000a28:	f240 8106 	bls.w	8000c38 <__udivmoddi4+0x29c>
 8000a2c:	4464      	add	r4, ip
 8000a2e:	3802      	subs	r0, #2
 8000a30:	2100      	movs	r1, #0
 8000a32:	eba4 040e 	sub.w	r4, r4, lr
 8000a36:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000a3a:	b11e      	cbz	r6, 8000a44 <__udivmoddi4+0xa8>
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	40d4      	lsrs	r4, r2
 8000a40:	e9c6 4300 	strd	r4, r3, [r6]
 8000a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a48:	428b      	cmp	r3, r1
 8000a4a:	d908      	bls.n	8000a5e <__udivmoddi4+0xc2>
 8000a4c:	2e00      	cmp	r6, #0
 8000a4e:	f000 80ee 	beq.w	8000c2e <__udivmoddi4+0x292>
 8000a52:	2100      	movs	r1, #0
 8000a54:	e9c6 0500 	strd	r0, r5, [r6]
 8000a58:	4608      	mov	r0, r1
 8000a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a5e:	fab3 f183 	clz	r1, r3
 8000a62:	2900      	cmp	r1, #0
 8000a64:	d14a      	bne.n	8000afc <__udivmoddi4+0x160>
 8000a66:	42ab      	cmp	r3, r5
 8000a68:	d302      	bcc.n	8000a70 <__udivmoddi4+0xd4>
 8000a6a:	4282      	cmp	r2, r0
 8000a6c:	f200 80fc 	bhi.w	8000c68 <__udivmoddi4+0x2cc>
 8000a70:	1a84      	subs	r4, r0, r2
 8000a72:	eb65 0303 	sbc.w	r3, r5, r3
 8000a76:	2001      	movs	r0, #1
 8000a78:	4698      	mov	r8, r3
 8000a7a:	2e00      	cmp	r6, #0
 8000a7c:	d0e2      	beq.n	8000a44 <__udivmoddi4+0xa8>
 8000a7e:	e9c6 4800 	strd	r4, r8, [r6]
 8000a82:	e7df      	b.n	8000a44 <__udivmoddi4+0xa8>
 8000a84:	b902      	cbnz	r2, 8000a88 <__udivmoddi4+0xec>
 8000a86:	deff      	udf	#255	; 0xff
 8000a88:	fab2 f282 	clz	r2, r2
 8000a8c:	2a00      	cmp	r2, #0
 8000a8e:	f040 8091 	bne.w	8000bb4 <__udivmoddi4+0x218>
 8000a92:	eba1 000c 	sub.w	r0, r1, ip
 8000a96:	2101      	movs	r1, #1
 8000a98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a9c:	fa1f fe8c 	uxth.w	lr, ip
 8000aa0:	fbb0 f3f7 	udiv	r3, r0, r7
 8000aa4:	fb07 0013 	mls	r0, r7, r3, r0
 8000aa8:	0c25      	lsrs	r5, r4, #16
 8000aaa:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000aae:	fb0e f003 	mul.w	r0, lr, r3
 8000ab2:	42a8      	cmp	r0, r5
 8000ab4:	d908      	bls.n	8000ac8 <__udivmoddi4+0x12c>
 8000ab6:	eb1c 0505 	adds.w	r5, ip, r5
 8000aba:	f103 38ff 	add.w	r8, r3, #4294967295
 8000abe:	d202      	bcs.n	8000ac6 <__udivmoddi4+0x12a>
 8000ac0:	42a8      	cmp	r0, r5
 8000ac2:	f200 80ce 	bhi.w	8000c62 <__udivmoddi4+0x2c6>
 8000ac6:	4643      	mov	r3, r8
 8000ac8:	1a2d      	subs	r5, r5, r0
 8000aca:	fbb5 f0f7 	udiv	r0, r5, r7
 8000ace:	fb07 5510 	mls	r5, r7, r0, r5
 8000ad2:	fb0e fe00 	mul.w	lr, lr, r0
 8000ad6:	b2a4      	uxth	r4, r4
 8000ad8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000adc:	45a6      	cmp	lr, r4
 8000ade:	d908      	bls.n	8000af2 <__udivmoddi4+0x156>
 8000ae0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ae4:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ae8:	d202      	bcs.n	8000af0 <__udivmoddi4+0x154>
 8000aea:	45a6      	cmp	lr, r4
 8000aec:	f200 80b6 	bhi.w	8000c5c <__udivmoddi4+0x2c0>
 8000af0:	4628      	mov	r0, r5
 8000af2:	eba4 040e 	sub.w	r4, r4, lr
 8000af6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000afa:	e79e      	b.n	8000a3a <__udivmoddi4+0x9e>
 8000afc:	f1c1 0720 	rsb	r7, r1, #32
 8000b00:	408b      	lsls	r3, r1
 8000b02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b0a:	fa25 fa07 	lsr.w	sl, r5, r7
 8000b0e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b12:	fbba f8f9 	udiv	r8, sl, r9
 8000b16:	fa20 f307 	lsr.w	r3, r0, r7
 8000b1a:	fb09 aa18 	mls	sl, r9, r8, sl
 8000b1e:	408d      	lsls	r5, r1
 8000b20:	fa1f fe8c 	uxth.w	lr, ip
 8000b24:	431d      	orrs	r5, r3
 8000b26:	fa00 f301 	lsl.w	r3, r0, r1
 8000b2a:	fb08 f00e 	mul.w	r0, r8, lr
 8000b2e:	0c2c      	lsrs	r4, r5, #16
 8000b30:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000b34:	42a0      	cmp	r0, r4
 8000b36:	fa02 f201 	lsl.w	r2, r2, r1
 8000b3a:	d90b      	bls.n	8000b54 <__udivmoddi4+0x1b8>
 8000b3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b44:	f080 8088 	bcs.w	8000c58 <__udivmoddi4+0x2bc>
 8000b48:	42a0      	cmp	r0, r4
 8000b4a:	f240 8085 	bls.w	8000c58 <__udivmoddi4+0x2bc>
 8000b4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b52:	4464      	add	r4, ip
 8000b54:	1a24      	subs	r4, r4, r0
 8000b56:	fbb4 f0f9 	udiv	r0, r4, r9
 8000b5a:	fb09 4410 	mls	r4, r9, r0, r4
 8000b5e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b62:	b2ad      	uxth	r5, r5
 8000b64:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000b68:	45a6      	cmp	lr, r4
 8000b6a:	d908      	bls.n	8000b7e <__udivmoddi4+0x1e2>
 8000b6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b70:	f100 35ff 	add.w	r5, r0, #4294967295
 8000b74:	d26c      	bcs.n	8000c50 <__udivmoddi4+0x2b4>
 8000b76:	45a6      	cmp	lr, r4
 8000b78:	d96a      	bls.n	8000c50 <__udivmoddi4+0x2b4>
 8000b7a:	3802      	subs	r0, #2
 8000b7c:	4464      	add	r4, ip
 8000b7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b82:	fba0 9502 	umull	r9, r5, r0, r2
 8000b86:	eba4 040e 	sub.w	r4, r4, lr
 8000b8a:	42ac      	cmp	r4, r5
 8000b8c:	46c8      	mov	r8, r9
 8000b8e:	46ae      	mov	lr, r5
 8000b90:	d356      	bcc.n	8000c40 <__udivmoddi4+0x2a4>
 8000b92:	d053      	beq.n	8000c3c <__udivmoddi4+0x2a0>
 8000b94:	2e00      	cmp	r6, #0
 8000b96:	d069      	beq.n	8000c6c <__udivmoddi4+0x2d0>
 8000b98:	ebb3 0208 	subs.w	r2, r3, r8
 8000b9c:	eb64 040e 	sbc.w	r4, r4, lr
 8000ba0:	fa22 f301 	lsr.w	r3, r2, r1
 8000ba4:	fa04 f707 	lsl.w	r7, r4, r7
 8000ba8:	431f      	orrs	r7, r3
 8000baa:	40cc      	lsrs	r4, r1
 8000bac:	e9c6 7400 	strd	r7, r4, [r6]
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	e747      	b.n	8000a44 <__udivmoddi4+0xa8>
 8000bb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bb8:	f1c2 0120 	rsb	r1, r2, #32
 8000bbc:	fa25 f301 	lsr.w	r3, r5, r1
 8000bc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bc4:	fa20 f101 	lsr.w	r1, r0, r1
 8000bc8:	4095      	lsls	r5, r2
 8000bca:	430d      	orrs	r5, r1
 8000bcc:	fbb3 f1f7 	udiv	r1, r3, r7
 8000bd0:	fb07 3311 	mls	r3, r7, r1, r3
 8000bd4:	fa1f fe8c 	uxth.w	lr, ip
 8000bd8:	0c28      	lsrs	r0, r5, #16
 8000bda:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bde:	fb01 f30e 	mul.w	r3, r1, lr
 8000be2:	4283      	cmp	r3, r0
 8000be4:	fa04 f402 	lsl.w	r4, r4, r2
 8000be8:	d908      	bls.n	8000bfc <__udivmoddi4+0x260>
 8000bea:	eb1c 0000 	adds.w	r0, ip, r0
 8000bee:	f101 38ff 	add.w	r8, r1, #4294967295
 8000bf2:	d22f      	bcs.n	8000c54 <__udivmoddi4+0x2b8>
 8000bf4:	4283      	cmp	r3, r0
 8000bf6:	d92d      	bls.n	8000c54 <__udivmoddi4+0x2b8>
 8000bf8:	3902      	subs	r1, #2
 8000bfa:	4460      	add	r0, ip
 8000bfc:	1ac0      	subs	r0, r0, r3
 8000bfe:	fbb0 f3f7 	udiv	r3, r0, r7
 8000c02:	fb07 0013 	mls	r0, r7, r3, r0
 8000c06:	b2ad      	uxth	r5, r5
 8000c08:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000c0c:	fb03 f00e 	mul.w	r0, r3, lr
 8000c10:	42a8      	cmp	r0, r5
 8000c12:	d908      	bls.n	8000c26 <__udivmoddi4+0x28a>
 8000c14:	eb1c 0505 	adds.w	r5, ip, r5
 8000c18:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c1c:	d216      	bcs.n	8000c4c <__udivmoddi4+0x2b0>
 8000c1e:	42a8      	cmp	r0, r5
 8000c20:	d914      	bls.n	8000c4c <__udivmoddi4+0x2b0>
 8000c22:	3b02      	subs	r3, #2
 8000c24:	4465      	add	r5, ip
 8000c26:	1a28      	subs	r0, r5, r0
 8000c28:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c2c:	e738      	b.n	8000aa0 <__udivmoddi4+0x104>
 8000c2e:	4631      	mov	r1, r6
 8000c30:	4630      	mov	r0, r6
 8000c32:	e707      	b.n	8000a44 <__udivmoddi4+0xa8>
 8000c34:	462f      	mov	r7, r5
 8000c36:	e6e4      	b.n	8000a02 <__udivmoddi4+0x66>
 8000c38:	4618      	mov	r0, r3
 8000c3a:	e6f9      	b.n	8000a30 <__udivmoddi4+0x94>
 8000c3c:	454b      	cmp	r3, r9
 8000c3e:	d2a9      	bcs.n	8000b94 <__udivmoddi4+0x1f8>
 8000c40:	ebb9 0802 	subs.w	r8, r9, r2
 8000c44:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c48:	3801      	subs	r0, #1
 8000c4a:	e7a3      	b.n	8000b94 <__udivmoddi4+0x1f8>
 8000c4c:	4643      	mov	r3, r8
 8000c4e:	e7ea      	b.n	8000c26 <__udivmoddi4+0x28a>
 8000c50:	4628      	mov	r0, r5
 8000c52:	e794      	b.n	8000b7e <__udivmoddi4+0x1e2>
 8000c54:	4641      	mov	r1, r8
 8000c56:	e7d1      	b.n	8000bfc <__udivmoddi4+0x260>
 8000c58:	46d0      	mov	r8, sl
 8000c5a:	e77b      	b.n	8000b54 <__udivmoddi4+0x1b8>
 8000c5c:	4464      	add	r4, ip
 8000c5e:	3802      	subs	r0, #2
 8000c60:	e747      	b.n	8000af2 <__udivmoddi4+0x156>
 8000c62:	3b02      	subs	r3, #2
 8000c64:	4465      	add	r5, ip
 8000c66:	e72f      	b.n	8000ac8 <__udivmoddi4+0x12c>
 8000c68:	4608      	mov	r0, r1
 8000c6a:	e706      	b.n	8000a7a <__udivmoddi4+0xde>
 8000c6c:	4631      	mov	r1, r6
 8000c6e:	e6e9      	b.n	8000a44 <__udivmoddi4+0xa8>

08000c70 <__aeabi_idiv0>:
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop

08000c74 <TIM4_IRQHandler>:


/*
 * Timer for counters such as the beeping of the buzzer
 */
void TIM4_IRQHandler(void) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  if ((TIM4->SR & 0x0002) != 0) {
 8000c78:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <TIM4_IRQHandler+0x30>)
 8000c7a:	691b      	ldr	r3, [r3, #16]
 8000c7c:	f003 0302 	and.w	r3, r3, #2
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d00d      	beq.n	8000ca0 <TIM4_IRQHandler+0x2c>
    if (g_robot.buzzer->status == BUZZER_BEEPING) {
 8000c84:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <TIM4_IRQHandler+0x34>)
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d105      	bne.n	8000c9a <TIM4_IRQHandler+0x26>
      toggleGPIOPin(g_robot.buzzer->gpio_pin);
 8000c8e:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <TIM4_IRQHandler+0x34>)
 8000c90:	689b      	ldr	r3, [r3, #8]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f000 fda3 	bl	80017e0 <toggleGPIOPin>
    }

    TIM4->SR = 0;
 8000c9a:	4b02      	ldr	r3, [pc, #8]	; (8000ca4 <TIM4_IRQHandler+0x30>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  }
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40000800 	.word	0x40000800
 8000ca8:	2000013c 	.word	0x2000013c

08000cac <TIM3_IRQHandler>:

void TIM3_IRQHandler(void) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  if ((TIM3->SR & 0x0002) != 0) { // Channel 1
 8000cb0:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <TIM3_IRQHandler+0x68>)
 8000cb2:	691b      	ldr	r3, [r3, #16]
 8000cb4:	f003 0302 	and.w	r3, r3, #2
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d028      	beq.n	8000d0e <TIM3_IRQHandler+0x62>
    if (g_robot.ultrasound->status == ULTRASOUND_TRIGGER_START) {
 8000cbc:	4b16      	ldr	r3, [pc, #88]	; (8000d18 <TIM3_IRQHandler+0x6c>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d110      	bne.n	8000ce8 <TIM3_IRQHandler+0x3c>
      updateStatusGPIOPin(g_robot.ultrasound->trigger, GPIO_PIN_UP);
 8000cc6:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <TIM3_IRQHandler+0x6c>)
 8000cc8:	68db      	ldr	r3, [r3, #12]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 fd50 	bl	8001774 <updateStatusGPIOPin>
      TIM3->CCR1 = TIM3->CNT + 10;
 8000cd4:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <TIM3_IRQHandler+0x68>)
 8000cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd8:	4a0e      	ldr	r2, [pc, #56]	; (8000d14 <TIM3_IRQHandler+0x68>)
 8000cda:	330a      	adds	r3, #10
 8000cdc:	6353      	str	r3, [r2, #52]	; 0x34
      g_robot.ultrasound->status = ULTRASOUND_TRIGGER_ON;
 8000cde:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <TIM3_IRQHandler+0x6c>)
 8000ce0:	68db      	ldr	r3, [r3, #12]
 8000ce2:	2202      	movs	r2, #2
 8000ce4:	701a      	strb	r2, [r3, #0]
 8000ce6:	e00f      	b.n	8000d08 <TIM3_IRQHandler+0x5c>

    } else if (g_robot.ultrasound->status == ULTRASOUND_TRIGGER_ON) {
 8000ce8:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <TIM3_IRQHandler+0x6c>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d10a      	bne.n	8000d08 <TIM3_IRQHandler+0x5c>
      updateStatusGPIOPin(g_robot.ultrasound->trigger, GPIO_PIN_DOWN);
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <TIM3_IRQHandler+0x6c>)
 8000cf4:	68db      	ldr	r3, [r3, #12]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 fd3a 	bl	8001774 <updateStatusGPIOPin>
      g_robot.ultrasound->status = ULTRASOUND_TRIGGER_SENT;
 8000d00:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <TIM3_IRQHandler+0x6c>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	2203      	movs	r2, #3
 8000d06:	701a      	strb	r2, [r3, #0]
    }

    TIM3->SR = 0;
 8000d08:	4b02      	ldr	r3, [pc, #8]	; (8000d14 <TIM3_IRQHandler+0x68>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	611a      	str	r2, [r3, #16]
  }
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40000400 	.word	0x40000400
 8000d18:	2000013c 	.word	0x2000013c
 8000d1c:	00000000 	.word	0x00000000

08000d20 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
  if ((TIM2->SR & 0x0002) != 0) { // Channel 1
 8000d26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d2a:	691b      	ldr	r3, [r3, #16]
 8000d2c:	f003 0302 	and.w	r3, r3, #2
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d060      	beq.n	8000df6 <TIM2_IRQHandler+0xd6>
    if (g_robot.ultrasound->status == ULTRASOUND_TRIGGER_SENT) {
 8000d34:	4b34      	ldr	r3, [pc, #208]	; (8000e08 <TIM2_IRQHandler+0xe8>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b03      	cmp	r3, #3
 8000d3c:	d10b      	bne.n	8000d56 <TIM2_IRQHandler+0x36>
      g_robot.ultrasound->status = ULTRASOUND_MEASURING;
 8000d3e:	4b32      	ldr	r3, [pc, #200]	; (8000e08 <TIM2_IRQHandler+0xe8>)
 8000d40:	68db      	ldr	r3, [r3, #12]
 8000d42:	2204      	movs	r2, #4
 8000d44:	701a      	strb	r2, [r3, #0]
      g_robot.ultrasound->time_init = TIM2->CCR1;
 8000d46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d4c:	4b2e      	ldr	r3, [pc, #184]	; (8000e08 <TIM2_IRQHandler+0xe8>)
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	b292      	uxth	r2, r2
 8000d52:	819a      	strh	r2, [r3, #12]
 8000d54:	e04b      	b.n	8000dee <TIM2_IRQHandler+0xce>

    } else if(g_robot.ultrasound->status == ULTRASOUND_MEASURING) {
 8000d56:	4b2c      	ldr	r3, [pc, #176]	; (8000e08 <TIM2_IRQHandler+0xe8>)
 8000d58:	68db      	ldr	r3, [r3, #12]
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b04      	cmp	r3, #4
 8000d5e:	d146      	bne.n	8000dee <TIM2_IRQHandler+0xce>
      int delay = TIM2->CCR1 - g_robot.ultrasound->time_init;
 8000d60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d66:	4a28      	ldr	r2, [pc, #160]	; (8000e08 <TIM2_IRQHandler+0xe8>)
 8000d68:	68d2      	ldr	r2, [r2, #12]
 8000d6a:	8992      	ldrh	r2, [r2, #12]
 8000d6c:	1a9b      	subs	r3, r3, r2
 8000d6e:	607b      	str	r3, [r7, #4]
      if (delay < 0) {
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	da04      	bge.n	8000d80 <TIM2_IRQHandler+0x60>
        delay += 0xFFFF; // Handle counter overflows
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000d7c:	33ff      	adds	r3, #255	; 0xff
 8000d7e:	607b      	str	r3, [r7, #4]
      }
      int distance = ((delay) * 0.034) / 2;
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f7ff fb4f 	bl	8000424 <__aeabi_i2d>
 8000d86:	a31e      	add	r3, pc, #120	; (adr r3, 8000e00 <TIM2_IRQHandler+0xe0>)
 8000d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d8c:	f7ff fbb4 	bl	80004f8 <__aeabi_dmul>
 8000d90:	4602      	mov	r2, r0
 8000d92:	460b      	mov	r3, r1
 8000d94:	4610      	mov	r0, r2
 8000d96:	4619      	mov	r1, r3
 8000d98:	f04f 0200 	mov.w	r2, #0
 8000d9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000da0:	f7ff fcd4 	bl	800074c <__aeabi_ddiv>
 8000da4:	4602      	mov	r2, r0
 8000da6:	460b      	mov	r3, r1
 8000da8:	4610      	mov	r0, r2
 8000daa:	4619      	mov	r1, r3
 8000dac:	f7ff fdb6 	bl	800091c <__aeabi_d2iz>
 8000db0:	4603      	mov	r3, r0
 8000db2:	603b      	str	r3, [r7, #0]
      if (g_robot.ultrasound->distance != distance) {
 8000db4:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <TIM2_IRQHandler+0xe8>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	691b      	ldr	r3, [r3, #16]
 8000dba:	683a      	ldr	r2, [r7, #0]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d00c      	beq.n	8000dda <TIM2_IRQHandler+0xba>
        if (g_robot.ultrasound->distance != 0) {
 8000dc0:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <TIM2_IRQHandler+0xe8>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	691b      	ldr	r3, [r3, #16]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d003      	beq.n	8000dd2 <TIM2_IRQHandler+0xb2>
          g_robot.ultrasound->status_distance = DISTANCE_CHANGED;
 8000dca:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <TIM2_IRQHandler+0xe8>)
 8000dcc:	68db      	ldr	r3, [r3, #12]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	739a      	strb	r2, [r3, #14]
        }
        g_robot.ultrasound->distance = distance;
 8000dd2:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <TIM2_IRQHandler+0xe8>)
 8000dd4:	68db      	ldr	r3, [r3, #12]
 8000dd6:	683a      	ldr	r2, [r7, #0]
 8000dd8:	611a      	str	r2, [r3, #16]
      }

      g_robot.ultrasound->status = ULTRASOUND_TRIGGER_START;
 8000dda:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <TIM2_IRQHandler+0xe8>)
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	2201      	movs	r2, #1
 8000de0:	701a      	strb	r2, [r3, #0]
      TIM3->EGR |= 0x0001; // UG = 1 -> Generate update event
 8000de2:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <TIM2_IRQHandler+0xec>)
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	4a09      	ldr	r2, [pc, #36]	; (8000e0c <TIM2_IRQHandler+0xec>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6153      	str	r3, [r2, #20]
    }

    TIM2->SR = 0; // Clear flags
 8000dee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000df2:	2200      	movs	r2, #0
 8000df4:	611a      	str	r2, [r3, #16]
  }
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	b020c49c 	.word	0xb020c49c
 8000e04:	3fa16872 	.word	0x3fa16872
 8000e08:	2000013c 	.word	0x2000013c
 8000e0c:	40000400 	.word	0x40000400

08000e10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e16:	f000 fe66 	bl	8001ae6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e1a:	f000 f835 	bl	8000e88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e1e:	f000 f9c9 	bl	80011b4 <MX_GPIO_Init>
  MX_ADC_Init();
 8000e22:	f000 f87f 	bl	8000f24 <MX_ADC_Init>
  MX_TS_Init();
 8000e26:	f000 f9bf 	bl	80011a8 <MX_TS_Init>
  MX_TIM3_Init();
 8000e2a:	f000 f921 	bl	8001070 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000e2e:	f000 f8d3 	bl	8000fd8 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000e32:	f000 f96b 	bl	800110c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  createRobot();
 8000e36:	f000 fccb 	bl	80017d0 <createRobot>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if ((g_robot.ultrasound->status != ULTRASOUND_MEASURING) && g_robot.ultrasound->status_distance == DISTANCE_CHANGED) {
 8000e3a:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <main+0x74>)
 8000e3c:	68db      	ldr	r3, [r3, #12]
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b04      	cmp	r3, #4
 8000e42:	d0fa      	beq.n	8000e3a <main+0x2a>
 8000e44:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <main+0x74>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	7b9b      	ldrb	r3, [r3, #14]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d1f5      	bne.n	8000e3a <main+0x2a>
      g_robot.ultrasound->status_distance = DISTANCE_DID_NOT_CHANGE;
 8000e4e:	4b0d      	ldr	r3, [pc, #52]	; (8000e84 <main+0x74>)
 8000e50:	68db      	ldr	r3, [r3, #12]
 8000e52:	2201      	movs	r2, #1
 8000e54:	739a      	strb	r2, [r3, #14]

      enum StatusBuzzer status_buzzer;

      if (g_robot.ultrasound->distance < 10) {
 8000e56:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <main+0x74>)
 8000e58:	68db      	ldr	r3, [r3, #12]
 8000e5a:	691b      	ldr	r3, [r3, #16]
 8000e5c:	2b09      	cmp	r3, #9
 8000e5e:	dc02      	bgt.n	8000e66 <main+0x56>
        status_buzzer = BUZZER_ON;
 8000e60:	2301      	movs	r3, #1
 8000e62:	71fb      	strb	r3, [r7, #7]
 8000e64:	e009      	b.n	8000e7a <main+0x6a>
      } else if (g_robot.ultrasound->distance < 20) {
 8000e66:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <main+0x74>)
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	691b      	ldr	r3, [r3, #16]
 8000e6c:	2b13      	cmp	r3, #19
 8000e6e:	dc02      	bgt.n	8000e76 <main+0x66>
        status_buzzer = BUZZER_BEEPING;
 8000e70:	2302      	movs	r3, #2
 8000e72:	71fb      	strb	r3, [r7, #7]
 8000e74:	e001      	b.n	8000e7a <main+0x6a>
      } else {
        status_buzzer = BUZZER_OFF;
 8000e76:	2300      	movs	r3, #0
 8000e78:	71fb      	strb	r3, [r7, #7]
      }

      updateStatusBuzzer(status_buzzer);
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f000 fcdf 	bl	8001840 <updateStatusBuzzer>
    if ((g_robot.ultrasound->status != ULTRASOUND_MEASURING) && g_robot.ultrasound->status_distance == DISTANCE_CHANGED) {
 8000e82:	e7da      	b.n	8000e3a <main+0x2a>
 8000e84:	2000013c 	.word	0x2000013c

08000e88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b092      	sub	sp, #72	; 0x48
 8000e8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	2234      	movs	r2, #52	; 0x34
 8000e94:	2100      	movs	r1, #0
 8000e96:	4618      	mov	r0, r3
 8000e98:	f002 fbf6 	bl	8003688 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e9c:	463b      	mov	r3, r7
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
 8000ea8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eaa:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <SystemClock_Config+0x98>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000eb2:	4a1b      	ldr	r2, [pc, #108]	; (8000f20 <SystemClock_Config+0x98>)
 8000eb4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000eb8:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ec2:	2310      	movs	r3, #16
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000ece:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000ed2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000ed4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000ed8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f001 fb82 	bl	80025e8 <HAL_RCC_OscConfig>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000eea:	f000 fa13 	bl	8001314 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eee:	230f      	movs	r3, #15
 8000ef0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f02:	463b      	mov	r3, r7
 8000f04:	2101      	movs	r1, #1
 8000f06:	4618      	mov	r0, r3
 8000f08:	f001 fe9e 	bl	8002c48 <HAL_RCC_ClockConfig>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000f12:	f000 f9ff 	bl	8001314 <Error_Handler>
  }
}
 8000f16:	bf00      	nop
 8000f18:	3748      	adds	r7, #72	; 0x48
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40007000 	.word	0x40007000

08000f24 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000f34:	4b26      	ldr	r3, [pc, #152]	; (8000fd0 <MX_ADC_Init+0xac>)
 8000f36:	4a27      	ldr	r2, [pc, #156]	; (8000fd4 <MX_ADC_Init+0xb0>)
 8000f38:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f3a:	4b25      	ldr	r3, [pc, #148]	; (8000fd0 <MX_ADC_Init+0xac>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000f40:	4b23      	ldr	r3, [pc, #140]	; (8000fd0 <MX_ADC_Init+0xac>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f46:	4b22      	ldr	r3, [pc, #136]	; (8000fd0 <MX_ADC_Init+0xac>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f4c:	4b20      	ldr	r3, [pc, #128]	; (8000fd0 <MX_ADC_Init+0xac>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000f52:	4b1f      	ldr	r3, [pc, #124]	; (8000fd0 <MX_ADC_Init+0xac>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000f58:	4b1d      	ldr	r3, [pc, #116]	; (8000fd0 <MX_ADC_Init+0xac>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	; (8000fd0 <MX_ADC_Init+0xac>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000f64:	4b1a      	ldr	r3, [pc, #104]	; (8000fd0 <MX_ADC_Init+0xac>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000f6a:	4b19      	ldr	r3, [pc, #100]	; (8000fd0 <MX_ADC_Init+0xac>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 8000f72:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <MX_ADC_Init+0xac>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000f78:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <MX_ADC_Init+0xac>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_CC3;
 8000f80:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <MX_ADC_Init+0xac>)
 8000f82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f86:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <MX_ADC_Init+0xac>)
 8000f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f8e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000f90:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <MX_ADC_Init+0xac>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000f98:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <MX_ADC_Init+0xac>)
 8000f9a:	f000 fe13 	bl	8001bc4 <HAL_ADC_Init>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_ADC_Init+0x84>
  {
    Error_Handler();
 8000fa4:	f000 f9b6 	bl	8001314 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000fa8:	2304      	movs	r3, #4
 8000faa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fac:	2301      	movs	r3, #1
 8000fae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <MX_ADC_Init+0xac>)
 8000fba:	f000 ff49 	bl	8001e50 <HAL_ADC_ConfigChannel>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000fc4:	f000 f9a6 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000fc8:	bf00      	nop
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000028 	.word	0x20000028
 8000fd4:	40012400 	.word	0x40012400

08000fd8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fde:	f107 0308 	add.w	r3, r7, #8
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fec:	463b      	mov	r3, r7
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ff4:	4b1d      	ldr	r3, [pc, #116]	; (800106c <MX_TIM2_Init+0x94>)
 8000ff6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ffa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ffc:	4b1b      	ldr	r3, [pc, #108]	; (800106c <MX_TIM2_Init+0x94>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001002:	4b1a      	ldr	r3, [pc, #104]	; (800106c <MX_TIM2_Init+0x94>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001008:	4b18      	ldr	r3, [pc, #96]	; (800106c <MX_TIM2_Init+0x94>)
 800100a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800100e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001010:	4b16      	ldr	r3, [pc, #88]	; (800106c <MX_TIM2_Init+0x94>)
 8001012:	2200      	movs	r2, #0
 8001014:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001016:	4b15      	ldr	r3, [pc, #84]	; (800106c <MX_TIM2_Init+0x94>)
 8001018:	2200      	movs	r2, #0
 800101a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800101c:	4813      	ldr	r0, [pc, #76]	; (800106c <MX_TIM2_Init+0x94>)
 800101e:	f002 f8a7 	bl	8003170 <HAL_TIM_Base_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001028:	f000 f974 	bl	8001314 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800102c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001030:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001032:	f107 0308 	add.w	r3, r7, #8
 8001036:	4619      	mov	r1, r3
 8001038:	480c      	ldr	r0, [pc, #48]	; (800106c <MX_TIM2_Init+0x94>)
 800103a:	f002 f8d8 	bl	80031ee <HAL_TIM_ConfigClockSource>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001044:	f000 f966 	bl	8001314 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001048:	2300      	movs	r3, #0
 800104a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800104c:	2300      	movs	r3, #0
 800104e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001050:	463b      	mov	r3, r7
 8001052:	4619      	mov	r1, r3
 8001054:	4805      	ldr	r0, [pc, #20]	; (800106c <MX_TIM2_Init+0x94>)
 8001056:	f002 fa95 	bl	8003584 <HAL_TIMEx_MasterConfigSynchronization>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001060:	f000 f958 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001064:	bf00      	nop
 8001066:	3718      	adds	r7, #24
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	2000007c 	.word	0x2000007c

08001070 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001076:	f107 0308 	add.w	r3, r7, #8
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001084:	463b      	mov	r3, r7
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800108c:	4b1d      	ldr	r3, [pc, #116]	; (8001104 <MX_TIM3_Init+0x94>)
 800108e:	4a1e      	ldr	r2, [pc, #120]	; (8001108 <MX_TIM3_Init+0x98>)
 8001090:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001092:	4b1c      	ldr	r3, [pc, #112]	; (8001104 <MX_TIM3_Init+0x94>)
 8001094:	2200      	movs	r2, #0
 8001096:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001098:	4b1a      	ldr	r3, [pc, #104]	; (8001104 <MX_TIM3_Init+0x94>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800109e:	4b19      	ldr	r3, [pc, #100]	; (8001104 <MX_TIM3_Init+0x94>)
 80010a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a6:	4b17      	ldr	r3, [pc, #92]	; (8001104 <MX_TIM3_Init+0x94>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ac:	4b15      	ldr	r3, [pc, #84]	; (8001104 <MX_TIM3_Init+0x94>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010b2:	4814      	ldr	r0, [pc, #80]	; (8001104 <MX_TIM3_Init+0x94>)
 80010b4:	f002 f85c 	bl	8003170 <HAL_TIM_Base_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80010be:	f000 f929 	bl	8001314 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010c8:	f107 0308 	add.w	r3, r7, #8
 80010cc:	4619      	mov	r1, r3
 80010ce:	480d      	ldr	r0, [pc, #52]	; (8001104 <MX_TIM3_Init+0x94>)
 80010d0:	f002 f88d 	bl	80031ee <HAL_TIM_ConfigClockSource>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80010da:	f000 f91b 	bl	8001314 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010de:	2300      	movs	r3, #0
 80010e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e2:	2300      	movs	r3, #0
 80010e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010e6:	463b      	mov	r3, r7
 80010e8:	4619      	mov	r1, r3
 80010ea:	4806      	ldr	r0, [pc, #24]	; (8001104 <MX_TIM3_Init+0x94>)
 80010ec:	f002 fa4a 	bl	8003584 <HAL_TIMEx_MasterConfigSynchronization>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80010f6:	f000 f90d 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80010fa:	bf00      	nop
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200000bc 	.word	0x200000bc
 8001108:	40000400 	.word	0x40000400

0800110c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001112:	f107 0308 	add.w	r3, r7, #8
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001120:	463b      	mov	r3, r7
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001128:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <MX_TIM4_Init+0x94>)
 800112a:	4a1e      	ldr	r2, [pc, #120]	; (80011a4 <MX_TIM4_Init+0x98>)
 800112c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800112e:	4b1c      	ldr	r3, [pc, #112]	; (80011a0 <MX_TIM4_Init+0x94>)
 8001130:	2200      	movs	r2, #0
 8001132:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001134:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <MX_TIM4_Init+0x94>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800113a:	4b19      	ldr	r3, [pc, #100]	; (80011a0 <MX_TIM4_Init+0x94>)
 800113c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001140:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001142:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <MX_TIM4_Init+0x94>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001148:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <MX_TIM4_Init+0x94>)
 800114a:	2200      	movs	r2, #0
 800114c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800114e:	4814      	ldr	r0, [pc, #80]	; (80011a0 <MX_TIM4_Init+0x94>)
 8001150:	f002 f80e 	bl	8003170 <HAL_TIM_Base_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800115a:	f000 f8db 	bl	8001314 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800115e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001162:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001164:	f107 0308 	add.w	r3, r7, #8
 8001168:	4619      	mov	r1, r3
 800116a:	480d      	ldr	r0, [pc, #52]	; (80011a0 <MX_TIM4_Init+0x94>)
 800116c:	f002 f83f 	bl	80031ee <HAL_TIM_ConfigClockSource>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001176:	f000 f8cd 	bl	8001314 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800117a:	2300      	movs	r3, #0
 800117c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800117e:	2300      	movs	r3, #0
 8001180:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001182:	463b      	mov	r3, r7
 8001184:	4619      	mov	r1, r3
 8001186:	4806      	ldr	r0, [pc, #24]	; (80011a0 <MX_TIM4_Init+0x94>)
 8001188:	f002 f9fc 	bl	8003584 <HAL_TIMEx_MasterConfigSynchronization>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001192:	f000 f8bf 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001196:	bf00      	nop
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	200000fc 	.word	0x200000fc
 80011a4:	40000800 	.word	0x40000800

080011a8 <MX_TS_Init>:
  * @brief TS Initialization Function
  * @param None
  * @retval None
  */
static void MX_TS_Init(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE END TS_Init 1 */
  /* USER CODE BEGIN TS_Init 2 */

  /* USER CODE END TS_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr

080011b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08a      	sub	sp, #40	; 0x28
 80011b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
 80011c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ca:	4b4d      	ldr	r3, [pc, #308]	; (8001300 <MX_GPIO_Init+0x14c>)
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	4a4c      	ldr	r2, [pc, #304]	; (8001300 <MX_GPIO_Init+0x14c>)
 80011d0:	f043 0304 	orr.w	r3, r3, #4
 80011d4:	61d3      	str	r3, [r2, #28]
 80011d6:	4b4a      	ldr	r3, [pc, #296]	; (8001300 <MX_GPIO_Init+0x14c>)
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	f003 0304 	and.w	r3, r3, #4
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	4b47      	ldr	r3, [pc, #284]	; (8001300 <MX_GPIO_Init+0x14c>)
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	4a46      	ldr	r2, [pc, #280]	; (8001300 <MX_GPIO_Init+0x14c>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	61d3      	str	r3, [r2, #28]
 80011ee:	4b44      	ldr	r3, [pc, #272]	; (8001300 <MX_GPIO_Init+0x14c>)
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fa:	4b41      	ldr	r3, [pc, #260]	; (8001300 <MX_GPIO_Init+0x14c>)
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	4a40      	ldr	r2, [pc, #256]	; (8001300 <MX_GPIO_Init+0x14c>)
 8001200:	f043 0302 	orr.w	r3, r3, #2
 8001204:	61d3      	str	r3, [r2, #28]
 8001206:	4b3e      	ldr	r3, [pc, #248]	; (8001300 <MX_GPIO_Init+0x14c>)
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001212:	4b3b      	ldr	r3, [pc, #236]	; (8001300 <MX_GPIO_Init+0x14c>)
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	4a3a      	ldr	r2, [pc, #232]	; (8001300 <MX_GPIO_Init+0x14c>)
 8001218:	f043 0308 	orr.w	r3, r3, #8
 800121c:	61d3      	str	r3, [r2, #28]
 800121e:	4b38      	ldr	r3, [pc, #224]	; (8001300 <MX_GPIO_Init+0x14c>)
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	f003 0308 	and.w	r3, r3, #8
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800122a:	2200      	movs	r2, #0
 800122c:	2104      	movs	r1, #4
 800122e:	4835      	ldr	r0, [pc, #212]	; (8001304 <MX_GPIO_Init+0x150>)
 8001230:	f001 f9c2 	bl	80025b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001234:	2200      	movs	r2, #0
 8001236:	21c0      	movs	r1, #192	; 0xc0
 8001238:	4833      	ldr	r0, [pc, #204]	; (8001308 <MX_GPIO_Init+0x154>)
 800123a:	f001 f9bd 	bl	80025b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SEG14_Pin SEG15_Pin SEG16_Pin SEG17_Pin
                           SEG18_Pin SEG19_Pin SEG20_Pin SEG21_Pin
                           SEG22_Pin SEG23_Pin */
  GPIO_InitStruct.Pin = SEG14_Pin|SEG15_Pin|SEG16_Pin|SEG17_Pin
 800123e:	f640 73cf 	movw	r3, #4047	; 0xfcf
 8001242:	617b      	str	r3, [r7, #20]
                          |SEG18_Pin|SEG19_Pin|SEG20_Pin|SEG21_Pin
                          |SEG22_Pin|SEG23_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001244:	2302      	movs	r3, #2
 8001246:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124c:	2300      	movs	r3, #0
 800124e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8001250:	230b      	movs	r3, #11
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	4619      	mov	r1, r3
 800125a:	482c      	ldr	r0, [pc, #176]	; (800130c <MX_GPIO_Init+0x158>)
 800125c:	f001 f82c 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001260:	2301      	movs	r3, #1
 8001262:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001264:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001268:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800126e:	f107 0314 	add.w	r3, r7, #20
 8001272:	4619      	mov	r1, r3
 8001274:	4826      	ldr	r0, [pc, #152]	; (8001310 <MX_GPIO_Init+0x15c>)
 8001276:	f001 f81f 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin COM0_Pin
                           COM1_Pin COM2_Pin SEG12_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|COM0_Pin
 800127a:	f248 730e 	movw	r3, #34574	; 0x870e
 800127e:	617b      	str	r3, [r7, #20]
                          |COM1_Pin|COM2_Pin|SEG12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001280:	2302      	movs	r3, #2
 8001282:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001288:	2300      	movs	r3, #0
 800128a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800128c:	230b      	movs	r3, #11
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	4619      	mov	r1, r3
 8001296:	481e      	ldr	r0, [pc, #120]	; (8001310 <MX_GPIO_Init+0x15c>)
 8001298:	f001 f80e 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG6_Pin SEG7_Pin SEG8_Pin SEG9_Pin
                           SEG10_Pin SEG11_Pin SEG3_Pin SEG4_Pin
                           SEG5_Pin SEG13_Pin COM3_Pin */
  GPIO_InitStruct.Pin = SEG6_Pin|SEG7_Pin|SEG8_Pin|SEG9_Pin
 800129c:	f64f 7338 	movw	r3, #65336	; 0xff38
 80012a0:	617b      	str	r3, [r7, #20]
                          |SEG10_Pin|SEG11_Pin|SEG3_Pin|SEG4_Pin
                          |SEG5_Pin|SEG13_Pin|COM3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a2:	2302      	movs	r3, #2
 80012a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012aa:	2300      	movs	r3, #0
 80012ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80012ae:	230b      	movs	r3, #11
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	4619      	mov	r1, r3
 80012b8:	4813      	ldr	r0, [pc, #76]	; (8001308 <MX_GPIO_Init+0x154>)
 80012ba:	f000 fffd 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012be:	2304      	movs	r3, #4
 80012c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c2:	2301      	movs	r3, #1
 80012c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ca:	2300      	movs	r3, #0
 80012cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ce:	f107 0314 	add.w	r3, r7, #20
 80012d2:	4619      	mov	r1, r3
 80012d4:	480b      	ldr	r0, [pc, #44]	; (8001304 <MX_GPIO_Init+0x150>)
 80012d6:	f000 ffef 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 80012da:	23c0      	movs	r3, #192	; 0xc0
 80012dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012de:	2301      	movs	r3, #1
 80012e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e6:	2300      	movs	r3, #0
 80012e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	4619      	mov	r1, r3
 80012f0:	4805      	ldr	r0, [pc, #20]	; (8001308 <MX_GPIO_Init+0x154>)
 80012f2:	f000 ffe1 	bl	80022b8 <HAL_GPIO_Init>

}
 80012f6:	bf00      	nop
 80012f8:	3728      	adds	r7, #40	; 0x28
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40023800 	.word	0x40023800
 8001304:	40020c00 	.word	0x40020c00
 8001308:	40020400 	.word	0x40020400
 800130c:	40020800 	.word	0x40020800
 8001310:	40020000 	.word	0x40020000

08001314 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001318:	b672      	cpsid	i
}
 800131a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 800131c:	e7fe      	b.n	800131c <Error_Handler+0x8>

0800131e <initGPIOPin>:
static struct Ultrasound s_ultrasound;

/*
 * Initializes the basic structure of a gpio pin with the default speed
 */
static void initGPIOPin(struct GPIOPin *gpio_pin, GPIO_TypeDef *gpio, char pin) {
 800131e:	b480      	push	{r7}
 8001320:	b085      	sub	sp, #20
 8001322:	af00      	add	r7, sp, #0
 8001324:	60f8      	str	r0, [r7, #12]
 8001326:	60b9      	str	r1, [r7, #8]
 8001328:	4613      	mov	r3, r2
 800132a:	71fb      	strb	r3, [r7, #7]
  gpio_pin->gpio = gpio;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	68ba      	ldr	r2, [r7, #8]
 8001330:	601a      	str	r2, [r3, #0]
  gpio_pin->pin = pin;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	79fa      	ldrb	r2, [r7, #7]
 8001336:	711a      	strb	r2, [r3, #4]

  gpio->OTYPER &= ~(1 << pin);
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	79fa      	ldrb	r2, [r7, #7]
 800133e:	2101      	movs	r1, #1
 8001340:	fa01 f202 	lsl.w	r2, r1, r2
 8001344:	43d2      	mvns	r2, r2
 8001346:	401a      	ands	r2, r3
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	605a      	str	r2, [r3, #4]

  gpio->OSPEEDR &= ~(1 << (pin * 2 + 1));
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	79fa      	ldrb	r2, [r7, #7]
 8001352:	0052      	lsls	r2, r2, #1
 8001354:	3201      	adds	r2, #1
 8001356:	2101      	movs	r1, #1
 8001358:	fa01 f202 	lsl.w	r2, r1, r2
 800135c:	43d2      	mvns	r2, r2
 800135e:	401a      	ands	r2, r3
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	609a      	str	r2, [r3, #8]
  gpio->OSPEEDR &= ~(1 << (pin * 2));
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	79fa      	ldrb	r2, [r7, #7]
 800136a:	0052      	lsls	r2, r2, #1
 800136c:	2101      	movs	r1, #1
 800136e:	fa01 f202 	lsl.w	r2, r1, r2
 8001372:	43d2      	mvns	r2, r2
 8001374:	401a      	ands	r2, r3
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	609a      	str	r2, [r3, #8]
}
 800137a:	bf00      	nop
 800137c:	3714      	adds	r7, #20
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr

08001384 <initOutputGPIOPin>:

static void initOutputGPIOPin(struct GPIOPin *gpio_pin, GPIO_TypeDef *gpio, char pin) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	4613      	mov	r3, r2
 8001390:	71fb      	strb	r3, [r7, #7]
  initGPIOPin(gpio_pin, gpio, pin);
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	461a      	mov	r2, r3
 8001396:	68b9      	ldr	r1, [r7, #8]
 8001398:	68f8      	ldr	r0, [r7, #12]
 800139a:	f7ff ffc0 	bl	800131e <initGPIOPin>

  // 01 the register
  gpio->MODER &= ~(1 << (pin * 2 + 1));
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	79fa      	ldrb	r2, [r7, #7]
 80013a4:	0052      	lsls	r2, r2, #1
 80013a6:	3201      	adds	r2, #1
 80013a8:	2101      	movs	r1, #1
 80013aa:	fa01 f202 	lsl.w	r2, r1, r2
 80013ae:	43d2      	mvns	r2, r2
 80013b0:	401a      	ands	r2, r3
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	601a      	str	r2, [r3, #0]
  gpio->MODER |= (1 << (pin * 2));
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	79fa      	ldrb	r2, [r7, #7]
 80013bc:	0052      	lsls	r2, r2, #1
 80013be:	2101      	movs	r1, #1
 80013c0:	fa01 f202 	lsl.w	r2, r1, r2
 80013c4:	431a      	orrs	r2, r3
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	601a      	str	r2, [r3, #0]
}
 80013ca:	bf00      	nop
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <initAFGPIOPin>:

static void initAFGPIOPin(struct GPIOPin *gpio_pin, GPIO_TypeDef *gpio, char pin, char af) {
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b086      	sub	sp, #24
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	60f8      	str	r0, [r7, #12]
 80013da:	60b9      	str	r1, [r7, #8]
 80013dc:	4611      	mov	r1, r2
 80013de:	461a      	mov	r2, r3
 80013e0:	460b      	mov	r3, r1
 80013e2:	71fb      	strb	r3, [r7, #7]
 80013e4:	4613      	mov	r3, r2
 80013e6:	71bb      	strb	r3, [r7, #6]
  initGPIOPin(gpio_pin, gpio, pin);
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	461a      	mov	r2, r3
 80013ec:	68b9      	ldr	r1, [r7, #8]
 80013ee:	68f8      	ldr	r0, [r7, #12]
 80013f0:	f7ff ff95 	bl	800131e <initGPIOPin>

  // 10 the register
  gpio->MODER |= (1 << (pin * 2 + 1));
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	79fa      	ldrb	r2, [r7, #7]
 80013fa:	0052      	lsls	r2, r2, #1
 80013fc:	3201      	adds	r2, #1
 80013fe:	2101      	movs	r1, #1
 8001400:	fa01 f202 	lsl.w	r2, r1, r2
 8001404:	431a      	orrs	r2, r3
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	601a      	str	r2, [r3, #0]
  gpio->MODER &= ~(1 << (pin * 2));
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	79fa      	ldrb	r2, [r7, #7]
 8001410:	0052      	lsls	r2, r2, #1
 8001412:	2101      	movs	r1, #1
 8001414:	fa01 f202 	lsl.w	r2, r1, r2
 8001418:	43d2      	mvns	r2, r2
 800141a:	401a      	ands	r2, r3
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	601a      	str	r2, [r3, #0]

  unsigned char afr = pin < 8 ? 0 : 1;
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	2b07      	cmp	r3, #7
 8001424:	bf8c      	ite	hi
 8001426:	2301      	movhi	r3, #1
 8001428:	2300      	movls	r3, #0
 800142a:	b2db      	uxtb	r3, r3
 800142c:	75fb      	strb	r3, [r7, #23]
  gpio->AFR[afr] |= (af << (pin * 4));
 800142e:	7dfa      	ldrb	r2, [r7, #23]
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	3208      	adds	r2, #8
 8001434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001438:	79b9      	ldrb	r1, [r7, #6]
 800143a:	79fa      	ldrb	r2, [r7, #7]
 800143c:	0092      	lsls	r2, r2, #2
 800143e:	fa01 f202 	lsl.w	r2, r1, r2
 8001442:	4611      	mov	r1, r2
 8001444:	7dfa      	ldrb	r2, [r7, #23]
 8001446:	4319      	orrs	r1, r3
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	3208      	adds	r2, #8
 800144c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001450:	bf00      	nop
 8001452:	3718      	adds	r7, #24
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <initDriveModule>:

static void initDriveModule(void) {
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  // Motor right is set to the output of the left driver (due to the placement
  // of the driver)
  initOutputGPIOPin(&s_pin_1_motor_right, GPIOB, 9);
 800145c:	2209      	movs	r2, #9
 800145e:	491a      	ldr	r1, [pc, #104]	; (80014c8 <initDriveModule+0x70>)
 8001460:	481a      	ldr	r0, [pc, #104]	; (80014cc <initDriveModule+0x74>)
 8001462:	f7ff ff8f 	bl	8001384 <initOutputGPIOPin>
  initOutputGPIOPin(&s_pin_2_motor_right, GPIOA, 12);
 8001466:	220c      	movs	r2, #12
 8001468:	4919      	ldr	r1, [pc, #100]	; (80014d0 <initDriveModule+0x78>)
 800146a:	481a      	ldr	r0, [pc, #104]	; (80014d4 <initDriveModule+0x7c>)
 800146c:	f7ff ff8a 	bl	8001384 <initOutputGPIOPin>
  s_motor_right.pin_1 = s_pin_1_motor_right;
 8001470:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <initDriveModule+0x80>)
 8001472:	4a16      	ldr	r2, [pc, #88]	; (80014cc <initDriveModule+0x74>)
 8001474:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001478:	e883 0003 	stmia.w	r3, {r0, r1}
  s_motor_right.pin_2 = s_pin_2_motor_right;
 800147c:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <initDriveModule+0x80>)
 800147e:	4a15      	ldr	r2, [pc, #84]	; (80014d4 <initDriveModule+0x7c>)
 8001480:	3308      	adds	r3, #8
 8001482:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001486:	e883 0003 	stmia.w	r3, {r0, r1}
  g_robot.motor_right = &s_motor_right;
 800148a:	4b14      	ldr	r3, [pc, #80]	; (80014dc <initDriveModule+0x84>)
 800148c:	4a12      	ldr	r2, [pc, #72]	; (80014d8 <initDriveModule+0x80>)
 800148e:	601a      	str	r2, [r3, #0]

  // Motor left is set to the output of the right driver (due to the placement
  // of the driver)
  initOutputGPIOPin(&s_pin_1_motor_left, GPIOB, 8);
 8001490:	2208      	movs	r2, #8
 8001492:	490d      	ldr	r1, [pc, #52]	; (80014c8 <initDriveModule+0x70>)
 8001494:	4812      	ldr	r0, [pc, #72]	; (80014e0 <initDriveModule+0x88>)
 8001496:	f7ff ff75 	bl	8001384 <initOutputGPIOPin>
  initOutputGPIOPin(&s_pin_2_motor_left, GPIOA, 11);
 800149a:	220b      	movs	r2, #11
 800149c:	490c      	ldr	r1, [pc, #48]	; (80014d0 <initDriveModule+0x78>)
 800149e:	4811      	ldr	r0, [pc, #68]	; (80014e4 <initDriveModule+0x8c>)
 80014a0:	f7ff ff70 	bl	8001384 <initOutputGPIOPin>
  s_motor_left.pin_1 = s_pin_1_motor_left;
 80014a4:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <initDriveModule+0x90>)
 80014a6:	4a0e      	ldr	r2, [pc, #56]	; (80014e0 <initDriveModule+0x88>)
 80014a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014ac:	e883 0003 	stmia.w	r3, {r0, r1}
  s_motor_left.pin_2 = s_pin_2_motor_left;
 80014b0:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <initDriveModule+0x90>)
 80014b2:	4a0c      	ldr	r2, [pc, #48]	; (80014e4 <initDriveModule+0x8c>)
 80014b4:	3308      	adds	r3, #8
 80014b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014ba:	e883 0003 	stmia.w	r3, {r0, r1}
  g_robot.motor_left = &s_motor_left;
 80014be:	4b07      	ldr	r3, [pc, #28]	; (80014dc <initDriveModule+0x84>)
 80014c0:	4a09      	ldr	r2, [pc, #36]	; (80014e8 <initDriveModule+0x90>)
 80014c2:	605a      	str	r2, [r3, #4]
}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40020400 	.word	0x40020400
 80014cc:	2000014c 	.word	0x2000014c
 80014d0:	40020000 	.word	0x40020000
 80014d4:	20000154 	.word	0x20000154
 80014d8:	2000015c 	.word	0x2000015c
 80014dc:	2000013c 	.word	0x2000013c
 80014e0:	2000016c 	.word	0x2000016c
 80014e4:	20000174 	.word	0x20000174
 80014e8:	2000017c 	.word	0x2000017c

080014ec <initTimer2>:

static void initTimer2(void) {
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  // ------------- Echo Timer -----------------------
  TIM2->CR1 = 0x0000;
 80014f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
  TIM2->CR2 = 0x0000;
 80014f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014fc:	2200      	movs	r2, #0
 80014fe:	605a      	str	r2, [r3, #4]
  TIM2->SMCR = 0x0000;
 8001500:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]

  TIM2->PSC = 32 - 1;
 8001508:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800150c:	221f      	movs	r2, #31
 800150e:	629a      	str	r2, [r3, #40]	; 0x28
  TIM2->CNT = 0;
 8001510:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001514:	2200      	movs	r2, #0
 8001516:	625a      	str	r2, [r3, #36]	; 0x24
  TIM2->ARR = 0xFFFF;
 8001518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800151c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001520:	62da      	str	r2, [r3, #44]	; 0x2c

  TIM2->DIER |= (1 << 1); // IRQ when CCR1 is reached -> CCyIE = 1
 8001522:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800152c:	f043 0302 	orr.w	r3, r3, #2
 8001530:	60d3      	str	r3, [r2, #12]

  TIM2->CCMR1 = 0x0001;  // CCyS = 1 (TIC); OCyM = 000 y OCyPE = 0 (always in TIC)
 8001532:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001536:	2201      	movs	r2, #1
 8001538:	619a      	str	r2, [r3, #24]

  TIM2->CCER = 0x0001; // CCyNP:CCyP = 11 (rising and falling edge active)
 800153a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800153e:	2201      	movs	r2, #1
 8001540:	621a      	str	r2, [r3, #32]
  TIM2->CCER |= (1 << 1);
 8001542:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001546:	6a1b      	ldr	r3, [r3, #32]
 8001548:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800154c:	f043 0302 	orr.w	r3, r3, #2
 8001550:	6213      	str	r3, [r2, #32]
  TIM2->CCER |= (1 << 3);
 8001552:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800155c:	f043 0308 	orr.w	r3, r3, #8
 8001560:	6213      	str	r3, [r2, #32]

  NVIC->ISER[0] |= (1 << 28);
 8001562:	4b05      	ldr	r3, [pc, #20]	; (8001578 <initTimer2+0x8c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a04      	ldr	r2, [pc, #16]	; (8001578 <initTimer2+0x8c>)
 8001568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800156c:	6013      	str	r3, [r2, #0]
}
 800156e:	bf00      	nop
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000e100 	.word	0xe000e100

0800157c <initTimer3>:

static void initTimer3(void) {
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  // ------------- Trigger Timer -----------------------
  TIM3->CR1 = 0x0000;
 8001580:	4b1e      	ldr	r3, [pc, #120]	; (80015fc <initTimer3+0x80>)
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
  TIM3->CR2 = 0x0000;
 8001586:	4b1d      	ldr	r3, [pc, #116]	; (80015fc <initTimer3+0x80>)
 8001588:	2200      	movs	r2, #0
 800158a:	605a      	str	r2, [r3, #4]
  TIM3->SMCR = 0x0000;
 800158c:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <initTimer3+0x80>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]

  TIM3->PSC = 32 - 1;
 8001592:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <initTimer3+0x80>)
 8001594:	221f      	movs	r2, #31
 8001596:	629a      	str	r2, [r3, #40]	; 0x28
  TIM3->CNT = 0;
 8001598:	4b18      	ldr	r3, [pc, #96]	; (80015fc <initTimer3+0x80>)
 800159a:	2200      	movs	r2, #0
 800159c:	625a      	str	r2, [r3, #36]	; 0x24
  TIM3->ARR = 0xFFFF;
 800159e:	4b17      	ldr	r3, [pc, #92]	; (80015fc <initTimer3+0x80>)
 80015a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015a4:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM3->CCR1 = 10;
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <initTimer3+0x80>)
 80015a8:	220a      	movs	r2, #10
 80015aa:	635a      	str	r2, [r3, #52]	; 0x34


  TIM3->DIER |= (1 << 1); // IRQ when CCR1 is reached -> CCyIE = 1
 80015ac:	4b13      	ldr	r3, [pc, #76]	; (80015fc <initTimer3+0x80>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	4a12      	ldr	r2, [pc, #72]	; (80015fc <initTimer3+0x80>)
 80015b2:	f043 0302 	orr.w	r3, r3, #2
 80015b6:	60d3      	str	r3, [r2, #12]

  TIM3->CCMR1 &= ~(0x00FF); // Clear all channel 1 information
 80015b8:	4b10      	ldr	r3, [pc, #64]	; (80015fc <initTimer3+0x80>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	4a0f      	ldr	r2, [pc, #60]	; (80015fc <initTimer3+0x80>)
 80015be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80015c2:	6193      	str	r3, [r2, #24]
  TIM3->CCMR1 |= 0x0030;    // CC1S = 0 (TOC, PWM) OC1M = 011 (Toggle) OC1PE = 0  (without preload)
 80015c4:	4b0d      	ldr	r3, [pc, #52]	; (80015fc <initTimer3+0x80>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	4a0c      	ldr	r2, [pc, #48]	; (80015fc <initTimer3+0x80>)
 80015ca:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80015ce:	6193      	str	r3, [r2, #24]

  TIM3->CCER &= ~(0x000F);
 80015d0:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <initTimer3+0x80>)
 80015d2:	6a1b      	ldr	r3, [r3, #32]
 80015d4:	4a09      	ldr	r2, [pc, #36]	; (80015fc <initTimer3+0x80>)
 80015d6:	f023 030f 	bic.w	r3, r3, #15
 80015da:	6213      	str	r3, [r2, #32]
  TIM3->CCER |= 0x0001; // CC1P = 0   (always)
 80015dc:	4b07      	ldr	r3, [pc, #28]	; (80015fc <initTimer3+0x80>)
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	4a06      	ldr	r2, [pc, #24]	; (80015fc <initTimer3+0x80>)
 80015e2:	f043 0301 	orr.w	r3, r3, #1
 80015e6:	6213      	str	r3, [r2, #32]

  NVIC->ISER[0] |= (1 << 29);
 80015e8:	4b05      	ldr	r3, [pc, #20]	; (8001600 <initTimer3+0x84>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a04      	ldr	r2, [pc, #16]	; (8001600 <initTimer3+0x84>)
 80015ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80015f2:	6013      	str	r3, [r2, #0]
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr
 80015fc:	40000400 	.word	0x40000400
 8001600:	e000e100 	.word	0xe000e100

08001604 <initTimer4>:


static void initTimer4(void) {
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  // ------------- Toggle Buzzer Timer -----------------------
  TIM4->CR1 = 0x0000;
 8001608:	4b1f      	ldr	r3, [pc, #124]	; (8001688 <initTimer4+0x84>)
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
  TIM4->CR2 = 0x0000;
 800160e:	4b1e      	ldr	r3, [pc, #120]	; (8001688 <initTimer4+0x84>)
 8001610:	2200      	movs	r2, #0
 8001612:	605a      	str	r2, [r3, #4]
  TIM4->SMCR = 0x0000;
 8001614:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <initTimer4+0x84>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]

  TIM4->PSC = 500 - 1;
 800161a:	4b1b      	ldr	r3, [pc, #108]	; (8001688 <initTimer4+0x84>)
 800161c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001620:	629a      	str	r2, [r3, #40]	; 0x28
  TIM4->CNT = 0;
 8001622:	4b19      	ldr	r3, [pc, #100]	; (8001688 <initTimer4+0x84>)
 8001624:	2200      	movs	r2, #0
 8001626:	625a      	str	r2, [r3, #36]	; 0x24
  TIM4->ARR = 0xFFFF;
 8001628:	4b17      	ldr	r3, [pc, #92]	; (8001688 <initTimer4+0x84>)
 800162a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800162e:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM4->CCR1 = 500;
 8001630:	4b15      	ldr	r3, [pc, #84]	; (8001688 <initTimer4+0x84>)
 8001632:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001636:	635a      	str	r2, [r3, #52]	; 0x34

  TIM4->DIER |= (1 << 1); // IRQ when CCR1 is reached -> CCyIE = 1
 8001638:	4b13      	ldr	r3, [pc, #76]	; (8001688 <initTimer4+0x84>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	4a12      	ldr	r2, [pc, #72]	; (8001688 <initTimer4+0x84>)
 800163e:	f043 0302 	orr.w	r3, r3, #2
 8001642:	60d3      	str	r3, [r2, #12]

  TIM4->CCMR1 &= ~(0x00FF);
 8001644:	4b10      	ldr	r3, [pc, #64]	; (8001688 <initTimer4+0x84>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	4a0f      	ldr	r2, [pc, #60]	; (8001688 <initTimer4+0x84>)
 800164a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800164e:	6193      	str	r3, [r2, #24]
  TIM4->CCMR1 |= 0x0030;    // CC1S = 0 (TOC, PWM) OC1M = 011 (Toggle) OC1PE = 0  (without preload)
 8001650:	4b0d      	ldr	r3, [pc, #52]	; (8001688 <initTimer4+0x84>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	4a0c      	ldr	r2, [pc, #48]	; (8001688 <initTimer4+0x84>)
 8001656:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800165a:	6193      	str	r3, [r2, #24]

  TIM4->CCER &= ~(0x000F);
 800165c:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <initTimer4+0x84>)
 800165e:	6a1b      	ldr	r3, [r3, #32]
 8001660:	4a09      	ldr	r2, [pc, #36]	; (8001688 <initTimer4+0x84>)
 8001662:	f023 030f 	bic.w	r3, r3, #15
 8001666:	6213      	str	r3, [r2, #32]
  TIM4->CCER |= 0x0001; // CC1P = 0 (always) CC1E = 1   (hardware output activated)
 8001668:	4b07      	ldr	r3, [pc, #28]	; (8001688 <initTimer4+0x84>)
 800166a:	6a1b      	ldr	r3, [r3, #32]
 800166c:	4a06      	ldr	r2, [pc, #24]	; (8001688 <initTimer4+0x84>)
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	6213      	str	r3, [r2, #32]

  NVIC->ISER[0] |= (1 << 30); // Enabling TIM4_IRQ at NVIC (position 30).
 8001674:	4b05      	ldr	r3, [pc, #20]	; (800168c <initTimer4+0x88>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a04      	ldr	r2, [pc, #16]	; (800168c <initTimer4+0x88>)
 800167a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800167e:	6013      	str	r3, [r2, #0]
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr
 8001688:	40000800 	.word	0x40000800
 800168c:	e000e100 	.word	0xe000e100

08001690 <initUltrasonicAndBuzzerModule>:

static void initUltrasonicAndBuzzerModule(void) {
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  initOutputGPIOPin(&s_pin_buzzer, GPIOA, 1);
 8001694:	2201      	movs	r2, #1
 8001696:	492d      	ldr	r1, [pc, #180]	; (800174c <initUltrasonicAndBuzzerModule+0xbc>)
 8001698:	482d      	ldr	r0, [pc, #180]	; (8001750 <initUltrasonicAndBuzzerModule+0xc0>)
 800169a:	f7ff fe73 	bl	8001384 <initOutputGPIOPin>
  s_buzzer.gpio_pin = &s_pin_buzzer;
 800169e:	4b2d      	ldr	r3, [pc, #180]	; (8001754 <initUltrasonicAndBuzzerModule+0xc4>)
 80016a0:	4a2b      	ldr	r2, [pc, #172]	; (8001750 <initUltrasonicAndBuzzerModule+0xc0>)
 80016a2:	605a      	str	r2, [r3, #4]
  s_buzzer.status = BUZZER_OFF;
 80016a4:	4b2b      	ldr	r3, [pc, #172]	; (8001754 <initUltrasonicAndBuzzerModule+0xc4>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	701a      	strb	r2, [r3, #0]
  g_robot.buzzer = &s_buzzer;
 80016aa:	4b2b      	ldr	r3, [pc, #172]	; (8001758 <initUltrasonicAndBuzzerModule+0xc8>)
 80016ac:	4a29      	ldr	r2, [pc, #164]	; (8001754 <initUltrasonicAndBuzzerModule+0xc4>)
 80016ae:	609a      	str	r2, [r3, #8]

  initOutputGPIOPin(&s_pin_ultrasound_trigger, GPIOD, 2);
 80016b0:	2202      	movs	r2, #2
 80016b2:	492a      	ldr	r1, [pc, #168]	; (800175c <initUltrasonicAndBuzzerModule+0xcc>)
 80016b4:	482a      	ldr	r0, [pc, #168]	; (8001760 <initUltrasonicAndBuzzerModule+0xd0>)
 80016b6:	f7ff fe65 	bl	8001384 <initOutputGPIOPin>
  s_ultrasound.trigger = &s_pin_ultrasound_trigger;
 80016ba:	4b2a      	ldr	r3, [pc, #168]	; (8001764 <initUltrasonicAndBuzzerModule+0xd4>)
 80016bc:	4a28      	ldr	r2, [pc, #160]	; (8001760 <initUltrasonicAndBuzzerModule+0xd0>)
 80016be:	605a      	str	r2, [r3, #4]
  initAFGPIOPin(&s_pin_ultrasound_echo, GPIOA, 5, 1);
 80016c0:	2301      	movs	r3, #1
 80016c2:	2205      	movs	r2, #5
 80016c4:	4921      	ldr	r1, [pc, #132]	; (800174c <initUltrasonicAndBuzzerModule+0xbc>)
 80016c6:	4828      	ldr	r0, [pc, #160]	; (8001768 <initUltrasonicAndBuzzerModule+0xd8>)
 80016c8:	f7ff fe83 	bl	80013d2 <initAFGPIOPin>
  s_ultrasound.echo = &s_pin_ultrasound_echo;
 80016cc:	4b25      	ldr	r3, [pc, #148]	; (8001764 <initUltrasonicAndBuzzerModule+0xd4>)
 80016ce:	4a26      	ldr	r2, [pc, #152]	; (8001768 <initUltrasonicAndBuzzerModule+0xd8>)
 80016d0:	609a      	str	r2, [r3, #8]
  s_ultrasound.status = ULTRASOUND_STOPPED;
 80016d2:	4b24      	ldr	r3, [pc, #144]	; (8001764 <initUltrasonicAndBuzzerModule+0xd4>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]
  s_ultrasound.distance = 0;
 80016d8:	4b22      	ldr	r3, [pc, #136]	; (8001764 <initUltrasonicAndBuzzerModule+0xd4>)
 80016da:	2200      	movs	r2, #0
 80016dc:	611a      	str	r2, [r3, #16]
  s_ultrasound.status_distance = DISTANCE_DID_NOT_CHANGE;
 80016de:	4b21      	ldr	r3, [pc, #132]	; (8001764 <initUltrasonicAndBuzzerModule+0xd4>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	739a      	strb	r2, [r3, #14]
  g_robot.ultrasound = &s_ultrasound;
 80016e4:	4b1c      	ldr	r3, [pc, #112]	; (8001758 <initUltrasonicAndBuzzerModule+0xc8>)
 80016e6:	4a1f      	ldr	r2, [pc, #124]	; (8001764 <initUltrasonicAndBuzzerModule+0xd4>)
 80016e8:	60da      	str	r2, [r3, #12]

  initTimer2();
 80016ea:	f7ff feff 	bl	80014ec <initTimer2>
  initTimer3();
 80016ee:	f7ff ff45 	bl	800157c <initTimer3>
  initTimer4();
 80016f2:	f7ff ff87 	bl	8001604 <initTimer4>

  TIM2->CR1 |= 0x0001; // CEN = 1 -> Start counter
 80016f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6013      	str	r3, [r2, #0]
  TIM2->SR = 0; // Clear flags
 8001706:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800170a:	2200      	movs	r2, #0
 800170c:	611a      	str	r2, [r3, #16]

  TIM3->CR1 |= 0x0001; // CEN = 1 -> Start counter
 800170e:	4b17      	ldr	r3, [pc, #92]	; (800176c <initUltrasonicAndBuzzerModule+0xdc>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a16      	ldr	r2, [pc, #88]	; (800176c <initUltrasonicAndBuzzerModule+0xdc>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	6013      	str	r3, [r2, #0]
  TIM3->EGR |= 0x0001; // UG = 1 -> Generate update event
 800171a:	4b14      	ldr	r3, [pc, #80]	; (800176c <initUltrasonicAndBuzzerModule+0xdc>)
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	4a13      	ldr	r2, [pc, #76]	; (800176c <initUltrasonicAndBuzzerModule+0xdc>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6153      	str	r3, [r2, #20]
  TIM3->SR = 0; // Clear flags
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <initUltrasonicAndBuzzerModule+0xdc>)
 8001728:	2200      	movs	r2, #0
 800172a:	611a      	str	r2, [r3, #16]

  TIM4->CR1 |= 0x0001;
 800172c:	4b10      	ldr	r3, [pc, #64]	; (8001770 <initUltrasonicAndBuzzerModule+0xe0>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a0f      	ldr	r2, [pc, #60]	; (8001770 <initUltrasonicAndBuzzerModule+0xe0>)
 8001732:	f043 0301 	orr.w	r3, r3, #1
 8001736:	6013      	str	r3, [r2, #0]
  TIM4->SR = 0; // Clear flags
 8001738:	4b0d      	ldr	r3, [pc, #52]	; (8001770 <initUltrasonicAndBuzzerModule+0xe0>)
 800173a:	2200      	movs	r2, #0
 800173c:	611a      	str	r2, [r3, #16]

  g_robot.ultrasound->status = ULTRASOUND_TRIGGER_START;
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <initUltrasonicAndBuzzerModule+0xc8>)
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	2201      	movs	r2, #1
 8001744:	701a      	strb	r2, [r3, #0]
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40020000 	.word	0x40020000
 8001750:	2000018c 	.word	0x2000018c
 8001754:	20000194 	.word	0x20000194
 8001758:	2000013c 	.word	0x2000013c
 800175c:	40020c00 	.word	0x40020c00
 8001760:	2000019c 	.word	0x2000019c
 8001764:	200001ac 	.word	0x200001ac
 8001768:	200001a4 	.word	0x200001a4
 800176c:	40000400 	.word	0x40000400
 8001770:	40000800 	.word	0x40000800

08001774 <updateStatusGPIOPin>:
/*
 * Updates the motor pin depending of its status
 *  GPIO_PIN_UP: sets the BSRR register to set the pin to 1
 *  GPIO_PIN_DOWN: sets the BSRR register to set the pin to 0
 */
void updateStatusGPIOPin(struct GPIOPin *gpio_pin, enum StatusGPIOPin status) {
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	460b      	mov	r3, r1
 800177e:	70fb      	strb	r3, [r7, #3]
  switch (status) {
 8001780:	78fb      	ldrb	r3, [r7, #3]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d002      	beq.n	800178c <updateStatusGPIOPin+0x18>
 8001786:	2b01      	cmp	r3, #1
 8001788:	d00e      	beq.n	80017a8 <updateStatusGPIOPin+0x34>
    case GPIO_PIN_DOWN:
      gpio_pin->gpio->BSRR |= (1 << gpio_pin->pin) << 16;

      break;
    }
}
 800178a:	e01c      	b.n	80017c6 <updateStatusGPIOPin+0x52>
      gpio_pin->gpio->BSRR |= (1 << gpio_pin->pin);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	699a      	ldr	r2, [r3, #24]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	791b      	ldrb	r3, [r3, #4]
 8001796:	4619      	mov	r1, r3
 8001798:	2301      	movs	r3, #1
 800179a:	408b      	lsls	r3, r1
 800179c:	4619      	mov	r1, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	430a      	orrs	r2, r1
 80017a4:	619a      	str	r2, [r3, #24]
      break;
 80017a6:	e00e      	b.n	80017c6 <updateStatusGPIOPin+0x52>
      gpio_pin->gpio->BSRR |= (1 << gpio_pin->pin) << 16;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	699a      	ldr	r2, [r3, #24]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	791b      	ldrb	r3, [r3, #4]
 80017b2:	4619      	mov	r1, r3
 80017b4:	2301      	movs	r3, #1
 80017b6:	408b      	lsls	r3, r1
 80017b8:	041b      	lsls	r3, r3, #16
 80017ba:	4619      	mov	r1, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	430a      	orrs	r2, r1
 80017c2:	619a      	str	r2, [r3, #24]
      break;
 80017c4:	bf00      	nop
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr

080017d0 <createRobot>:


/*
 * Creates a new robot and initializes all global and static variables
 */
void createRobot(void) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  initDriveModule();
 80017d4:	f7ff fe40 	bl	8001458 <initDriveModule>
  initUltrasonicAndBuzzerModule();
 80017d8:	f7ff ff5a 	bl	8001690 <initUltrasonicAndBuzzerModule>
}
 80017dc:	bf00      	nop
 80017de:	bd80      	pop	{r7, pc}

080017e0 <toggleGPIOPin>:

void toggleGPIOPin(struct GPIOPin *gpio_pin) {
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  if ((gpio_pin->gpio->IDR & (1 << gpio_pin->pin)) == 0) {
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	7912      	ldrb	r2, [r2, #4]
 80017f2:	4611      	mov	r1, r2
 80017f4:	2201      	movs	r2, #1
 80017f6:	408a      	lsls	r2, r1
 80017f8:	4013      	ands	r3, r2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d10d      	bne.n	800181a <toggleGPIOPin+0x3a>
    gpio_pin->gpio->BSRR |= (1 << gpio_pin->pin);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	699a      	ldr	r2, [r3, #24]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	791b      	ldrb	r3, [r3, #4]
 8001808:	4619      	mov	r1, r3
 800180a:	2301      	movs	r3, #1
 800180c:	408b      	lsls	r3, r1
 800180e:	4619      	mov	r1, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	430a      	orrs	r2, r1
 8001816:	619a      	str	r2, [r3, #24]
  } else {
    gpio_pin->gpio->BSRR |= (1 << gpio_pin->pin) << 16;
  }
}
 8001818:	e00d      	b.n	8001836 <toggleGPIOPin+0x56>
    gpio_pin->gpio->BSRR |= (1 << gpio_pin->pin) << 16;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	699a      	ldr	r2, [r3, #24]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	791b      	ldrb	r3, [r3, #4]
 8001824:	4619      	mov	r1, r3
 8001826:	2301      	movs	r3, #1
 8001828:	408b      	lsls	r3, r1
 800182a:	041b      	lsls	r3, r3, #16
 800182c:	4619      	mov	r1, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	430a      	orrs	r2, r1
 8001834:	619a      	str	r2, [r3, #24]
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr

08001840 <updateStatusBuzzer>:

void updateStatusBuzzer(enum StatusBuzzer status) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	71fb      	strb	r3, [r7, #7]
  if (g_robot.buzzer->status == status) {
 800184a:	4b21      	ldr	r3, [pc, #132]	; (80018d0 <updateStatusBuzzer+0x90>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	79fa      	ldrb	r2, [r7, #7]
 8001852:	429a      	cmp	r2, r3
 8001854:	d037      	beq.n	80018c6 <updateStatusBuzzer+0x86>
    return;
  }

  g_robot.buzzer->status = status;
 8001856:	4b1e      	ldr	r3, [pc, #120]	; (80018d0 <updateStatusBuzzer+0x90>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	79fa      	ldrb	r2, [r7, #7]
 800185c:	701a      	strb	r2, [r3, #0]
  switch (g_robot.buzzer->status) {
 800185e:	4b1c      	ldr	r3, [pc, #112]	; (80018d0 <updateStatusBuzzer+0x90>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b02      	cmp	r3, #2
 8001866:	d021      	beq.n	80018ac <updateStatusBuzzer+0x6c>
 8001868:	2b02      	cmp	r3, #2
 800186a:	dc2d      	bgt.n	80018c8 <updateStatusBuzzer+0x88>
 800186c:	2b00      	cmp	r3, #0
 800186e:	d00f      	beq.n	8001890 <updateStatusBuzzer+0x50>
 8001870:	2b01      	cmp	r3, #1
 8001872:	d129      	bne.n	80018c8 <updateStatusBuzzer+0x88>
  case BUZZER_ON:
    updateStatusGPIOPin(g_robot.buzzer->gpio_pin, GPIO_PIN_UP);
 8001874:	4b16      	ldr	r3, [pc, #88]	; (80018d0 <updateStatusBuzzer+0x90>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2100      	movs	r1, #0
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff79 	bl	8001774 <updateStatusGPIOPin>
    TIM4->CR1 &= ~(0x0001);
 8001882:	4b14      	ldr	r3, [pc, #80]	; (80018d4 <updateStatusBuzzer+0x94>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a13      	ldr	r2, [pc, #76]	; (80018d4 <updateStatusBuzzer+0x94>)
 8001888:	f023 0301 	bic.w	r3, r3, #1
 800188c:	6013      	str	r3, [r2, #0]
    break;
 800188e:	e01b      	b.n	80018c8 <updateStatusBuzzer+0x88>
  case BUZZER_OFF:
    updateStatusGPIOPin(g_robot.buzzer->gpio_pin, GPIO_PIN_DOWN);
 8001890:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <updateStatusBuzzer+0x90>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	2101      	movs	r1, #1
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff ff6b 	bl	8001774 <updateStatusGPIOPin>
    TIM4->CR1 &= ~(0x0001);
 800189e:	4b0d      	ldr	r3, [pc, #52]	; (80018d4 <updateStatusBuzzer+0x94>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a0c      	ldr	r2, [pc, #48]	; (80018d4 <updateStatusBuzzer+0x94>)
 80018a4:	f023 0301 	bic.w	r3, r3, #1
 80018a8:	6013      	str	r3, [r2, #0]
    break;
 80018aa:	e00d      	b.n	80018c8 <updateStatusBuzzer+0x88>
  case BUZZER_BEEPING:
    TIM4->CR1 |= 0x0001; // CEN = 1 -> Start counters
 80018ac:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <updateStatusBuzzer+0x94>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a08      	ldr	r2, [pc, #32]	; (80018d4 <updateStatusBuzzer+0x94>)
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	6013      	str	r3, [r2, #0]
    TIM4->EGR |= 0x0001;
 80018b8:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <updateStatusBuzzer+0x94>)
 80018ba:	695b      	ldr	r3, [r3, #20]
 80018bc:	4a05      	ldr	r2, [pc, #20]	; (80018d4 <updateStatusBuzzer+0x94>)
 80018be:	f043 0301 	orr.w	r3, r3, #1
 80018c2:	6153      	str	r3, [r2, #20]
    break;
 80018c4:	e000      	b.n	80018c8 <updateStatusBuzzer+0x88>
    return;
 80018c6:	bf00      	nop
  }
}
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	2000013c 	.word	0x2000013c
 80018d4:	40000800 	.word	0x40000800

080018d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80018de:	4b15      	ldr	r3, [pc, #84]	; (8001934 <HAL_MspInit+0x5c>)
 80018e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e2:	4a14      	ldr	r2, [pc, #80]	; (8001934 <HAL_MspInit+0x5c>)
 80018e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80018e8:	6253      	str	r3, [r2, #36]	; 0x24
 80018ea:	4b12      	ldr	r3, [pc, #72]	; (8001934 <HAL_MspInit+0x5c>)
 80018ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f6:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <HAL_MspInit+0x5c>)
 80018f8:	6a1b      	ldr	r3, [r3, #32]
 80018fa:	4a0e      	ldr	r2, [pc, #56]	; (8001934 <HAL_MspInit+0x5c>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	6213      	str	r3, [r2, #32]
 8001902:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <HAL_MspInit+0x5c>)
 8001904:	6a1b      	ldr	r3, [r3, #32]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	60bb      	str	r3, [r7, #8]
 800190c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800190e:	4b09      	ldr	r3, [pc, #36]	; (8001934 <HAL_MspInit+0x5c>)
 8001910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001912:	4a08      	ldr	r2, [pc, #32]	; (8001934 <HAL_MspInit+0x5c>)
 8001914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001918:	6253      	str	r3, [r2, #36]	; 0x24
 800191a:	4b06      	ldr	r3, [pc, #24]	; (8001934 <HAL_MspInit+0x5c>)
 800191c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001922:	607b      	str	r3, [r7, #4]
 8001924:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001926:	2007      	movs	r0, #7
 8001928:	f000 fc92 	bl	8002250 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800192c:	bf00      	nop
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40023800 	.word	0x40023800

08001938 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b08a      	sub	sp, #40	; 0x28
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001940:	f107 0314 	add.w	r3, r7, #20
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
 800194e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a15      	ldr	r2, [pc, #84]	; (80019ac <HAL_ADC_MspInit+0x74>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d123      	bne.n	80019a2 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800195a:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <HAL_ADC_MspInit+0x78>)
 800195c:	6a1b      	ldr	r3, [r3, #32]
 800195e:	4a14      	ldr	r2, [pc, #80]	; (80019b0 <HAL_ADC_MspInit+0x78>)
 8001960:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001964:	6213      	str	r3, [r2, #32]
 8001966:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <HAL_ADC_MspInit+0x78>)
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800196e:	613b      	str	r3, [r7, #16]
 8001970:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001972:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <HAL_ADC_MspInit+0x78>)
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	4a0e      	ldr	r2, [pc, #56]	; (80019b0 <HAL_ADC_MspInit+0x78>)
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	61d3      	str	r3, [r2, #28]
 800197e:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <HAL_ADC_MspInit+0x78>)
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = IDD_Measurement_Pin;
 800198a:	2310      	movs	r3, #16
 800198c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800198e:	2303      	movs	r3, #3
 8001990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(IDD_Measurement_GPIO_Port, &GPIO_InitStruct);
 8001996:	f107 0314 	add.w	r3, r7, #20
 800199a:	4619      	mov	r1, r3
 800199c:	4805      	ldr	r0, [pc, #20]	; (80019b4 <HAL_ADC_MspInit+0x7c>)
 800199e:	f000 fc8b 	bl	80022b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019a2:	bf00      	nop
 80019a4:	3728      	adds	r7, #40	; 0x28
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40012400 	.word	0x40012400
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40020000 	.word	0x40020000

080019b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b087      	sub	sp, #28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019c8:	d10c      	bne.n	80019e4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019ca:	4b1a      	ldr	r3, [pc, #104]	; (8001a34 <HAL_TIM_Base_MspInit+0x7c>)
 80019cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ce:	4a19      	ldr	r2, [pc, #100]	; (8001a34 <HAL_TIM_Base_MspInit+0x7c>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	6253      	str	r3, [r2, #36]	; 0x24
 80019d6:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <HAL_TIM_Base_MspInit+0x7c>)
 80019d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	617b      	str	r3, [r7, #20]
 80019e0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80019e2:	e022      	b.n	8001a2a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a13      	ldr	r2, [pc, #76]	; (8001a38 <HAL_TIM_Base_MspInit+0x80>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d10c      	bne.n	8001a08 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019ee:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <HAL_TIM_Base_MspInit+0x7c>)
 80019f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f2:	4a10      	ldr	r2, [pc, #64]	; (8001a34 <HAL_TIM_Base_MspInit+0x7c>)
 80019f4:	f043 0302 	orr.w	r3, r3, #2
 80019f8:	6253      	str	r3, [r2, #36]	; 0x24
 80019fa:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <HAL_TIM_Base_MspInit+0x7c>)
 80019fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	693b      	ldr	r3, [r7, #16]
}
 8001a06:	e010      	b.n	8001a2a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a0b      	ldr	r2, [pc, #44]	; (8001a3c <HAL_TIM_Base_MspInit+0x84>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d10b      	bne.n	8001a2a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a12:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <HAL_TIM_Base_MspInit+0x7c>)
 8001a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a16:	4a07      	ldr	r2, [pc, #28]	; (8001a34 <HAL_TIM_Base_MspInit+0x7c>)
 8001a18:	f043 0304 	orr.w	r3, r3, #4
 8001a1c:	6253      	str	r3, [r2, #36]	; 0x24
 8001a1e:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <HAL_TIM_Base_MspInit+0x7c>)
 8001a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a22:	f003 0304 	and.w	r3, r3, #4
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
}
 8001a2a:	bf00      	nop
 8001a2c:	371c      	adds	r7, #28
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr
 8001a34:	40023800 	.word	0x40023800
 8001a38:	40000400 	.word	0x40000400
 8001a3c:	40000800 	.word	0x40000800

08001a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a44:	e7fe      	b.n	8001a44 <NMI_Handler+0x4>

08001a46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a46:	b480      	push	{r7}
 8001a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a4a:	e7fe      	b.n	8001a4a <HardFault_Handler+0x4>

08001a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a50:	e7fe      	b.n	8001a50 <MemManage_Handler+0x4>

08001a52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a56:	e7fe      	b.n	8001a56 <BusFault_Handler+0x4>

08001a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a5c:	e7fe      	b.n	8001a5c <UsageFault_Handler+0x4>

08001a5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc80      	pop	{r7}
 8001a68:	4770      	bx	lr

08001a6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr

08001a76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr

08001a82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a86:	f000 f881 	bl	8001b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a92:	bf00      	nop
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr
	...

08001a9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a9c:	480c      	ldr	r0, [pc, #48]	; (8001ad0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a9e:	490d      	ldr	r1, [pc, #52]	; (8001ad4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001aa0:	4a0d      	ldr	r2, [pc, #52]	; (8001ad8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aa4:	e002      	b.n	8001aac <LoopCopyDataInit>

08001aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aaa:	3304      	adds	r3, #4

08001aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab0:	d3f9      	bcc.n	8001aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ab2:	4a0a      	ldr	r2, [pc, #40]	; (8001adc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ab4:	4c0a      	ldr	r4, [pc, #40]	; (8001ae0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab8:	e001      	b.n	8001abe <LoopFillZerobss>

08001aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001abc:	3204      	adds	r2, #4

08001abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac0:	d3fb      	bcc.n	8001aba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ac2:	f7ff ffe4 	bl	8001a8e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ac6:	f001 fdbb 	bl	8003640 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001aca:	f7ff f9a1 	bl	8000e10 <main>
  bx lr
 8001ace:	4770      	bx	lr
  ldr r0, =_sdata
 8001ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001ad8:	080036dc 	.word	0x080036dc
  ldr r2, =_sbss
 8001adc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001ae0:	200001c4 	.word	0x200001c4

08001ae4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ae4:	e7fe      	b.n	8001ae4 <ADC1_IRQHandler>

08001ae6 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001aec:	2300      	movs	r3, #0
 8001aee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af0:	2003      	movs	r0, #3
 8001af2:	f000 fbad 	bl	8002250 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001af6:	2000      	movs	r0, #0
 8001af8:	f000 f80e 	bl	8001b18 <HAL_InitTick>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d002      	beq.n	8001b08 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	71fb      	strb	r3, [r7, #7]
 8001b06:	e001      	b.n	8001b0c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b08:	f7ff fee6 	bl	80018d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
	...

08001b18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b20:	2300      	movs	r3, #0
 8001b22:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b24:	4b16      	ldr	r3, [pc, #88]	; (8001b80 <HAL_InitTick+0x68>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d022      	beq.n	8001b72 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001b2c:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <HAL_InitTick+0x6c>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4b13      	ldr	r3, [pc, #76]	; (8001b80 <HAL_InitTick+0x68>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b38:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b40:	4618      	mov	r0, r3
 8001b42:	f000 fbac 	bl	800229e <HAL_SYSTICK_Config>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d10f      	bne.n	8001b6c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b0f      	cmp	r3, #15
 8001b50:	d809      	bhi.n	8001b66 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b52:	2200      	movs	r2, #0
 8001b54:	6879      	ldr	r1, [r7, #4]
 8001b56:	f04f 30ff 	mov.w	r0, #4294967295
 8001b5a:	f000 fb84 	bl	8002266 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b5e:	4a0a      	ldr	r2, [pc, #40]	; (8001b88 <HAL_InitTick+0x70>)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	e007      	b.n	8001b76 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	73fb      	strb	r3, [r7, #15]
 8001b6a:	e004      	b.n	8001b76 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	73fb      	strb	r3, [r7, #15]
 8001b70:	e001      	b.n	8001b76 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20000008 	.word	0x20000008
 8001b84:	20000000 	.word	0x20000000
 8001b88:	20000004 	.word	0x20000004

08001b8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b90:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <HAL_IncTick+0x1c>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4b05      	ldr	r3, [pc, #20]	; (8001bac <HAL_IncTick+0x20>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4413      	add	r3, r2
 8001b9a:	4a03      	ldr	r2, [pc, #12]	; (8001ba8 <HAL_IncTick+0x1c>)
 8001b9c:	6013      	str	r3, [r2, #0]
}
 8001b9e:	bf00      	nop
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	200001c0 	.word	0x200001c0
 8001bac:	20000008 	.word	0x20000008

08001bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb4:	4b02      	ldr	r3, [pc, #8]	; (8001bc0 <HAL_GetTick+0x10>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr
 8001bc0:	200001c0 	.word	0x200001c0

08001bc4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08e      	sub	sp, #56	; 0x38
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d101      	bne.n	8001be4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e127      	b.n	8001e34 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d115      	bne.n	8001c1e <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c00:	4b8e      	ldr	r3, [pc, #568]	; (8001e3c <HAL_ADC_Init+0x278>)
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	4a8d      	ldr	r2, [pc, #564]	; (8001e3c <HAL_ADC_Init+0x278>)
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	6213      	str	r3, [r2, #32]
 8001c0c:	4b8b      	ldr	r3, [pc, #556]	; (8001e3c <HAL_ADC_Init+0x278>)
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f7ff fe8d 	bl	8001938 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c22:	f003 0310 	and.w	r3, r3, #16
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f040 80ff 	bne.w	8001e2a <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c30:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c34:	f023 0302 	bic.w	r3, r3, #2
 8001c38:	f043 0202 	orr.w	r2, r3, #2
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8001c40:	4b7f      	ldr	r3, [pc, #508]	; (8001e40 <HAL_ADC_Init+0x27c>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	497c      	ldr	r1, [pc, #496]	; (8001e40 <HAL_ADC_Init+0x27c>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001c5a:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c62:	4619      	mov	r1, r3
 8001c64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c68:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6a:	6a3b      	ldr	r3, [r7, #32]
 8001c6c:	fa93 f3a3 	rbit	r3, r3
 8001c70:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	fab3 f383 	clz	r3, r3
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8001c7e:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001c84:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	2302      	movs	r3, #2
 8001c90:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c94:	fa93 f3a3 	rbit	r3, r3
 8001c98:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	fab3 f383 	clz	r3, r3
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8001ca6:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001ca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001caa:	4313      	orrs	r3, r2
 8001cac:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cb2:	2b10      	cmp	r3, #16
 8001cb4:	d007      	beq.n	8001cc6 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cd0:	2b40      	cmp	r3, #64	; 0x40
 8001cd2:	d04f      	beq.n	8001d74 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001ce6:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	6912      	ldr	r2, [r2, #16]
 8001cec:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001cf0:	d003      	beq.n	8001cfa <HAL_ADC_Init+0x136>
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	6912      	ldr	r2, [r2, #16]
 8001cf6:	2a01      	cmp	r2, #1
 8001cf8:	d102      	bne.n	8001d00 <HAL_ADC_Init+0x13c>
 8001cfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cfe:	e000      	b.n	8001d02 <HAL_ADC_Init+0x13e>
 8001d00:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8001d02:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001d04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d06:	4313      	orrs	r3, r2
 8001d08:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d125      	bne.n	8001d60 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d114      	bne.n	8001d48 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	3b01      	subs	r3, #1
 8001d24:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001d28:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	fa92 f2a2 	rbit	r2, r2
 8001d30:	617a      	str	r2, [r7, #20]
  return result;
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	fab2 f282 	clz	r2, r2
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	4093      	lsls	r3, r2
 8001d3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d42:	4313      	orrs	r3, r2
 8001d44:	633b      	str	r3, [r7, #48]	; 0x30
 8001d46:	e00b      	b.n	8001d60 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d4c:	f043 0220 	orr.w	r2, r3, #32
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d58:	f043 0201 	orr.w	r2, r3, #1
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	4b37      	ldr	r3, [pc, #220]	; (8001e44 <HAL_ADC_Init+0x280>)
 8001d68:	4013      	ands	r3, r2
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	6812      	ldr	r2, [r2, #0]
 8001d6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d70:	430b      	orrs	r3, r1
 8001d72:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	689a      	ldr	r2, [r3, #8]
 8001d7a:	4b33      	ldr	r3, [pc, #204]	; (8001e48 <HAL_ADC_Init+0x284>)
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6812      	ldr	r2, [r2, #0]
 8001d82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001d84:	430b      	orrs	r3, r1
 8001d86:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d90:	d003      	beq.n	8001d9a <HAL_ADC_Init+0x1d6>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d119      	bne.n	8001dce <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da0:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da8:	3b01      	subs	r3, #1
 8001daa:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001dae:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	fa92 f2a2 	rbit	r2, r2
 8001db6:	60fa      	str	r2, [r7, #12]
  return result;
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	fab2 f282 	clz	r2, r2
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	fa03 f202 	lsl.w	r2, r3, r2
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	631a      	str	r2, [r3, #48]	; 0x30
 8001dcc:	e007      	b.n	8001dde <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001ddc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	4b19      	ldr	r3, [pc, #100]	; (8001e4c <HAL_ADC_Init+0x288>)
 8001de6:	4013      	ands	r3, r2
 8001de8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d10b      	bne.n	8001e06 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df8:	f023 0303 	bic.w	r3, r3, #3
 8001dfc:	f043 0201 	orr.w	r2, r3, #1
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e04:	e014      	b.n	8001e30 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0a:	f023 0312 	bic.w	r3, r3, #18
 8001e0e:	f043 0210 	orr.w	r2, r3, #16
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e1a:	f043 0201 	orr.w	r2, r3, #1
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001e28:	e002      	b.n	8001e30 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3738      	adds	r7, #56	; 0x38
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40012700 	.word	0x40012700
 8001e44:	fcfc16ff 	.word	0xfcfc16ff
 8001e48:	c0fff189 	.word	0xc0fff189
 8001e4c:	bf80fffe 	.word	0xbf80fffe

08001e50 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d101      	bne.n	8001e70 <HAL_ADC_ConfigChannel+0x20>
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	e134      	b.n	80020da <HAL_ADC_ConfigChannel+0x28a>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b06      	cmp	r3, #6
 8001e7e:	d81c      	bhi.n	8001eba <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685a      	ldr	r2, [r3, #4]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	3b05      	subs	r3, #5
 8001e92:	221f      	movs	r2, #31
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	4019      	ands	r1, r3
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	6818      	ldr	r0, [r3, #0]
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	3b05      	subs	r3, #5
 8001eac:	fa00 f203 	lsl.w	r2, r0, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	641a      	str	r2, [r3, #64]	; 0x40
 8001eb8:	e07e      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b0c      	cmp	r3, #12
 8001ec0:	d81c      	bhi.n	8001efc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	3b23      	subs	r3, #35	; 0x23
 8001ed4:	221f      	movs	r2, #31
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	4019      	ands	r1, r3
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	6818      	ldr	r0, [r3, #0]
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	4413      	add	r3, r2
 8001eec:	3b23      	subs	r3, #35	; 0x23
 8001eee:	fa00 f203 	lsl.w	r2, r0, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	63da      	str	r2, [r3, #60]	; 0x3c
 8001efa:	e05d      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b12      	cmp	r3, #18
 8001f02:	d81c      	bhi.n	8001f3e <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685a      	ldr	r2, [r3, #4]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4413      	add	r3, r2
 8001f14:	3b41      	subs	r3, #65	; 0x41
 8001f16:	221f      	movs	r2, #31
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	4019      	ands	r1, r3
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	6818      	ldr	r0, [r3, #0]
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	3b41      	subs	r3, #65	; 0x41
 8001f30:	fa00 f203 	lsl.w	r2, r0, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	639a      	str	r2, [r3, #56]	; 0x38
 8001f3c:	e03c      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b18      	cmp	r3, #24
 8001f44:	d81c      	bhi.n	8001f80 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	4613      	mov	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	3b5f      	subs	r3, #95	; 0x5f
 8001f58:	221f      	movs	r2, #31
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	4019      	ands	r1, r3
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	6818      	ldr	r0, [r3, #0]
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685a      	ldr	r2, [r3, #4]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4413      	add	r3, r2
 8001f70:	3b5f      	subs	r3, #95	; 0x5f
 8001f72:	fa00 f203 	lsl.w	r2, r0, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	635a      	str	r2, [r3, #52]	; 0x34
 8001f7e:	e01b      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685a      	ldr	r2, [r3, #4]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	3b7d      	subs	r3, #125	; 0x7d
 8001f92:	221f      	movs	r2, #31
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	4019      	ands	r1, r3
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	6818      	ldr	r0, [r3, #0]
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	3b7d      	subs	r3, #125	; 0x7d
 8001fac:	fa00 f203 	lsl.w	r2, r0, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b09      	cmp	r3, #9
 8001fbe:	d81a      	bhi.n	8001ff6 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6959      	ldr	r1, [r3, #20]
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	4413      	add	r3, r2
 8001fd0:	2207      	movs	r2, #7
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	4019      	ands	r1, r3
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	6898      	ldr	r0, [r3, #8]
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	4413      	add	r3, r2
 8001fe8:	fa00 f203 	lsl.w	r2, r0, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	615a      	str	r2, [r3, #20]
 8001ff4:	e042      	b.n	800207c <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2b13      	cmp	r3, #19
 8001ffc:	d81c      	bhi.n	8002038 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6919      	ldr	r1, [r3, #16]
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	4613      	mov	r3, r2
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	4413      	add	r3, r2
 800200e:	3b1e      	subs	r3, #30
 8002010:	2207      	movs	r2, #7
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43db      	mvns	r3, r3
 8002018:	4019      	ands	r1, r3
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	6898      	ldr	r0, [r3, #8]
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	4613      	mov	r3, r2
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	4413      	add	r3, r2
 8002028:	3b1e      	subs	r3, #30
 800202a:	fa00 f203 	lsl.w	r2, r0, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	430a      	orrs	r2, r1
 8002034:	611a      	str	r2, [r3, #16]
 8002036:	e021      	b.n	800207c <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2b1a      	cmp	r3, #26
 800203e:	d81c      	bhi.n	800207a <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68d9      	ldr	r1, [r3, #12]
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	4613      	mov	r3, r2
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	4413      	add	r3, r2
 8002050:	3b3c      	subs	r3, #60	; 0x3c
 8002052:	2207      	movs	r2, #7
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	43db      	mvns	r3, r3
 800205a:	4019      	ands	r1, r3
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	6898      	ldr	r0, [r3, #8]
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	4613      	mov	r3, r2
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	4413      	add	r3, r2
 800206a:	3b3c      	subs	r3, #60	; 0x3c
 800206c:	fa00 f203 	lsl.w	r2, r0, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	430a      	orrs	r2, r1
 8002076:	60da      	str	r2, [r3, #12]
 8002078:	e000      	b.n	800207c <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800207a:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2b10      	cmp	r3, #16
 8002082:	d003      	beq.n	800208c <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002088:	2b11      	cmp	r3, #17
 800208a:	d121      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 800208c:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <HAL_ADC_ConfigChannel+0x294>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d11b      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8002098:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <HAL_ADC_ConfigChannel+0x294>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	4a11      	ldr	r2, [pc, #68]	; (80020e4 <HAL_ADC_ConfigChannel+0x294>)
 800209e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020a2:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2b10      	cmp	r3, #16
 80020aa:	d111      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80020ac:	4b0e      	ldr	r3, [pc, #56]	; (80020e8 <HAL_ADC_ConfigChannel+0x298>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a0e      	ldr	r2, [pc, #56]	; (80020ec <HAL_ADC_ConfigChannel+0x29c>)
 80020b2:	fba2 2303 	umull	r2, r3, r2, r3
 80020b6:	0c9a      	lsrs	r2, r3, #18
 80020b8:	4613      	mov	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4413      	add	r3, r2
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80020c2:	e002      	b.n	80020ca <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1f9      	bne.n	80020c4 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80020d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3714      	adds	r7, #20
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr
 80020e4:	40012700 	.word	0x40012700
 80020e8:	20000000 	.word	0x20000000
 80020ec:	431bde83 	.word	0x431bde83

080020f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002100:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <__NVIC_SetPriorityGrouping+0x44>)
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002106:	68ba      	ldr	r2, [r7, #8]
 8002108:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800210c:	4013      	ands	r3, r2
 800210e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002118:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800211c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002122:	4a04      	ldr	r2, [pc, #16]	; (8002134 <__NVIC_SetPriorityGrouping+0x44>)
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	60d3      	str	r3, [r2, #12]
}
 8002128:	bf00      	nop
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	bc80      	pop	{r7}
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	e000ed00 	.word	0xe000ed00

08002138 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800213c:	4b04      	ldr	r3, [pc, #16]	; (8002150 <__NVIC_GetPriorityGrouping+0x18>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	0a1b      	lsrs	r3, r3, #8
 8002142:	f003 0307 	and.w	r3, r3, #7
}
 8002146:	4618      	mov	r0, r3
 8002148:	46bd      	mov	sp, r7
 800214a:	bc80      	pop	{r7}
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	e000ed00 	.word	0xe000ed00

08002154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	6039      	str	r1, [r7, #0]
 800215e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002164:	2b00      	cmp	r3, #0
 8002166:	db0a      	blt.n	800217e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	b2da      	uxtb	r2, r3
 800216c:	490c      	ldr	r1, [pc, #48]	; (80021a0 <__NVIC_SetPriority+0x4c>)
 800216e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002172:	0112      	lsls	r2, r2, #4
 8002174:	b2d2      	uxtb	r2, r2
 8002176:	440b      	add	r3, r1
 8002178:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800217c:	e00a      	b.n	8002194 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	b2da      	uxtb	r2, r3
 8002182:	4908      	ldr	r1, [pc, #32]	; (80021a4 <__NVIC_SetPriority+0x50>)
 8002184:	79fb      	ldrb	r3, [r7, #7]
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	3b04      	subs	r3, #4
 800218c:	0112      	lsls	r2, r2, #4
 800218e:	b2d2      	uxtb	r2, r2
 8002190:	440b      	add	r3, r1
 8002192:	761a      	strb	r2, [r3, #24]
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	bc80      	pop	{r7}
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	e000e100 	.word	0xe000e100
 80021a4:	e000ed00 	.word	0xe000ed00

080021a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b089      	sub	sp, #36	; 0x24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	f1c3 0307 	rsb	r3, r3, #7
 80021c2:	2b04      	cmp	r3, #4
 80021c4:	bf28      	it	cs
 80021c6:	2304      	movcs	r3, #4
 80021c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	3304      	adds	r3, #4
 80021ce:	2b06      	cmp	r3, #6
 80021d0:	d902      	bls.n	80021d8 <NVIC_EncodePriority+0x30>
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	3b03      	subs	r3, #3
 80021d6:	e000      	b.n	80021da <NVIC_EncodePriority+0x32>
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021dc:	f04f 32ff 	mov.w	r2, #4294967295
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	43da      	mvns	r2, r3
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	401a      	ands	r2, r3
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021f0:	f04f 31ff 	mov.w	r1, #4294967295
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	fa01 f303 	lsl.w	r3, r1, r3
 80021fa:	43d9      	mvns	r1, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002200:	4313      	orrs	r3, r2
         );
}
 8002202:	4618      	mov	r0, r3
 8002204:	3724      	adds	r7, #36	; 0x24
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr

0800220c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3b01      	subs	r3, #1
 8002218:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800221c:	d301      	bcc.n	8002222 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800221e:	2301      	movs	r3, #1
 8002220:	e00f      	b.n	8002242 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002222:	4a0a      	ldr	r2, [pc, #40]	; (800224c <SysTick_Config+0x40>)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3b01      	subs	r3, #1
 8002228:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800222a:	210f      	movs	r1, #15
 800222c:	f04f 30ff 	mov.w	r0, #4294967295
 8002230:	f7ff ff90 	bl	8002154 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002234:	4b05      	ldr	r3, [pc, #20]	; (800224c <SysTick_Config+0x40>)
 8002236:	2200      	movs	r2, #0
 8002238:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800223a:	4b04      	ldr	r3, [pc, #16]	; (800224c <SysTick_Config+0x40>)
 800223c:	2207      	movs	r2, #7
 800223e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	e000e010 	.word	0xe000e010

08002250 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f7ff ff49 	bl	80020f0 <__NVIC_SetPriorityGrouping>
}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b086      	sub	sp, #24
 800226a:	af00      	add	r7, sp, #0
 800226c:	4603      	mov	r3, r0
 800226e:	60b9      	str	r1, [r7, #8]
 8002270:	607a      	str	r2, [r7, #4]
 8002272:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002278:	f7ff ff5e 	bl	8002138 <__NVIC_GetPriorityGrouping>
 800227c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	68b9      	ldr	r1, [r7, #8]
 8002282:	6978      	ldr	r0, [r7, #20]
 8002284:	f7ff ff90 	bl	80021a8 <NVIC_EncodePriority>
 8002288:	4602      	mov	r2, r0
 800228a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800228e:	4611      	mov	r1, r2
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff ff5f 	bl	8002154 <__NVIC_SetPriority>
}
 8002296:	bf00      	nop
 8002298:	3718      	adds	r7, #24
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b082      	sub	sp, #8
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7ff ffb0 	bl	800220c <SysTick_Config>
 80022ac:	4603      	mov	r3, r0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b087      	sub	sp, #28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80022c6:	2300      	movs	r3, #0
 80022c8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80022ca:	2300      	movs	r3, #0
 80022cc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80022ce:	e154      	b.n	800257a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	2101      	movs	r1, #1
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	fa01 f303 	lsl.w	r3, r1, r3
 80022dc:	4013      	ands	r3, r2
 80022de:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f000 8146 	beq.w	8002574 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d005      	beq.n	8002300 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d130      	bne.n	8002362 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	2203      	movs	r2, #3
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	43db      	mvns	r3, r3
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	4013      	ands	r3, r2
 8002316:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	68da      	ldr	r2, [r3, #12]
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	4313      	orrs	r3, r2
 8002328:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002336:	2201      	movs	r2, #1
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43db      	mvns	r3, r3
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	4013      	ands	r3, r2
 8002344:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	091b      	lsrs	r3, r3, #4
 800234c:	f003 0201 	and.w	r2, r3, #1
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	4313      	orrs	r3, r2
 800235a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f003 0303 	and.w	r3, r3, #3
 800236a:	2b03      	cmp	r3, #3
 800236c:	d017      	beq.n	800239e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	2203      	movs	r2, #3
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	43db      	mvns	r3, r3
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	4013      	ands	r3, r2
 8002384:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	4313      	orrs	r3, r2
 8002396:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d123      	bne.n	80023f2 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	08da      	lsrs	r2, r3, #3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	3208      	adds	r2, #8
 80023b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023b6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	220f      	movs	r2, #15
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43db      	mvns	r3, r3
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	4013      	ands	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	691a      	ldr	r2, [r3, #16]
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	08da      	lsrs	r2, r3, #3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3208      	adds	r2, #8
 80023ec:	6939      	ldr	r1, [r7, #16]
 80023ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	2203      	movs	r2, #3
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43db      	mvns	r3, r3
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	4013      	ands	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f003 0203 	and.w	r2, r3, #3
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	4313      	orrs	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800242e:	2b00      	cmp	r3, #0
 8002430:	f000 80a0 	beq.w	8002574 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002434:	4b58      	ldr	r3, [pc, #352]	; (8002598 <HAL_GPIO_Init+0x2e0>)
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	4a57      	ldr	r2, [pc, #348]	; (8002598 <HAL_GPIO_Init+0x2e0>)
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	6213      	str	r3, [r2, #32]
 8002440:	4b55      	ldr	r3, [pc, #340]	; (8002598 <HAL_GPIO_Init+0x2e0>)
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	60bb      	str	r3, [r7, #8]
 800244a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800244c:	4a53      	ldr	r2, [pc, #332]	; (800259c <HAL_GPIO_Init+0x2e4>)
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	089b      	lsrs	r3, r3, #2
 8002452:	3302      	adds	r3, #2
 8002454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002458:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	f003 0303 	and.w	r3, r3, #3
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	220f      	movs	r2, #15
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	4013      	ands	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a4b      	ldr	r2, [pc, #300]	; (80025a0 <HAL_GPIO_Init+0x2e8>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d019      	beq.n	80024ac <HAL_GPIO_Init+0x1f4>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a4a      	ldr	r2, [pc, #296]	; (80025a4 <HAL_GPIO_Init+0x2ec>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d013      	beq.n	80024a8 <HAL_GPIO_Init+0x1f0>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a49      	ldr	r2, [pc, #292]	; (80025a8 <HAL_GPIO_Init+0x2f0>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d00d      	beq.n	80024a4 <HAL_GPIO_Init+0x1ec>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a48      	ldr	r2, [pc, #288]	; (80025ac <HAL_GPIO_Init+0x2f4>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d007      	beq.n	80024a0 <HAL_GPIO_Init+0x1e8>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a47      	ldr	r2, [pc, #284]	; (80025b0 <HAL_GPIO_Init+0x2f8>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d101      	bne.n	800249c <HAL_GPIO_Init+0x1e4>
 8002498:	2304      	movs	r3, #4
 800249a:	e008      	b.n	80024ae <HAL_GPIO_Init+0x1f6>
 800249c:	2305      	movs	r3, #5
 800249e:	e006      	b.n	80024ae <HAL_GPIO_Init+0x1f6>
 80024a0:	2303      	movs	r3, #3
 80024a2:	e004      	b.n	80024ae <HAL_GPIO_Init+0x1f6>
 80024a4:	2302      	movs	r3, #2
 80024a6:	e002      	b.n	80024ae <HAL_GPIO_Init+0x1f6>
 80024a8:	2301      	movs	r3, #1
 80024aa:	e000      	b.n	80024ae <HAL_GPIO_Init+0x1f6>
 80024ac:	2300      	movs	r3, #0
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	f002 0203 	and.w	r2, r2, #3
 80024b4:	0092      	lsls	r2, r2, #2
 80024b6:	4093      	lsls	r3, r2
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80024be:	4937      	ldr	r1, [pc, #220]	; (800259c <HAL_GPIO_Init+0x2e4>)
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	089b      	lsrs	r3, r3, #2
 80024c4:	3302      	adds	r3, #2
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024cc:	4b39      	ldr	r3, [pc, #228]	; (80025b4 <HAL_GPIO_Init+0x2fc>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	43db      	mvns	r3, r3
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	4013      	ands	r3, r2
 80024da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80024f0:	4a30      	ldr	r2, [pc, #192]	; (80025b4 <HAL_GPIO_Init+0x2fc>)
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024f6:	4b2f      	ldr	r3, [pc, #188]	; (80025b4 <HAL_GPIO_Init+0x2fc>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	43db      	mvns	r3, r3
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	4013      	ands	r3, r2
 8002504:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4313      	orrs	r3, r2
 8002518:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800251a:	4a26      	ldr	r2, [pc, #152]	; (80025b4 <HAL_GPIO_Init+0x2fc>)
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002520:	4b24      	ldr	r3, [pc, #144]	; (80025b4 <HAL_GPIO_Init+0x2fc>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	43db      	mvns	r3, r3
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	4013      	ands	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d003      	beq.n	8002544 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	4313      	orrs	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002544:	4a1b      	ldr	r2, [pc, #108]	; (80025b4 <HAL_GPIO_Init+0x2fc>)
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800254a:	4b1a      	ldr	r3, [pc, #104]	; (80025b4 <HAL_GPIO_Init+0x2fc>)
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	43db      	mvns	r3, r3
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	4013      	ands	r3, r2
 8002558:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4313      	orrs	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800256e:	4a11      	ldr	r2, [pc, #68]	; (80025b4 <HAL_GPIO_Init+0x2fc>)
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	3301      	adds	r3, #1
 8002578:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	fa22 f303 	lsr.w	r3, r2, r3
 8002584:	2b00      	cmp	r3, #0
 8002586:	f47f aea3 	bne.w	80022d0 <HAL_GPIO_Init+0x18>
  }
}
 800258a:	bf00      	nop
 800258c:	bf00      	nop
 800258e:	371c      	adds	r7, #28
 8002590:	46bd      	mov	sp, r7
 8002592:	bc80      	pop	{r7}
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	40023800 	.word	0x40023800
 800259c:	40010000 	.word	0x40010000
 80025a0:	40020000 	.word	0x40020000
 80025a4:	40020400 	.word	0x40020400
 80025a8:	40020800 	.word	0x40020800
 80025ac:	40020c00 	.word	0x40020c00
 80025b0:	40021000 	.word	0x40021000
 80025b4:	40010400 	.word	0x40010400

080025b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	807b      	strh	r3, [r7, #2]
 80025c4:	4613      	mov	r3, r2
 80025c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025c8:	787b      	ldrb	r3, [r7, #1]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025ce:	887a      	ldrh	r2, [r7, #2]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80025d4:	e003      	b.n	80025de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80025d6:	887b      	ldrh	r3, [r7, #2]
 80025d8:	041a      	lsls	r2, r3, #16
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	619a      	str	r2, [r3, #24]
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr

080025e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b088      	sub	sp, #32
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e31d      	b.n	8002c36 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025fa:	4b94      	ldr	r3, [pc, #592]	; (800284c <HAL_RCC_OscConfig+0x264>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 030c 	and.w	r3, r3, #12
 8002602:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002604:	4b91      	ldr	r3, [pc, #580]	; (800284c <HAL_RCC_OscConfig+0x264>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800260c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d07b      	beq.n	8002712 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	2b08      	cmp	r3, #8
 800261e:	d006      	beq.n	800262e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	2b0c      	cmp	r3, #12
 8002624:	d10f      	bne.n	8002646 <HAL_RCC_OscConfig+0x5e>
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800262c:	d10b      	bne.n	8002646 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800262e:	4b87      	ldr	r3, [pc, #540]	; (800284c <HAL_RCC_OscConfig+0x264>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d06a      	beq.n	8002710 <HAL_RCC_OscConfig+0x128>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d166      	bne.n	8002710 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e2f7      	b.n	8002c36 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d106      	bne.n	800265c <HAL_RCC_OscConfig+0x74>
 800264e:	4b7f      	ldr	r3, [pc, #508]	; (800284c <HAL_RCC_OscConfig+0x264>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a7e      	ldr	r2, [pc, #504]	; (800284c <HAL_RCC_OscConfig+0x264>)
 8002654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	e02d      	b.n	80026b8 <HAL_RCC_OscConfig+0xd0>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d10c      	bne.n	800267e <HAL_RCC_OscConfig+0x96>
 8002664:	4b79      	ldr	r3, [pc, #484]	; (800284c <HAL_RCC_OscConfig+0x264>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a78      	ldr	r2, [pc, #480]	; (800284c <HAL_RCC_OscConfig+0x264>)
 800266a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800266e:	6013      	str	r3, [r2, #0]
 8002670:	4b76      	ldr	r3, [pc, #472]	; (800284c <HAL_RCC_OscConfig+0x264>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a75      	ldr	r2, [pc, #468]	; (800284c <HAL_RCC_OscConfig+0x264>)
 8002676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800267a:	6013      	str	r3, [r2, #0]
 800267c:	e01c      	b.n	80026b8 <HAL_RCC_OscConfig+0xd0>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2b05      	cmp	r3, #5
 8002684:	d10c      	bne.n	80026a0 <HAL_RCC_OscConfig+0xb8>
 8002686:	4b71      	ldr	r3, [pc, #452]	; (800284c <HAL_RCC_OscConfig+0x264>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a70      	ldr	r2, [pc, #448]	; (800284c <HAL_RCC_OscConfig+0x264>)
 800268c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002690:	6013      	str	r3, [r2, #0]
 8002692:	4b6e      	ldr	r3, [pc, #440]	; (800284c <HAL_RCC_OscConfig+0x264>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a6d      	ldr	r2, [pc, #436]	; (800284c <HAL_RCC_OscConfig+0x264>)
 8002698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	e00b      	b.n	80026b8 <HAL_RCC_OscConfig+0xd0>
 80026a0:	4b6a      	ldr	r3, [pc, #424]	; (800284c <HAL_RCC_OscConfig+0x264>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a69      	ldr	r2, [pc, #420]	; (800284c <HAL_RCC_OscConfig+0x264>)
 80026a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026aa:	6013      	str	r3, [r2, #0]
 80026ac:	4b67      	ldr	r3, [pc, #412]	; (800284c <HAL_RCC_OscConfig+0x264>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a66      	ldr	r2, [pc, #408]	; (800284c <HAL_RCC_OscConfig+0x264>)
 80026b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d013      	beq.n	80026e8 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c0:	f7ff fa76 	bl	8001bb0 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026c8:	f7ff fa72 	bl	8001bb0 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b64      	cmp	r3, #100	; 0x64
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e2ad      	b.n	8002c36 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026da:	4b5c      	ldr	r3, [pc, #368]	; (800284c <HAL_RCC_OscConfig+0x264>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0f0      	beq.n	80026c8 <HAL_RCC_OscConfig+0xe0>
 80026e6:	e014      	b.n	8002712 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e8:	f7ff fa62 	bl	8001bb0 <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026f0:	f7ff fa5e 	bl	8001bb0 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b64      	cmp	r3, #100	; 0x64
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e299      	b.n	8002c36 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002702:	4b52      	ldr	r3, [pc, #328]	; (800284c <HAL_RCC_OscConfig+0x264>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f0      	bne.n	80026f0 <HAL_RCC_OscConfig+0x108>
 800270e:	e000      	b.n	8002712 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d05a      	beq.n	80027d4 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	2b04      	cmp	r3, #4
 8002722:	d005      	beq.n	8002730 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	2b0c      	cmp	r3, #12
 8002728:	d119      	bne.n	800275e <HAL_RCC_OscConfig+0x176>
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d116      	bne.n	800275e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002730:	4b46      	ldr	r3, [pc, #280]	; (800284c <HAL_RCC_OscConfig+0x264>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d005      	beq.n	8002748 <HAL_RCC_OscConfig+0x160>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d001      	beq.n	8002748 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e276      	b.n	8002c36 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002748:	4b40      	ldr	r3, [pc, #256]	; (800284c <HAL_RCC_OscConfig+0x264>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	021b      	lsls	r3, r3, #8
 8002756:	493d      	ldr	r1, [pc, #244]	; (800284c <HAL_RCC_OscConfig+0x264>)
 8002758:	4313      	orrs	r3, r2
 800275a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800275c:	e03a      	b.n	80027d4 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d020      	beq.n	80027a8 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002766:	4b3a      	ldr	r3, [pc, #232]	; (8002850 <HAL_RCC_OscConfig+0x268>)
 8002768:	2201      	movs	r2, #1
 800276a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276c:	f7ff fa20 	bl	8001bb0 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002774:	f7ff fa1c 	bl	8001bb0 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e257      	b.n	8002c36 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002786:	4b31      	ldr	r3, [pc, #196]	; (800284c <HAL_RCC_OscConfig+0x264>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0f0      	beq.n	8002774 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002792:	4b2e      	ldr	r3, [pc, #184]	; (800284c <HAL_RCC_OscConfig+0x264>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	021b      	lsls	r3, r3, #8
 80027a0:	492a      	ldr	r1, [pc, #168]	; (800284c <HAL_RCC_OscConfig+0x264>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	604b      	str	r3, [r1, #4]
 80027a6:	e015      	b.n	80027d4 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027a8:	4b29      	ldr	r3, [pc, #164]	; (8002850 <HAL_RCC_OscConfig+0x268>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ae:	f7ff f9ff 	bl	8001bb0 <HAL_GetTick>
 80027b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027b6:	f7ff f9fb 	bl	8001bb0 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e236      	b.n	8002c36 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027c8:	4b20      	ldr	r3, [pc, #128]	; (800284c <HAL_RCC_OscConfig+0x264>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1f0      	bne.n	80027b6 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0310 	and.w	r3, r3, #16
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 80b8 	beq.w	8002952 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d170      	bne.n	80028ca <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027e8:	4b18      	ldr	r3, [pc, #96]	; (800284c <HAL_RCC_OscConfig+0x264>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d005      	beq.n	8002800 <HAL_RCC_OscConfig+0x218>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e21a      	b.n	8002c36 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a1a      	ldr	r2, [r3, #32]
 8002804:	4b11      	ldr	r3, [pc, #68]	; (800284c <HAL_RCC_OscConfig+0x264>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800280c:	429a      	cmp	r2, r3
 800280e:	d921      	bls.n	8002854 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	4618      	mov	r0, r3
 8002816:	f000 fc4b 	bl	80030b0 <RCC_SetFlashLatencyFromMSIRange>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e208      	b.n	8002c36 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002824:	4b09      	ldr	r3, [pc, #36]	; (800284c <HAL_RCC_OscConfig+0x264>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	4906      	ldr	r1, [pc, #24]	; (800284c <HAL_RCC_OscConfig+0x264>)
 8002832:	4313      	orrs	r3, r2
 8002834:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002836:	4b05      	ldr	r3, [pc, #20]	; (800284c <HAL_RCC_OscConfig+0x264>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	061b      	lsls	r3, r3, #24
 8002844:	4901      	ldr	r1, [pc, #4]	; (800284c <HAL_RCC_OscConfig+0x264>)
 8002846:	4313      	orrs	r3, r2
 8002848:	604b      	str	r3, [r1, #4]
 800284a:	e020      	b.n	800288e <HAL_RCC_OscConfig+0x2a6>
 800284c:	40023800 	.word	0x40023800
 8002850:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002854:	4b99      	ldr	r3, [pc, #612]	; (8002abc <HAL_RCC_OscConfig+0x4d4>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	4996      	ldr	r1, [pc, #600]	; (8002abc <HAL_RCC_OscConfig+0x4d4>)
 8002862:	4313      	orrs	r3, r2
 8002864:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002866:	4b95      	ldr	r3, [pc, #596]	; (8002abc <HAL_RCC_OscConfig+0x4d4>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	061b      	lsls	r3, r3, #24
 8002874:	4991      	ldr	r1, [pc, #580]	; (8002abc <HAL_RCC_OscConfig+0x4d4>)
 8002876:	4313      	orrs	r3, r2
 8002878:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	4618      	mov	r0, r3
 8002880:	f000 fc16 	bl	80030b0 <RCC_SetFlashLatencyFromMSIRange>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e1d3      	b.n	8002c36 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	0b5b      	lsrs	r3, r3, #13
 8002894:	3301      	adds	r3, #1
 8002896:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800289e:	4a87      	ldr	r2, [pc, #540]	; (8002abc <HAL_RCC_OscConfig+0x4d4>)
 80028a0:	6892      	ldr	r2, [r2, #8]
 80028a2:	0912      	lsrs	r2, r2, #4
 80028a4:	f002 020f 	and.w	r2, r2, #15
 80028a8:	4985      	ldr	r1, [pc, #532]	; (8002ac0 <HAL_RCC_OscConfig+0x4d8>)
 80028aa:	5c8a      	ldrb	r2, [r1, r2]
 80028ac:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80028ae:	4a85      	ldr	r2, [pc, #532]	; (8002ac4 <HAL_RCC_OscConfig+0x4dc>)
 80028b0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80028b2:	4b85      	ldr	r3, [pc, #532]	; (8002ac8 <HAL_RCC_OscConfig+0x4e0>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff f92e 	bl	8001b18 <HAL_InitTick>
 80028bc:	4603      	mov	r3, r0
 80028be:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d045      	beq.n	8002952 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
 80028c8:	e1b5      	b.n	8002c36 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d029      	beq.n	8002926 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028d2:	4b7e      	ldr	r3, [pc, #504]	; (8002acc <HAL_RCC_OscConfig+0x4e4>)
 80028d4:	2201      	movs	r2, #1
 80028d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d8:	f7ff f96a 	bl	8001bb0 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028e0:	f7ff f966 	bl	8001bb0 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e1a1      	b.n	8002c36 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80028f2:	4b72      	ldr	r3, [pc, #456]	; (8002abc <HAL_RCC_OscConfig+0x4d4>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d0f0      	beq.n	80028e0 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028fe:	4b6f      	ldr	r3, [pc, #444]	; (8002abc <HAL_RCC_OscConfig+0x4d4>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	496c      	ldr	r1, [pc, #432]	; (8002abc <HAL_RCC_OscConfig+0x4d4>)
 800290c:	4313      	orrs	r3, r2
 800290e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002910:	4b6a      	ldr	r3, [pc, #424]	; (8002abc <HAL_RCC_OscConfig+0x4d4>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	69db      	ldr	r3, [r3, #28]
 800291c:	061b      	lsls	r3, r3, #24
 800291e:	4967      	ldr	r1, [pc, #412]	; (8002abc <HAL_RCC_OscConfig+0x4d4>)
 8002920:	4313      	orrs	r3, r2
 8002922:	604b      	str	r3, [r1, #4]
 8002924:	e015      	b.n	8002952 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002926:	4b69      	ldr	r3, [pc, #420]	; (8002acc <HAL_RCC_OscConfig+0x4e4>)
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292c:	f7ff f940 	bl	8001bb0 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002934:	f7ff f93c 	bl	8001bb0 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e177      	b.n	8002c36 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002946:	4b5d      	ldr	r3, [pc, #372]	; (8002abc <HAL_RCC_OscConfig+0x4d4>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f0      	bne.n	8002934 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b00      	cmp	r3, #0
 800295c:	d030      	beq.n	80029c0 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d016      	beq.n	8002994 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002966:	4b5a      	ldr	r3, [pc, #360]	; (8002ad0 <HAL_RCC_OscConfig+0x4e8>)
 8002968:	2201      	movs	r2, #1
 800296a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800296c:	f7ff f920 	bl	8001bb0 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002974:	f7ff f91c 	bl	8001bb0 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e157      	b.n	8002c36 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002986:	4b4d      	ldr	r3, [pc, #308]	; (8002abc <HAL_RCC_OscConfig+0x4d4>)
 8002988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0f0      	beq.n	8002974 <HAL_RCC_OscConfig+0x38c>
 8002992:	e015      	b.n	80029c0 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002994:	4b4e      	ldr	r3, [pc, #312]	; (8002ad0 <HAL_RCC_OscConfig+0x4e8>)
 8002996:	2200      	movs	r2, #0
 8002998:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800299a:	f7ff f909 	bl	8001bb0 <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029a0:	e008      	b.n	80029b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029a2:	f7ff f905 	bl	8001bb0 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e140      	b.n	8002c36 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029b4:	4b41      	ldr	r3, [pc, #260]	; (8002abc <HAL_RCC_OscConfig+0x4d4>)
 80029b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1f0      	bne.n	80029a2 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f000 80b5 	beq.w	8002b38 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ce:	2300      	movs	r3, #0
 80029d0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029d2:	4b3a      	ldr	r3, [pc, #232]	; (8002abc <HAL_RCC_OscConfig+0x4d4>)
 80029d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10d      	bne.n	80029fa <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029de:	4b37      	ldr	r3, [pc, #220]	; (8002abc <HAL_RCC_OscConfig+0x4d4>)
 80029e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e2:	4a36      	ldr	r2, [pc, #216]	; (8002abc <HAL_RCC_OscConfig+0x4d4>)
 80029e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e8:	6253      	str	r3, [r2, #36]	; 0x24
 80029ea:	4b34      	ldr	r3, [pc, #208]	; (8002abc <HAL_RCC_OscConfig+0x4d4>)
 80029ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f2:	60bb      	str	r3, [r7, #8]
 80029f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029f6:	2301      	movs	r3, #1
 80029f8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029fa:	4b36      	ldr	r3, [pc, #216]	; (8002ad4 <HAL_RCC_OscConfig+0x4ec>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d118      	bne.n	8002a38 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a06:	4b33      	ldr	r3, [pc, #204]	; (8002ad4 <HAL_RCC_OscConfig+0x4ec>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a32      	ldr	r2, [pc, #200]	; (8002ad4 <HAL_RCC_OscConfig+0x4ec>)
 8002a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a12:	f7ff f8cd 	bl	8001bb0 <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a18:	e008      	b.n	8002a2c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a1a:	f7ff f8c9 	bl	8001bb0 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b64      	cmp	r3, #100	; 0x64
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e104      	b.n	8002c36 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a2c:	4b29      	ldr	r3, [pc, #164]	; (8002ad4 <HAL_RCC_OscConfig+0x4ec>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d0f0      	beq.n	8002a1a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d106      	bne.n	8002a4e <HAL_RCC_OscConfig+0x466>
 8002a40:	4b1e      	ldr	r3, [pc, #120]	; (8002abc <HAL_RCC_OscConfig+0x4d4>)
 8002a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a44:	4a1d      	ldr	r2, [pc, #116]	; (8002abc <HAL_RCC_OscConfig+0x4d4>)
 8002a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a4a:	6353      	str	r3, [r2, #52]	; 0x34
 8002a4c:	e02d      	b.n	8002aaa <HAL_RCC_OscConfig+0x4c2>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10c      	bne.n	8002a70 <HAL_RCC_OscConfig+0x488>
 8002a56:	4b19      	ldr	r3, [pc, #100]	; (8002abc <HAL_RCC_OscConfig+0x4d4>)
 8002a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a5a:	4a18      	ldr	r2, [pc, #96]	; (8002abc <HAL_RCC_OscConfig+0x4d4>)
 8002a5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a60:	6353      	str	r3, [r2, #52]	; 0x34
 8002a62:	4b16      	ldr	r3, [pc, #88]	; (8002abc <HAL_RCC_OscConfig+0x4d4>)
 8002a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a66:	4a15      	ldr	r2, [pc, #84]	; (8002abc <HAL_RCC_OscConfig+0x4d4>)
 8002a68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a6c:	6353      	str	r3, [r2, #52]	; 0x34
 8002a6e:	e01c      	b.n	8002aaa <HAL_RCC_OscConfig+0x4c2>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	2b05      	cmp	r3, #5
 8002a76:	d10c      	bne.n	8002a92 <HAL_RCC_OscConfig+0x4aa>
 8002a78:	4b10      	ldr	r3, [pc, #64]	; (8002abc <HAL_RCC_OscConfig+0x4d4>)
 8002a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a7c:	4a0f      	ldr	r2, [pc, #60]	; (8002abc <HAL_RCC_OscConfig+0x4d4>)
 8002a7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a82:	6353      	str	r3, [r2, #52]	; 0x34
 8002a84:	4b0d      	ldr	r3, [pc, #52]	; (8002abc <HAL_RCC_OscConfig+0x4d4>)
 8002a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a88:	4a0c      	ldr	r2, [pc, #48]	; (8002abc <HAL_RCC_OscConfig+0x4d4>)
 8002a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a8e:	6353      	str	r3, [r2, #52]	; 0x34
 8002a90:	e00b      	b.n	8002aaa <HAL_RCC_OscConfig+0x4c2>
 8002a92:	4b0a      	ldr	r3, [pc, #40]	; (8002abc <HAL_RCC_OscConfig+0x4d4>)
 8002a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a96:	4a09      	ldr	r2, [pc, #36]	; (8002abc <HAL_RCC_OscConfig+0x4d4>)
 8002a98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a9c:	6353      	str	r3, [r2, #52]	; 0x34
 8002a9e:	4b07      	ldr	r3, [pc, #28]	; (8002abc <HAL_RCC_OscConfig+0x4d4>)
 8002aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa2:	4a06      	ldr	r2, [pc, #24]	; (8002abc <HAL_RCC_OscConfig+0x4d4>)
 8002aa4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002aa8:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d024      	beq.n	8002afc <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab2:	f7ff f87d 	bl	8001bb0 <HAL_GetTick>
 8002ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ab8:	e019      	b.n	8002aee <HAL_RCC_OscConfig+0x506>
 8002aba:	bf00      	nop
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	080036bc 	.word	0x080036bc
 8002ac4:	20000000 	.word	0x20000000
 8002ac8:	20000004 	.word	0x20000004
 8002acc:	42470020 	.word	0x42470020
 8002ad0:	42470680 	.word	0x42470680
 8002ad4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ad8:	f7ff f86a 	bl	8001bb0 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e0a3      	b.n	8002c36 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002aee:	4b54      	ldr	r3, [pc, #336]	; (8002c40 <HAL_RCC_OscConfig+0x658>)
 8002af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0ee      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x4f0>
 8002afa:	e014      	b.n	8002b26 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002afc:	f7ff f858 	bl	8001bb0 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b02:	e00a      	b.n	8002b1a <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b04:	f7ff f854 	bl	8001bb0 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e08d      	b.n	8002c36 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b1a:	4b49      	ldr	r3, [pc, #292]	; (8002c40 <HAL_RCC_OscConfig+0x658>)
 8002b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1ee      	bne.n	8002b04 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b26:	7ffb      	ldrb	r3, [r7, #31]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d105      	bne.n	8002b38 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b2c:	4b44      	ldr	r3, [pc, #272]	; (8002c40 <HAL_RCC_OscConfig+0x658>)
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b30:	4a43      	ldr	r2, [pc, #268]	; (8002c40 <HAL_RCC_OscConfig+0x658>)
 8002b32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b36:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d079      	beq.n	8002c34 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	2b0c      	cmp	r3, #12
 8002b44:	d056      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d13b      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b4e:	4b3d      	ldr	r3, [pc, #244]	; (8002c44 <HAL_RCC_OscConfig+0x65c>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b54:	f7ff f82c 	bl	8001bb0 <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b5c:	f7ff f828 	bl	8001bb0 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e063      	b.n	8002c36 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b6e:	4b34      	ldr	r3, [pc, #208]	; (8002c40 <HAL_RCC_OscConfig+0x658>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1f0      	bne.n	8002b5c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b7a:	4b31      	ldr	r3, [pc, #196]	; (8002c40 <HAL_RCC_OscConfig+0x658>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8a:	4319      	orrs	r1, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b90:	430b      	orrs	r3, r1
 8002b92:	492b      	ldr	r1, [pc, #172]	; (8002c40 <HAL_RCC_OscConfig+0x658>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b98:	4b2a      	ldr	r3, [pc, #168]	; (8002c44 <HAL_RCC_OscConfig+0x65c>)
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9e:	f7ff f807 	bl	8001bb0 <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ba4:	e008      	b.n	8002bb8 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ba6:	f7ff f803 	bl	8001bb0 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e03e      	b.n	8002c36 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bb8:	4b21      	ldr	r3, [pc, #132]	; (8002c40 <HAL_RCC_OscConfig+0x658>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d0f0      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x5be>
 8002bc4:	e036      	b.n	8002c34 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc6:	4b1f      	ldr	r3, [pc, #124]	; (8002c44 <HAL_RCC_OscConfig+0x65c>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bcc:	f7fe fff0 	bl	8001bb0 <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bd4:	f7fe ffec 	bl	8001bb0 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e027      	b.n	8002c36 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002be6:	4b16      	ldr	r3, [pc, #88]	; (8002c40 <HAL_RCC_OscConfig+0x658>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f0      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x5ec>
 8002bf2:	e01f      	b.n	8002c34 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d101      	bne.n	8002c00 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e01a      	b.n	8002c36 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c00:	4b0f      	ldr	r3, [pc, #60]	; (8002c40 <HAL_RCC_OscConfig+0x658>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d10d      	bne.n	8002c30 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d106      	bne.n	8002c30 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d001      	beq.n	8002c34 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e000      	b.n	8002c36 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3720      	adds	r7, #32
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	40023800 	.word	0x40023800
 8002c44:	42470060 	.word	0x42470060

08002c48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e11a      	b.n	8002e92 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c5c:	4b8f      	ldr	r3, [pc, #572]	; (8002e9c <HAL_RCC_ClockConfig+0x254>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d919      	bls.n	8002c9e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d105      	bne.n	8002c7c <HAL_RCC_ClockConfig+0x34>
 8002c70:	4b8a      	ldr	r3, [pc, #552]	; (8002e9c <HAL_RCC_ClockConfig+0x254>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a89      	ldr	r2, [pc, #548]	; (8002e9c <HAL_RCC_ClockConfig+0x254>)
 8002c76:	f043 0304 	orr.w	r3, r3, #4
 8002c7a:	6013      	str	r3, [r2, #0]
 8002c7c:	4b87      	ldr	r3, [pc, #540]	; (8002e9c <HAL_RCC_ClockConfig+0x254>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f023 0201 	bic.w	r2, r3, #1
 8002c84:	4985      	ldr	r1, [pc, #532]	; (8002e9c <HAL_RCC_ClockConfig+0x254>)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c8c:	4b83      	ldr	r3, [pc, #524]	; (8002e9c <HAL_RCC_ClockConfig+0x254>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d001      	beq.n	8002c9e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e0f9      	b.n	8002e92 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d008      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002caa:	4b7d      	ldr	r3, [pc, #500]	; (8002ea0 <HAL_RCC_ClockConfig+0x258>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	497a      	ldr	r1, [pc, #488]	; (8002ea0 <HAL_RCC_ClockConfig+0x258>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f000 808e 	beq.w	8002de6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d107      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cd2:	4b73      	ldr	r3, [pc, #460]	; (8002ea0 <HAL_RCC_ClockConfig+0x258>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d121      	bne.n	8002d22 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e0d7      	b.n	8002e92 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2b03      	cmp	r3, #3
 8002ce8:	d107      	bne.n	8002cfa <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cea:	4b6d      	ldr	r3, [pc, #436]	; (8002ea0 <HAL_RCC_ClockConfig+0x258>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d115      	bne.n	8002d22 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e0cb      	b.n	8002e92 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d107      	bne.n	8002d12 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d02:	4b67      	ldr	r3, [pc, #412]	; (8002ea0 <HAL_RCC_ClockConfig+0x258>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d109      	bne.n	8002d22 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e0bf      	b.n	8002e92 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002d12:	4b63      	ldr	r3, [pc, #396]	; (8002ea0 <HAL_RCC_ClockConfig+0x258>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e0b7      	b.n	8002e92 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d22:	4b5f      	ldr	r3, [pc, #380]	; (8002ea0 <HAL_RCC_ClockConfig+0x258>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f023 0203 	bic.w	r2, r3, #3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	495c      	ldr	r1, [pc, #368]	; (8002ea0 <HAL_RCC_ClockConfig+0x258>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d34:	f7fe ff3c 	bl	8001bb0 <HAL_GetTick>
 8002d38:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d112      	bne.n	8002d68 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d42:	e00a      	b.n	8002d5a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d44:	f7fe ff34 	bl	8001bb0 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e09b      	b.n	8002e92 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d5a:	4b51      	ldr	r3, [pc, #324]	; (8002ea0 <HAL_RCC_ClockConfig+0x258>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 030c 	and.w	r3, r3, #12
 8002d62:	2b08      	cmp	r3, #8
 8002d64:	d1ee      	bne.n	8002d44 <HAL_RCC_ClockConfig+0xfc>
 8002d66:	e03e      	b.n	8002de6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	2b03      	cmp	r3, #3
 8002d6e:	d112      	bne.n	8002d96 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d70:	e00a      	b.n	8002d88 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d72:	f7fe ff1d 	bl	8001bb0 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e084      	b.n	8002e92 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d88:	4b45      	ldr	r3, [pc, #276]	; (8002ea0 <HAL_RCC_ClockConfig+0x258>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f003 030c 	and.w	r3, r3, #12
 8002d90:	2b0c      	cmp	r3, #12
 8002d92:	d1ee      	bne.n	8002d72 <HAL_RCC_ClockConfig+0x12a>
 8002d94:	e027      	b.n	8002de6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d11d      	bne.n	8002dda <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d9e:	e00a      	b.n	8002db6 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002da0:	f7fe ff06 	bl	8001bb0 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e06d      	b.n	8002e92 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002db6:	4b3a      	ldr	r3, [pc, #232]	; (8002ea0 <HAL_RCC_ClockConfig+0x258>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 030c 	and.w	r3, r3, #12
 8002dbe:	2b04      	cmp	r3, #4
 8002dc0:	d1ee      	bne.n	8002da0 <HAL_RCC_ClockConfig+0x158>
 8002dc2:	e010      	b.n	8002de6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dc4:	f7fe fef4 	bl	8001bb0 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e05b      	b.n	8002e92 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002dda:	4b31      	ldr	r3, [pc, #196]	; (8002ea0 <HAL_RCC_ClockConfig+0x258>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 030c 	and.w	r3, r3, #12
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1ee      	bne.n	8002dc4 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002de6:	4b2d      	ldr	r3, [pc, #180]	; (8002e9c <HAL_RCC_ClockConfig+0x254>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d219      	bcs.n	8002e28 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d105      	bne.n	8002e06 <HAL_RCC_ClockConfig+0x1be>
 8002dfa:	4b28      	ldr	r3, [pc, #160]	; (8002e9c <HAL_RCC_ClockConfig+0x254>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a27      	ldr	r2, [pc, #156]	; (8002e9c <HAL_RCC_ClockConfig+0x254>)
 8002e00:	f043 0304 	orr.w	r3, r3, #4
 8002e04:	6013      	str	r3, [r2, #0]
 8002e06:	4b25      	ldr	r3, [pc, #148]	; (8002e9c <HAL_RCC_ClockConfig+0x254>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f023 0201 	bic.w	r2, r3, #1
 8002e0e:	4923      	ldr	r1, [pc, #140]	; (8002e9c <HAL_RCC_ClockConfig+0x254>)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e16:	4b21      	ldr	r3, [pc, #132]	; (8002e9c <HAL_RCC_ClockConfig+0x254>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d001      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e034      	b.n	8002e92 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d008      	beq.n	8002e46 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e34:	4b1a      	ldr	r3, [pc, #104]	; (8002ea0 <HAL_RCC_ClockConfig+0x258>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	4917      	ldr	r1, [pc, #92]	; (8002ea0 <HAL_RCC_ClockConfig+0x258>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0308 	and.w	r3, r3, #8
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d009      	beq.n	8002e66 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e52:	4b13      	ldr	r3, [pc, #76]	; (8002ea0 <HAL_RCC_ClockConfig+0x258>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	490f      	ldr	r1, [pc, #60]	; (8002ea0 <HAL_RCC_ClockConfig+0x258>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e66:	f000 f823 	bl	8002eb0 <HAL_RCC_GetSysClockFreq>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ea0 <HAL_RCC_ClockConfig+0x258>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	091b      	lsrs	r3, r3, #4
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	490b      	ldr	r1, [pc, #44]	; (8002ea4 <HAL_RCC_ClockConfig+0x25c>)
 8002e78:	5ccb      	ldrb	r3, [r1, r3]
 8002e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7e:	4a0a      	ldr	r2, [pc, #40]	; (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002e80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e82:	4b0a      	ldr	r3, [pc, #40]	; (8002eac <HAL_RCC_ClockConfig+0x264>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7fe fe46 	bl	8001b18 <HAL_InitTick>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e90:	7afb      	ldrb	r3, [r7, #11]
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40023c00 	.word	0x40023c00
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	080036bc 	.word	0x080036bc
 8002ea8:	20000000 	.word	0x20000000
 8002eac:	20000004 	.word	0x20000004

08002eb0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eb4:	b092      	sub	sp, #72	; 0x48
 8002eb6:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002eb8:	4b79      	ldr	r3, [pc, #484]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ec0:	f003 030c 	and.w	r3, r3, #12
 8002ec4:	2b0c      	cmp	r3, #12
 8002ec6:	d00d      	beq.n	8002ee4 <HAL_RCC_GetSysClockFreq+0x34>
 8002ec8:	2b0c      	cmp	r3, #12
 8002eca:	f200 80d5 	bhi.w	8003078 <HAL_RCC_GetSysClockFreq+0x1c8>
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	d002      	beq.n	8002ed8 <HAL_RCC_GetSysClockFreq+0x28>
 8002ed2:	2b08      	cmp	r3, #8
 8002ed4:	d003      	beq.n	8002ede <HAL_RCC_GetSysClockFreq+0x2e>
 8002ed6:	e0cf      	b.n	8003078 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ed8:	4b72      	ldr	r3, [pc, #456]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8002eda:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002edc:	e0da      	b.n	8003094 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ede:	4b72      	ldr	r3, [pc, #456]	; (80030a8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8002ee0:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002ee2:	e0d7      	b.n	8003094 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ee6:	0c9b      	lsrs	r3, r3, #18
 8002ee8:	f003 020f 	and.w	r2, r3, #15
 8002eec:	4b6f      	ldr	r3, [pc, #444]	; (80030ac <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002eee:	5c9b      	ldrb	r3, [r3, r2]
 8002ef0:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ef4:	0d9b      	lsrs	r3, r3, #22
 8002ef6:	f003 0303 	and.w	r3, r3, #3
 8002efa:	3301      	adds	r3, #1
 8002efc:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002efe:	4b68      	ldr	r3, [pc, #416]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d05d      	beq.n	8002fc6 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	4618      	mov	r0, r3
 8002f10:	4611      	mov	r1, r2
 8002f12:	4604      	mov	r4, r0
 8002f14:	460d      	mov	r5, r1
 8002f16:	4622      	mov	r2, r4
 8002f18:	462b      	mov	r3, r5
 8002f1a:	f04f 0000 	mov.w	r0, #0
 8002f1e:	f04f 0100 	mov.w	r1, #0
 8002f22:	0159      	lsls	r1, r3, #5
 8002f24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f28:	0150      	lsls	r0, r2, #5
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	4621      	mov	r1, r4
 8002f30:	1a51      	subs	r1, r2, r1
 8002f32:	6139      	str	r1, [r7, #16]
 8002f34:	4629      	mov	r1, r5
 8002f36:	eb63 0301 	sbc.w	r3, r3, r1
 8002f3a:	617b      	str	r3, [r7, #20]
 8002f3c:	f04f 0200 	mov.w	r2, #0
 8002f40:	f04f 0300 	mov.w	r3, #0
 8002f44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f48:	4659      	mov	r1, fp
 8002f4a:	018b      	lsls	r3, r1, #6
 8002f4c:	4651      	mov	r1, sl
 8002f4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f52:	4651      	mov	r1, sl
 8002f54:	018a      	lsls	r2, r1, #6
 8002f56:	46d4      	mov	ip, sl
 8002f58:	ebb2 080c 	subs.w	r8, r2, ip
 8002f5c:	4659      	mov	r1, fp
 8002f5e:	eb63 0901 	sbc.w	r9, r3, r1
 8002f62:	f04f 0200 	mov.w	r2, #0
 8002f66:	f04f 0300 	mov.w	r3, #0
 8002f6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f76:	4690      	mov	r8, r2
 8002f78:	4699      	mov	r9, r3
 8002f7a:	4623      	mov	r3, r4
 8002f7c:	eb18 0303 	adds.w	r3, r8, r3
 8002f80:	60bb      	str	r3, [r7, #8]
 8002f82:	462b      	mov	r3, r5
 8002f84:	eb49 0303 	adc.w	r3, r9, r3
 8002f88:	60fb      	str	r3, [r7, #12]
 8002f8a:	f04f 0200 	mov.w	r2, #0
 8002f8e:	f04f 0300 	mov.w	r3, #0
 8002f92:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f96:	4629      	mov	r1, r5
 8002f98:	024b      	lsls	r3, r1, #9
 8002f9a:	4620      	mov	r0, r4
 8002f9c:	4629      	mov	r1, r5
 8002f9e:	4604      	mov	r4, r0
 8002fa0:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8002fa4:	4601      	mov	r1, r0
 8002fa6:	024a      	lsls	r2, r1, #9
 8002fa8:	4610      	mov	r0, r2
 8002faa:	4619      	mov	r1, r3
 8002fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fae:	2200      	movs	r2, #0
 8002fb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fb4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fb8:	f7fd fcd8 	bl	800096c <__aeabi_uldivmod>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	647b      	str	r3, [r7, #68]	; 0x44
 8002fc4:	e055      	b.n	8003072 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc8:	2200      	movs	r2, #0
 8002fca:	623b      	str	r3, [r7, #32]
 8002fcc:	627a      	str	r2, [r7, #36]	; 0x24
 8002fce:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002fd2:	4642      	mov	r2, r8
 8002fd4:	464b      	mov	r3, r9
 8002fd6:	f04f 0000 	mov.w	r0, #0
 8002fda:	f04f 0100 	mov.w	r1, #0
 8002fde:	0159      	lsls	r1, r3, #5
 8002fe0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fe4:	0150      	lsls	r0, r2, #5
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	46c4      	mov	ip, r8
 8002fec:	ebb2 0a0c 	subs.w	sl, r2, ip
 8002ff0:	4640      	mov	r0, r8
 8002ff2:	4649      	mov	r1, r9
 8002ff4:	468c      	mov	ip, r1
 8002ff6:	eb63 0b0c 	sbc.w	fp, r3, ip
 8002ffa:	f04f 0200 	mov.w	r2, #0
 8002ffe:	f04f 0300 	mov.w	r3, #0
 8003002:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003006:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800300a:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800300e:	ebb2 040a 	subs.w	r4, r2, sl
 8003012:	eb63 050b 	sbc.w	r5, r3, fp
 8003016:	f04f 0200 	mov.w	r2, #0
 800301a:	f04f 0300 	mov.w	r3, #0
 800301e:	00eb      	lsls	r3, r5, #3
 8003020:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003024:	00e2      	lsls	r2, r4, #3
 8003026:	4614      	mov	r4, r2
 8003028:	461d      	mov	r5, r3
 800302a:	4603      	mov	r3, r0
 800302c:	18e3      	adds	r3, r4, r3
 800302e:	603b      	str	r3, [r7, #0]
 8003030:	460b      	mov	r3, r1
 8003032:	eb45 0303 	adc.w	r3, r5, r3
 8003036:	607b      	str	r3, [r7, #4]
 8003038:	f04f 0200 	mov.w	r2, #0
 800303c:	f04f 0300 	mov.w	r3, #0
 8003040:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003044:	4629      	mov	r1, r5
 8003046:	028b      	lsls	r3, r1, #10
 8003048:	4620      	mov	r0, r4
 800304a:	4629      	mov	r1, r5
 800304c:	4604      	mov	r4, r0
 800304e:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003052:	4601      	mov	r1, r0
 8003054:	028a      	lsls	r2, r1, #10
 8003056:	4610      	mov	r0, r2
 8003058:	4619      	mov	r1, r3
 800305a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800305c:	2200      	movs	r2, #0
 800305e:	61bb      	str	r3, [r7, #24]
 8003060:	61fa      	str	r2, [r7, #28]
 8003062:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003066:	f7fd fc81 	bl	800096c <__aeabi_uldivmod>
 800306a:	4602      	mov	r2, r0
 800306c:	460b      	mov	r3, r1
 800306e:	4613      	mov	r3, r2
 8003070:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8003072:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003074:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003076:	e00d      	b.n	8003094 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003078:	4b09      	ldr	r3, [pc, #36]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	0b5b      	lsrs	r3, r3, #13
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003086:	3301      	adds	r3, #1
 8003088:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003092:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8003096:	4618      	mov	r0, r3
 8003098:	3748      	adds	r7, #72	; 0x48
 800309a:	46bd      	mov	sp, r7
 800309c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030a0:	40023800 	.word	0x40023800
 80030a4:	00f42400 	.word	0x00f42400
 80030a8:	007a1200 	.word	0x007a1200
 80030ac:	080036b0 	.word	0x080036b0

080030b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b087      	sub	sp, #28
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80030b8:	2300      	movs	r3, #0
 80030ba:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80030bc:	4b29      	ldr	r3, [pc, #164]	; (8003164 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d12c      	bne.n	8003122 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80030c8:	4b26      	ldr	r3, [pc, #152]	; (8003164 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d005      	beq.n	80030e0 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80030d4:	4b24      	ldr	r3, [pc, #144]	; (8003168 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80030dc:	617b      	str	r3, [r7, #20]
 80030de:	e016      	b.n	800310e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030e0:	4b20      	ldr	r3, [pc, #128]	; (8003164 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80030e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e4:	4a1f      	ldr	r2, [pc, #124]	; (8003164 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80030e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ea:	6253      	str	r3, [r2, #36]	; 0x24
 80030ec:	4b1d      	ldr	r3, [pc, #116]	; (8003164 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80030ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f4:	60fb      	str	r3, [r7, #12]
 80030f6:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80030f8:	4b1b      	ldr	r3, [pc, #108]	; (8003168 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003100:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003102:	4b18      	ldr	r3, [pc, #96]	; (8003164 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	4a17      	ldr	r2, [pc, #92]	; (8003164 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003108:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800310c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003114:	d105      	bne.n	8003122 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800311c:	d101      	bne.n	8003122 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800311e:	2301      	movs	r3, #1
 8003120:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d105      	bne.n	8003134 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003128:	4b10      	ldr	r3, [pc, #64]	; (800316c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a0f      	ldr	r2, [pc, #60]	; (800316c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800312e:	f043 0304 	orr.w	r3, r3, #4
 8003132:	6013      	str	r3, [r2, #0]
 8003134:	4b0d      	ldr	r3, [pc, #52]	; (800316c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f023 0201 	bic.w	r2, r3, #1
 800313c:	490b      	ldr	r1, [pc, #44]	; (800316c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	4313      	orrs	r3, r2
 8003142:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003144:	4b09      	ldr	r3, [pc, #36]	; (800316c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	429a      	cmp	r2, r3
 8003150:	d001      	beq.n	8003156 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e000      	b.n	8003158 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	371c      	adds	r7, #28
 800315c:	46bd      	mov	sp, r7
 800315e:	bc80      	pop	{r7}
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	40023800 	.word	0x40023800
 8003168:	40007000 	.word	0x40007000
 800316c:	40023c00 	.word	0x40023c00

08003170 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e031      	b.n	80031e6 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d106      	bne.n	800319c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7fe fc0e 	bl	80019b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2202      	movs	r2, #2
 80031a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	3304      	adds	r3, #4
 80031ac:	4619      	mov	r1, r3
 80031ae:	4610      	mov	r0, r2
 80031b0:	f000 f8e2 	bl	8003378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b084      	sub	sp, #16
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
 80031f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d101      	bne.n	8003206 <HAL_TIM_ConfigClockSource+0x18>
 8003202:	2302      	movs	r3, #2
 8003204:	e0b3      	b.n	800336e <HAL_TIM_ConfigClockSource+0x180>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2202      	movs	r2, #2
 8003212:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003224:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800322c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800323e:	d03e      	beq.n	80032be <HAL_TIM_ConfigClockSource+0xd0>
 8003240:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003244:	f200 8087 	bhi.w	8003356 <HAL_TIM_ConfigClockSource+0x168>
 8003248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800324c:	f000 8085 	beq.w	800335a <HAL_TIM_ConfigClockSource+0x16c>
 8003250:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003254:	d87f      	bhi.n	8003356 <HAL_TIM_ConfigClockSource+0x168>
 8003256:	2b70      	cmp	r3, #112	; 0x70
 8003258:	d01a      	beq.n	8003290 <HAL_TIM_ConfigClockSource+0xa2>
 800325a:	2b70      	cmp	r3, #112	; 0x70
 800325c:	d87b      	bhi.n	8003356 <HAL_TIM_ConfigClockSource+0x168>
 800325e:	2b60      	cmp	r3, #96	; 0x60
 8003260:	d050      	beq.n	8003304 <HAL_TIM_ConfigClockSource+0x116>
 8003262:	2b60      	cmp	r3, #96	; 0x60
 8003264:	d877      	bhi.n	8003356 <HAL_TIM_ConfigClockSource+0x168>
 8003266:	2b50      	cmp	r3, #80	; 0x50
 8003268:	d03c      	beq.n	80032e4 <HAL_TIM_ConfigClockSource+0xf6>
 800326a:	2b50      	cmp	r3, #80	; 0x50
 800326c:	d873      	bhi.n	8003356 <HAL_TIM_ConfigClockSource+0x168>
 800326e:	2b40      	cmp	r3, #64	; 0x40
 8003270:	d058      	beq.n	8003324 <HAL_TIM_ConfigClockSource+0x136>
 8003272:	2b40      	cmp	r3, #64	; 0x40
 8003274:	d86f      	bhi.n	8003356 <HAL_TIM_ConfigClockSource+0x168>
 8003276:	2b30      	cmp	r3, #48	; 0x30
 8003278:	d064      	beq.n	8003344 <HAL_TIM_ConfigClockSource+0x156>
 800327a:	2b30      	cmp	r3, #48	; 0x30
 800327c:	d86b      	bhi.n	8003356 <HAL_TIM_ConfigClockSource+0x168>
 800327e:	2b20      	cmp	r3, #32
 8003280:	d060      	beq.n	8003344 <HAL_TIM_ConfigClockSource+0x156>
 8003282:	2b20      	cmp	r3, #32
 8003284:	d867      	bhi.n	8003356 <HAL_TIM_ConfigClockSource+0x168>
 8003286:	2b00      	cmp	r3, #0
 8003288:	d05c      	beq.n	8003344 <HAL_TIM_ConfigClockSource+0x156>
 800328a:	2b10      	cmp	r3, #16
 800328c:	d05a      	beq.n	8003344 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800328e:	e062      	b.n	8003356 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6818      	ldr	r0, [r3, #0]
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	6899      	ldr	r1, [r3, #8]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	f000 f951 	bl	8003546 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032b2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	609a      	str	r2, [r3, #8]
      break;
 80032bc:	e04e      	b.n	800335c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6818      	ldr	r0, [r3, #0]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	6899      	ldr	r1, [r3, #8]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	f000 f93a 	bl	8003546 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032e0:	609a      	str	r2, [r3, #8]
      break;
 80032e2:	e03b      	b.n	800335c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6818      	ldr	r0, [r3, #0]
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	6859      	ldr	r1, [r3, #4]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	461a      	mov	r2, r3
 80032f2:	f000 f8b1 	bl	8003458 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2150      	movs	r1, #80	; 0x50
 80032fc:	4618      	mov	r0, r3
 80032fe:	f000 f908 	bl	8003512 <TIM_ITRx_SetConfig>
      break;
 8003302:	e02b      	b.n	800335c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6818      	ldr	r0, [r3, #0]
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	6859      	ldr	r1, [r3, #4]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	461a      	mov	r2, r3
 8003312:	f000 f8cf 	bl	80034b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2160      	movs	r1, #96	; 0x60
 800331c:	4618      	mov	r0, r3
 800331e:	f000 f8f8 	bl	8003512 <TIM_ITRx_SetConfig>
      break;
 8003322:	e01b      	b.n	800335c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6818      	ldr	r0, [r3, #0]
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	6859      	ldr	r1, [r3, #4]
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	461a      	mov	r2, r3
 8003332:	f000 f891 	bl	8003458 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2140      	movs	r1, #64	; 0x40
 800333c:	4618      	mov	r0, r3
 800333e:	f000 f8e8 	bl	8003512 <TIM_ITRx_SetConfig>
      break;
 8003342:	e00b      	b.n	800335c <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4619      	mov	r1, r3
 800334e:	4610      	mov	r0, r2
 8003350:	f000 f8df 	bl	8003512 <TIM_ITRx_SetConfig>
        break;
 8003354:	e002      	b.n	800335c <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003356:	bf00      	nop
 8003358:	e000      	b.n	800335c <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800335a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
	...

08003378 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800338e:	d00f      	beq.n	80033b0 <TIM_Base_SetConfig+0x38>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a2b      	ldr	r2, [pc, #172]	; (8003440 <TIM_Base_SetConfig+0xc8>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d00b      	beq.n	80033b0 <TIM_Base_SetConfig+0x38>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a2a      	ldr	r2, [pc, #168]	; (8003444 <TIM_Base_SetConfig+0xcc>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d007      	beq.n	80033b0 <TIM_Base_SetConfig+0x38>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a29      	ldr	r2, [pc, #164]	; (8003448 <TIM_Base_SetConfig+0xd0>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d003      	beq.n	80033b0 <TIM_Base_SetConfig+0x38>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a28      	ldr	r2, [pc, #160]	; (800344c <TIM_Base_SetConfig+0xd4>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d108      	bne.n	80033c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	4313      	orrs	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c8:	d017      	beq.n	80033fa <TIM_Base_SetConfig+0x82>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a1c      	ldr	r2, [pc, #112]	; (8003440 <TIM_Base_SetConfig+0xc8>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d013      	beq.n	80033fa <TIM_Base_SetConfig+0x82>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a1b      	ldr	r2, [pc, #108]	; (8003444 <TIM_Base_SetConfig+0xcc>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d00f      	beq.n	80033fa <TIM_Base_SetConfig+0x82>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a1a      	ldr	r2, [pc, #104]	; (8003448 <TIM_Base_SetConfig+0xd0>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d00b      	beq.n	80033fa <TIM_Base_SetConfig+0x82>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a19      	ldr	r2, [pc, #100]	; (800344c <TIM_Base_SetConfig+0xd4>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d007      	beq.n	80033fa <TIM_Base_SetConfig+0x82>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a18      	ldr	r2, [pc, #96]	; (8003450 <TIM_Base_SetConfig+0xd8>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d003      	beq.n	80033fa <TIM_Base_SetConfig+0x82>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a17      	ldr	r2, [pc, #92]	; (8003454 <TIM_Base_SetConfig+0xdc>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d108      	bne.n	800340c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003400:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	4313      	orrs	r3, r2
 800340a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	4313      	orrs	r3, r2
 8003418:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	615a      	str	r2, [r3, #20]
}
 8003436:	bf00      	nop
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	bc80      	pop	{r7}
 800343e:	4770      	bx	lr
 8003440:	40000400 	.word	0x40000400
 8003444:	40000800 	.word	0x40000800
 8003448:	40000c00 	.word	0x40000c00
 800344c:	40010800 	.word	0x40010800
 8003450:	40010c00 	.word	0x40010c00
 8003454:	40011000 	.word	0x40011000

08003458 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003458:	b480      	push	{r7}
 800345a:	b087      	sub	sp, #28
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	f023 0201 	bic.w	r2, r3, #1
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003482:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	011b      	lsls	r3, r3, #4
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	4313      	orrs	r3, r2
 800348c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f023 030a 	bic.w	r3, r3, #10
 8003494:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	4313      	orrs	r3, r2
 800349c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	621a      	str	r2, [r3, #32]
}
 80034aa:	bf00      	nop
 80034ac:	371c      	adds	r7, #28
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bc80      	pop	{r7}
 80034b2:	4770      	bx	lr

080034b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b087      	sub	sp, #28
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	f023 0210 	bic.w	r2, r3, #16
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80034de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	031b      	lsls	r3, r3, #12
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80034f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	011b      	lsls	r3, r3, #4
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	621a      	str	r2, [r3, #32]
}
 8003508:	bf00      	nop
 800350a:	371c      	adds	r7, #28
 800350c:	46bd      	mov	sp, r7
 800350e:	bc80      	pop	{r7}
 8003510:	4770      	bx	lr

08003512 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003512:	b480      	push	{r7}
 8003514:	b085      	sub	sp, #20
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
 800351a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003528:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4313      	orrs	r3, r2
 8003530:	f043 0307 	orr.w	r3, r3, #7
 8003534:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	609a      	str	r2, [r3, #8]
}
 800353c:	bf00      	nop
 800353e:	3714      	adds	r7, #20
 8003540:	46bd      	mov	sp, r7
 8003542:	bc80      	pop	{r7}
 8003544:	4770      	bx	lr

08003546 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003546:	b480      	push	{r7}
 8003548:	b087      	sub	sp, #28
 800354a:	af00      	add	r7, sp, #0
 800354c:	60f8      	str	r0, [r7, #12]
 800354e:	60b9      	str	r1, [r7, #8]
 8003550:	607a      	str	r2, [r7, #4]
 8003552:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003560:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	021a      	lsls	r2, r3, #8
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	431a      	orrs	r2, r3
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	4313      	orrs	r3, r2
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	4313      	orrs	r3, r2
 8003572:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	609a      	str	r2, [r3, #8]
}
 800357a:	bf00      	nop
 800357c:	371c      	adds	r7, #28
 800357e:	46bd      	mov	sp, r7
 8003580:	bc80      	pop	{r7}
 8003582:	4770      	bx	lr

08003584 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003594:	2b01      	cmp	r3, #1
 8003596:	d101      	bne.n	800359c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003598:	2302      	movs	r3, #2
 800359a:	e046      	b.n	800362a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2202      	movs	r2, #2
 80035a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035de:	d00e      	beq.n	80035fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a13      	ldr	r2, [pc, #76]	; (8003634 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d009      	beq.n	80035fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a12      	ldr	r2, [pc, #72]	; (8003638 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d004      	beq.n	80035fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a10      	ldr	r2, [pc, #64]	; (800363c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d10c      	bne.n	8003618 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003604:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	4313      	orrs	r3, r2
 800360e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3714      	adds	r7, #20
 800362e:	46bd      	mov	sp, r7
 8003630:	bc80      	pop	{r7}
 8003632:	4770      	bx	lr
 8003634:	40000400 	.word	0x40000400
 8003638:	40000800 	.word	0x40000800
 800363c:	40010800 	.word	0x40010800

08003640 <__libc_init_array>:
 8003640:	b570      	push	{r4, r5, r6, lr}
 8003642:	2600      	movs	r6, #0
 8003644:	4d0c      	ldr	r5, [pc, #48]	; (8003678 <__libc_init_array+0x38>)
 8003646:	4c0d      	ldr	r4, [pc, #52]	; (800367c <__libc_init_array+0x3c>)
 8003648:	1b64      	subs	r4, r4, r5
 800364a:	10a4      	asrs	r4, r4, #2
 800364c:	42a6      	cmp	r6, r4
 800364e:	d109      	bne.n	8003664 <__libc_init_array+0x24>
 8003650:	f000 f822 	bl	8003698 <_init>
 8003654:	2600      	movs	r6, #0
 8003656:	4d0a      	ldr	r5, [pc, #40]	; (8003680 <__libc_init_array+0x40>)
 8003658:	4c0a      	ldr	r4, [pc, #40]	; (8003684 <__libc_init_array+0x44>)
 800365a:	1b64      	subs	r4, r4, r5
 800365c:	10a4      	asrs	r4, r4, #2
 800365e:	42a6      	cmp	r6, r4
 8003660:	d105      	bne.n	800366e <__libc_init_array+0x2e>
 8003662:	bd70      	pop	{r4, r5, r6, pc}
 8003664:	f855 3b04 	ldr.w	r3, [r5], #4
 8003668:	4798      	blx	r3
 800366a:	3601      	adds	r6, #1
 800366c:	e7ee      	b.n	800364c <__libc_init_array+0xc>
 800366e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003672:	4798      	blx	r3
 8003674:	3601      	adds	r6, #1
 8003676:	e7f2      	b.n	800365e <__libc_init_array+0x1e>
 8003678:	080036d4 	.word	0x080036d4
 800367c:	080036d4 	.word	0x080036d4
 8003680:	080036d4 	.word	0x080036d4
 8003684:	080036d8 	.word	0x080036d8

08003688 <memset>:
 8003688:	4603      	mov	r3, r0
 800368a:	4402      	add	r2, r0
 800368c:	4293      	cmp	r3, r2
 800368e:	d100      	bne.n	8003692 <memset+0xa>
 8003690:	4770      	bx	lr
 8003692:	f803 1b01 	strb.w	r1, [r3], #1
 8003696:	e7f9      	b.n	800368c <memset+0x4>

08003698 <_init>:
 8003698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800369a:	bf00      	nop
 800369c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800369e:	bc08      	pop	{r3}
 80036a0:	469e      	mov	lr, r3
 80036a2:	4770      	bx	lr

080036a4 <_fini>:
 80036a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036a6:	bf00      	nop
 80036a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036aa:	bc08      	pop	{r3}
 80036ac:	469e      	mov	lr, r3
 80036ae:	4770      	bx	lr
